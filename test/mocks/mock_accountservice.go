// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/ans-group/sdk-go/pkg/service/account (interfaces: AccountService)

// Package mocks is a generated GoMock package.
package mocks

import (
	connection "github.com/ans-group/sdk-go/pkg/connection"
	account "github.com/ans-group/sdk-go/pkg/service/account"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockAccountService is a mock of AccountService interface.
type MockAccountService struct {
	ctrl     *gomock.Controller
	recorder *MockAccountServiceMockRecorder
}

// MockAccountServiceMockRecorder is the mock recorder for MockAccountService.
type MockAccountServiceMockRecorder struct {
	mock *MockAccountService
}

// NewMockAccountService creates a new mock instance.
func NewMockAccountService(ctrl *gomock.Controller) *MockAccountService {
	mock := &MockAccountService{ctrl: ctrl}
	mock.recorder = &MockAccountServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAccountService) EXPECT() *MockAccountServiceMockRecorder {
	return m.recorder
}

// CreateApplication mocks base method.
func (m *MockAccountService) CreateApplication(arg0 account.CreateApplicationRequest) (account.CreateApplicationResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateApplication", arg0)
	ret0, _ := ret[0].(account.CreateApplicationResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateApplication indicates an expected call of CreateApplication.
func (mr *MockAccountServiceMockRecorder) CreateApplication(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateApplication", reflect.TypeOf((*MockAccountService)(nil).CreateApplication), arg0)
}

// CreateClient mocks base method.
func (m *MockAccountService) CreateClient(arg0 account.CreateClientRequest) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateClient", arg0)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateClient indicates an expected call of CreateClient.
func (mr *MockAccountServiceMockRecorder) CreateClient(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateClient", reflect.TypeOf((*MockAccountService)(nil).CreateClient), arg0)
}

// CreateInvoiceQuery mocks base method.
func (m *MockAccountService) CreateInvoiceQuery(arg0 account.CreateInvoiceQueryRequest) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateInvoiceQuery", arg0)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateInvoiceQuery indicates an expected call of CreateInvoiceQuery.
func (mr *MockAccountServiceMockRecorder) CreateInvoiceQuery(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateInvoiceQuery", reflect.TypeOf((*MockAccountService)(nil).CreateInvoiceQuery), arg0)
}

// DeleteApplication mocks base method.
func (m *MockAccountService) DeleteApplication(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteApplication", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteApplication indicates an expected call of DeleteApplication.
func (mr *MockAccountServiceMockRecorder) DeleteApplication(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteApplication", reflect.TypeOf((*MockAccountService)(nil).DeleteApplication), arg0)
}

// DeleteApplicationRestrictions mocks base method.
func (m *MockAccountService) DeleteApplicationRestrictions(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteApplicationRestrictions", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteApplicationRestrictions indicates an expected call of DeleteApplicationRestrictions.
func (mr *MockAccountServiceMockRecorder) DeleteApplicationRestrictions(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteApplicationRestrictions", reflect.TypeOf((*MockAccountService)(nil).DeleteApplicationRestrictions), arg0)
}

// DeleteApplicationServices mocks base method.
func (m *MockAccountService) DeleteApplicationServices(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteApplicationServices", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteApplicationServices indicates an expected call of DeleteApplicationServices.
func (mr *MockAccountServiceMockRecorder) DeleteApplicationServices(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteApplicationServices", reflect.TypeOf((*MockAccountService)(nil).DeleteApplicationServices), arg0)
}

// DeleteClient mocks base method.
func (m *MockAccountService) DeleteClient(arg0 int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteClient", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteClient indicates an expected call of DeleteClient.
func (mr *MockAccountServiceMockRecorder) DeleteClient(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteClient", reflect.TypeOf((*MockAccountService)(nil).DeleteClient), arg0)
}

// GetApplication mocks base method.
func (m *MockAccountService) GetApplication(arg0 string) (account.Application, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetApplication", arg0)
	ret0, _ := ret[0].(account.Application)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetApplication indicates an expected call of GetApplication.
func (mr *MockAccountServiceMockRecorder) GetApplication(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetApplication", reflect.TypeOf((*MockAccountService)(nil).GetApplication), arg0)
}

// GetApplicationRestrictions mocks base method.
func (m *MockAccountService) GetApplicationRestrictions(arg0 string) (account.ApplicationRestriction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetApplicationRestrictions", arg0)
	ret0, _ := ret[0].(account.ApplicationRestriction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetApplicationRestrictions indicates an expected call of GetApplicationRestrictions.
func (mr *MockAccountServiceMockRecorder) GetApplicationRestrictions(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetApplicationRestrictions", reflect.TypeOf((*MockAccountService)(nil).GetApplicationRestrictions), arg0)
}

// GetApplicationServices mocks base method.
func (m *MockAccountService) GetApplicationServices(arg0 string) (account.ApplicationServiceMapping, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetApplicationServices", arg0)
	ret0, _ := ret[0].(account.ApplicationServiceMapping)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetApplicationServices indicates an expected call of GetApplicationServices.
func (mr *MockAccountServiceMockRecorder) GetApplicationServices(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetApplicationServices", reflect.TypeOf((*MockAccountService)(nil).GetApplicationServices), arg0)
}

// GetApplications mocks base method.
func (m *MockAccountService) GetApplications(arg0 connection.APIRequestParameters) ([]account.Application, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetApplications", arg0)
	ret0, _ := ret[0].([]account.Application)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetApplications indicates an expected call of GetApplications.
func (mr *MockAccountServiceMockRecorder) GetApplications(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetApplications", reflect.TypeOf((*MockAccountService)(nil).GetApplications), arg0)
}

// GetApplicationsPaginated mocks base method.
func (m *MockAccountService) GetApplicationsPaginated(arg0 connection.APIRequestParameters) (*connection.Paginated[account.Application], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetApplicationsPaginated", arg0)
	ret0, _ := ret[0].(*connection.Paginated[account.Application])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetApplicationsPaginated indicates an expected call of GetApplicationsPaginated.
func (mr *MockAccountServiceMockRecorder) GetApplicationsPaginated(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetApplicationsPaginated", reflect.TypeOf((*MockAccountService)(nil).GetApplicationsPaginated), arg0)
}

// GetClient mocks base method.
func (m *MockAccountService) GetClient(arg0 int) (account.Client, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetClient", arg0)
	ret0, _ := ret[0].(account.Client)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetClient indicates an expected call of GetClient.
func (mr *MockAccountServiceMockRecorder) GetClient(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClient", reflect.TypeOf((*MockAccountService)(nil).GetClient), arg0)
}

// GetClients mocks base method.
func (m *MockAccountService) GetClients(arg0 connection.APIRequestParameters) ([]account.Client, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetClients", arg0)
	ret0, _ := ret[0].([]account.Client)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetClients indicates an expected call of GetClients.
func (mr *MockAccountServiceMockRecorder) GetClients(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClients", reflect.TypeOf((*MockAccountService)(nil).GetClients), arg0)
}

// GetClientsPaginated mocks base method.
func (m *MockAccountService) GetClientsPaginated(arg0 connection.APIRequestParameters) (*connection.Paginated[account.Client], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetClientsPaginated", arg0)
	ret0, _ := ret[0].(*connection.Paginated[account.Client])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetClientsPaginated indicates an expected call of GetClientsPaginated.
func (mr *MockAccountServiceMockRecorder) GetClientsPaginated(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClientsPaginated", reflect.TypeOf((*MockAccountService)(nil).GetClientsPaginated), arg0)
}

// GetContact mocks base method.
func (m *MockAccountService) GetContact(arg0 int) (account.Contact, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetContact", arg0)
	ret0, _ := ret[0].(account.Contact)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetContact indicates an expected call of GetContact.
func (mr *MockAccountServiceMockRecorder) GetContact(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContact", reflect.TypeOf((*MockAccountService)(nil).GetContact), arg0)
}

// GetContacts mocks base method.
func (m *MockAccountService) GetContacts(arg0 connection.APIRequestParameters) ([]account.Contact, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetContacts", arg0)
	ret0, _ := ret[0].([]account.Contact)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetContacts indicates an expected call of GetContacts.
func (mr *MockAccountServiceMockRecorder) GetContacts(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContacts", reflect.TypeOf((*MockAccountService)(nil).GetContacts), arg0)
}

// GetContactsPaginated mocks base method.
func (m *MockAccountService) GetContactsPaginated(arg0 connection.APIRequestParameters) (*connection.Paginated[account.Contact], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetContactsPaginated", arg0)
	ret0, _ := ret[0].(*connection.Paginated[account.Contact])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetContactsPaginated indicates an expected call of GetContactsPaginated.
func (mr *MockAccountServiceMockRecorder) GetContactsPaginated(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContactsPaginated", reflect.TypeOf((*MockAccountService)(nil).GetContactsPaginated), arg0)
}

// GetCredits mocks base method.
func (m *MockAccountService) GetCredits(arg0 connection.APIRequestParameters) ([]account.Credit, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCredits", arg0)
	ret0, _ := ret[0].([]account.Credit)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCredits indicates an expected call of GetCredits.
func (mr *MockAccountServiceMockRecorder) GetCredits(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCredits", reflect.TypeOf((*MockAccountService)(nil).GetCredits), arg0)
}

// GetDetails mocks base method.
func (m *MockAccountService) GetDetails() (account.Details, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDetails")
	ret0, _ := ret[0].(account.Details)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDetails indicates an expected call of GetDetails.
func (mr *MockAccountServiceMockRecorder) GetDetails() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDetails", reflect.TypeOf((*MockAccountService)(nil).GetDetails))
}

// GetInvoice mocks base method.
func (m *MockAccountService) GetInvoice(arg0 int) (account.Invoice, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInvoice", arg0)
	ret0, _ := ret[0].(account.Invoice)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInvoice indicates an expected call of GetInvoice.
func (mr *MockAccountServiceMockRecorder) GetInvoice(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInvoice", reflect.TypeOf((*MockAccountService)(nil).GetInvoice), arg0)
}

// GetInvoiceQueries mocks base method.
func (m *MockAccountService) GetInvoiceQueries(arg0 connection.APIRequestParameters) ([]account.InvoiceQuery, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInvoiceQueries", arg0)
	ret0, _ := ret[0].([]account.InvoiceQuery)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInvoiceQueries indicates an expected call of GetInvoiceQueries.
func (mr *MockAccountServiceMockRecorder) GetInvoiceQueries(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInvoiceQueries", reflect.TypeOf((*MockAccountService)(nil).GetInvoiceQueries), arg0)
}

// GetInvoiceQueriesPaginated mocks base method.
func (m *MockAccountService) GetInvoiceQueriesPaginated(arg0 connection.APIRequestParameters) (*connection.Paginated[account.InvoiceQuery], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInvoiceQueriesPaginated", arg0)
	ret0, _ := ret[0].(*connection.Paginated[account.InvoiceQuery])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInvoiceQueriesPaginated indicates an expected call of GetInvoiceQueriesPaginated.
func (mr *MockAccountServiceMockRecorder) GetInvoiceQueriesPaginated(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInvoiceQueriesPaginated", reflect.TypeOf((*MockAccountService)(nil).GetInvoiceQueriesPaginated), arg0)
}

// GetInvoiceQuery mocks base method.
func (m *MockAccountService) GetInvoiceQuery(arg0 int) (account.InvoiceQuery, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInvoiceQuery", arg0)
	ret0, _ := ret[0].(account.InvoiceQuery)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInvoiceQuery indicates an expected call of GetInvoiceQuery.
func (mr *MockAccountServiceMockRecorder) GetInvoiceQuery(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInvoiceQuery", reflect.TypeOf((*MockAccountService)(nil).GetInvoiceQuery), arg0)
}

// GetInvoices mocks base method.
func (m *MockAccountService) GetInvoices(arg0 connection.APIRequestParameters) ([]account.Invoice, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInvoices", arg0)
	ret0, _ := ret[0].([]account.Invoice)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInvoices indicates an expected call of GetInvoices.
func (mr *MockAccountServiceMockRecorder) GetInvoices(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInvoices", reflect.TypeOf((*MockAccountService)(nil).GetInvoices), arg0)
}

// GetInvoicesPaginated mocks base method.
func (m *MockAccountService) GetInvoicesPaginated(arg0 connection.APIRequestParameters) (*connection.Paginated[account.Invoice], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInvoicesPaginated", arg0)
	ret0, _ := ret[0].(*connection.Paginated[account.Invoice])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInvoicesPaginated indicates an expected call of GetInvoicesPaginated.
func (mr *MockAccountServiceMockRecorder) GetInvoicesPaginated(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInvoicesPaginated", reflect.TypeOf((*MockAccountService)(nil).GetInvoicesPaginated), arg0)
}

// GetServices mocks base method.
func (m *MockAccountService) GetServices(arg0 connection.APIRequestParameters) ([]account.ApplicationService, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetServices", arg0)
	ret0, _ := ret[0].([]account.ApplicationService)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetServices indicates an expected call of GetServices.
func (mr *MockAccountServiceMockRecorder) GetServices(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetServices", reflect.TypeOf((*MockAccountService)(nil).GetServices), arg0)
}

// GetServicesPaginated mocks base method.
func (m *MockAccountService) GetServicesPaginated(arg0 connection.APIRequestParameters) (*connection.Paginated[account.ApplicationService], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetServicesPaginated", arg0)
	ret0, _ := ret[0].(*connection.Paginated[account.ApplicationService])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetServicesPaginated indicates an expected call of GetServicesPaginated.
func (mr *MockAccountServiceMockRecorder) GetServicesPaginated(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetServicesPaginated", reflect.TypeOf((*MockAccountService)(nil).GetServicesPaginated), arg0)
}

// PatchClient mocks base method.
func (m *MockAccountService) PatchClient(arg0 int, arg1 account.PatchClientRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PatchClient", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchClient indicates an expected call of PatchClient.
func (mr *MockAccountServiceMockRecorder) PatchClient(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchClient", reflect.TypeOf((*MockAccountService)(nil).PatchClient), arg0, arg1)
}

// SetApplicationRestrictions mocks base method.
func (m *MockAccountService) SetApplicationRestrictions(arg0 string, arg1 account.SetRestrictionRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetApplicationRestrictions", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetApplicationRestrictions indicates an expected call of SetApplicationRestrictions.
func (mr *MockAccountServiceMockRecorder) SetApplicationRestrictions(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetApplicationRestrictions", reflect.TypeOf((*MockAccountService)(nil).SetApplicationRestrictions), arg0, arg1)
}

// SetApplicationServices mocks base method.
func (m *MockAccountService) SetApplicationServices(arg0 string, arg1 account.SetServiceRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetApplicationServices", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetApplicationServices indicates an expected call of SetApplicationServices.
func (mr *MockAccountServiceMockRecorder) SetApplicationServices(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetApplicationServices", reflect.TypeOf((*MockAccountService)(nil).SetApplicationServices), arg0, arg1)
}

// UpdateApplication mocks base method.
func (m *MockAccountService) UpdateApplication(arg0 string, arg1 account.UpdateApplicationRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateApplication", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateApplication indicates an expected call of UpdateApplication.
func (mr *MockAccountServiceMockRecorder) UpdateApplication(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateApplication", reflect.TypeOf((*MockAccountService)(nil).UpdateApplication), arg0, arg1)
}
