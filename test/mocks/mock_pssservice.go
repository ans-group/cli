// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/ans-group/sdk-go/pkg/service/pss (interfaces: PSSService)

// Package mocks is a generated GoMock package.
package mocks

import (
	io "io"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	connection "github.com/ans-group/sdk-go/pkg/connection"
	pss "github.com/ans-group/sdk-go/pkg/service/pss"
)

// MockPSSService is a mock of PSSService interface.
type MockPSSService struct {
	ctrl     *gomock.Controller
	recorder *MockPSSServiceMockRecorder
}

// MockPSSServiceMockRecorder is the mock recorder for MockPSSService.
type MockPSSServiceMockRecorder struct {
	mock *MockPSSService
}

// NewMockPSSService creates a new mock instance.
func NewMockPSSService(ctrl *gomock.Controller) *MockPSSService {
	mock := &MockPSSService{ctrl: ctrl}
	mock.recorder = &MockPSSServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPSSService) EXPECT() *MockPSSServiceMockRecorder {
	return m.recorder
}

// CreateRequest mocks base method.
func (m *MockPSSService) CreateRequest(arg0 pss.CreateRequestRequest) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRequest", arg0)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateRequest indicates an expected call of CreateRequest.
func (mr *MockPSSServiceMockRecorder) CreateRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRequest", reflect.TypeOf((*MockPSSService)(nil).CreateRequest), arg0)
}

// CreateRequestFeedback mocks base method.
func (m *MockPSSService) CreateRequestFeedback(arg0 int, arg1 pss.CreateFeedbackRequest) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRequestFeedback", arg0, arg1)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateRequestFeedback indicates an expected call of CreateRequestFeedback.
func (mr *MockPSSServiceMockRecorder) CreateRequestFeedback(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRequestFeedback", reflect.TypeOf((*MockPSSService)(nil).CreateRequestFeedback), arg0, arg1)
}

// CreateRequestReply mocks base method.
func (m *MockPSSService) CreateRequestReply(arg0 int, arg1 pss.CreateReplyRequest) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRequestReply", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateRequestReply indicates an expected call of CreateRequestReply.
func (mr *MockPSSServiceMockRecorder) CreateRequestReply(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRequestReply", reflect.TypeOf((*MockPSSService)(nil).CreateRequestReply), arg0, arg1)
}

// DeleteReplyAttachment mocks base method.
func (m *MockPSSService) DeleteReplyAttachment(arg0, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteReplyAttachment", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteReplyAttachment indicates an expected call of DeleteReplyAttachment.
func (mr *MockPSSServiceMockRecorder) DeleteReplyAttachment(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteReplyAttachment", reflect.TypeOf((*MockPSSService)(nil).DeleteReplyAttachment), arg0, arg1)
}

// DownloadReplyAttachmentStream mocks base method.
func (m *MockPSSService) DownloadReplyAttachmentStream(arg0, arg1 string) (io.ReadCloser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DownloadReplyAttachmentStream", arg0, arg1)
	ret0, _ := ret[0].(io.ReadCloser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DownloadReplyAttachmentStream indicates an expected call of DownloadReplyAttachmentStream.
func (mr *MockPSSServiceMockRecorder) DownloadReplyAttachmentStream(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DownloadReplyAttachmentStream", reflect.TypeOf((*MockPSSService)(nil).DownloadReplyAttachmentStream), arg0, arg1)
}

// GetReply mocks base method.
func (m *MockPSSService) GetReply(arg0 string) (pss.Reply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetReply", arg0)
	ret0, _ := ret[0].(pss.Reply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetReply indicates an expected call of GetReply.
func (mr *MockPSSServiceMockRecorder) GetReply(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetReply", reflect.TypeOf((*MockPSSService)(nil).GetReply), arg0)
}

// GetRequest mocks base method.
func (m *MockPSSService) GetRequest(arg0 int) (pss.Request, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRequest", arg0)
	ret0, _ := ret[0].(pss.Request)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRequest indicates an expected call of GetRequest.
func (mr *MockPSSServiceMockRecorder) GetRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRequest", reflect.TypeOf((*MockPSSService)(nil).GetRequest), arg0)
}

// GetRequestConversation mocks base method.
func (m *MockPSSService) GetRequestConversation(arg0 int, arg1 connection.APIRequestParameters) ([]pss.Reply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRequestConversation", arg0, arg1)
	ret0, _ := ret[0].([]pss.Reply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRequestConversation indicates an expected call of GetRequestConversation.
func (mr *MockPSSServiceMockRecorder) GetRequestConversation(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRequestConversation", reflect.TypeOf((*MockPSSService)(nil).GetRequestConversation), arg0, arg1)
}

// GetRequestConversationPaginated mocks base method.
func (m *MockPSSService) GetRequestConversationPaginated(arg0 int, arg1 connection.APIRequestParameters) (*connection.Paginated[pss.Reply], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRequestConversationPaginated", arg0, arg1)
	ret0, _ := ret[0].(*connection.Paginated[pss.Reply])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRequestConversationPaginated indicates an expected call of GetRequestConversationPaginated.
func (mr *MockPSSServiceMockRecorder) GetRequestConversationPaginated(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRequestConversationPaginated", reflect.TypeOf((*MockPSSService)(nil).GetRequestConversationPaginated), arg0, arg1)
}

// GetRequestFeedback mocks base method.
func (m *MockPSSService) GetRequestFeedback(arg0 int) (pss.Feedback, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRequestFeedback", arg0)
	ret0, _ := ret[0].(pss.Feedback)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRequestFeedback indicates an expected call of GetRequestFeedback.
func (mr *MockPSSServiceMockRecorder) GetRequestFeedback(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRequestFeedback", reflect.TypeOf((*MockPSSService)(nil).GetRequestFeedback), arg0)
}

// GetRequestReplies mocks base method.
func (m *MockPSSService) GetRequestReplies(arg0 int, arg1 connection.APIRequestParameters) ([]pss.Reply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRequestReplies", arg0, arg1)
	ret0, _ := ret[0].([]pss.Reply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRequestReplies indicates an expected call of GetRequestReplies.
func (mr *MockPSSServiceMockRecorder) GetRequestReplies(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRequestReplies", reflect.TypeOf((*MockPSSService)(nil).GetRequestReplies), arg0, arg1)
}

// GetRequestRepliesPaginated mocks base method.
func (m *MockPSSService) GetRequestRepliesPaginated(arg0 int, arg1 connection.APIRequestParameters) (*connection.Paginated[pss.Reply], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRequestRepliesPaginated", arg0, arg1)
	ret0, _ := ret[0].(*connection.Paginated[pss.Reply])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRequestRepliesPaginated indicates an expected call of GetRequestRepliesPaginated.
func (mr *MockPSSServiceMockRecorder) GetRequestRepliesPaginated(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRequestRepliesPaginated", reflect.TypeOf((*MockPSSService)(nil).GetRequestRepliesPaginated), arg0, arg1)
}

// GetRequests mocks base method.
func (m *MockPSSService) GetRequests(arg0 connection.APIRequestParameters) ([]pss.Request, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRequests", arg0)
	ret0, _ := ret[0].([]pss.Request)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRequests indicates an expected call of GetRequests.
func (mr *MockPSSServiceMockRecorder) GetRequests(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRequests", reflect.TypeOf((*MockPSSService)(nil).GetRequests), arg0)
}

// GetRequestsPaginated mocks base method.
func (m *MockPSSService) GetRequestsPaginated(arg0 connection.APIRequestParameters) (*connection.Paginated[pss.Request], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRequestsPaginated", arg0)
	ret0, _ := ret[0].(*connection.Paginated[pss.Request])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRequestsPaginated indicates an expected call of GetRequestsPaginated.
func (mr *MockPSSServiceMockRecorder) GetRequestsPaginated(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRequestsPaginated", reflect.TypeOf((*MockPSSService)(nil).GetRequestsPaginated), arg0)
}

// PatchRequest mocks base method.
func (m *MockPSSService) PatchRequest(arg0 int, arg1 pss.PatchRequestRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PatchRequest", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchRequest indicates an expected call of PatchRequest.
func (mr *MockPSSServiceMockRecorder) PatchRequest(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchRequest", reflect.TypeOf((*MockPSSService)(nil).PatchRequest), arg0, arg1)
}

// UploadReplyAttachmentStream mocks base method.
func (m *MockPSSService) UploadReplyAttachmentStream(arg0, arg1 string, arg2 io.Reader) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UploadReplyAttachmentStream", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// UploadReplyAttachmentStream indicates an expected call of UploadReplyAttachmentStream.
func (mr *MockPSSServiceMockRecorder) UploadReplyAttachmentStream(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UploadReplyAttachmentStream", reflect.TypeOf((*MockPSSService)(nil).UploadReplyAttachmentStream), arg0, arg1, arg2)
}
