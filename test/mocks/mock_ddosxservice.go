// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/ukfast/sdk-go/pkg/service/ddosx (interfaces: DDoSXService)

// Package mocks is a generated GoMock package.
package mocks

import (
	gomock "github.com/golang/mock/gomock"
	connection "github.com/ukfast/sdk-go/pkg/connection"
	ddosx "github.com/ukfast/sdk-go/pkg/service/ddosx"
	io "io"
	reflect "reflect"
)

// MockDDoSXService is a mock of DDoSXService interface
type MockDDoSXService struct {
	ctrl     *gomock.Controller
	recorder *MockDDoSXServiceMockRecorder
}

// MockDDoSXServiceMockRecorder is the mock recorder for MockDDoSXService
type MockDDoSXServiceMockRecorder struct {
	mock *MockDDoSXService
}

// NewMockDDoSXService creates a new mock instance
func NewMockDDoSXService(ctrl *gomock.Controller) *MockDDoSXService {
	mock := &MockDDoSXService{ctrl: ctrl}
	mock.recorder = &MockDDoSXServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockDDoSXService) EXPECT() *MockDDoSXServiceMockRecorder {
	return m.recorder
}

// AddDomainCDNConfiguration mocks base method
func (m *MockDDoSXService) AddDomainCDNConfiguration(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddDomainCDNConfiguration", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddDomainCDNConfiguration indicates an expected call of AddDomainCDNConfiguration
func (mr *MockDDoSXServiceMockRecorder) AddDomainCDNConfiguration(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddDomainCDNConfiguration", reflect.TypeOf((*MockDDoSXService)(nil).AddDomainCDNConfiguration), arg0)
}

// AddDomainHSTSConfiguration mocks base method
func (m *MockDDoSXService) AddDomainHSTSConfiguration(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddDomainHSTSConfiguration", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddDomainHSTSConfiguration indicates an expected call of AddDomainHSTSConfiguration
func (mr *MockDDoSXServiceMockRecorder) AddDomainHSTSConfiguration(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddDomainHSTSConfiguration", reflect.TypeOf((*MockDDoSXService)(nil).AddDomainHSTSConfiguration), arg0)
}

// CreateDomain mocks base method
func (m *MockDDoSXService) CreateDomain(arg0 ddosx.CreateDomainRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDomain", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateDomain indicates an expected call of CreateDomain
func (mr *MockDDoSXServiceMockRecorder) CreateDomain(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDomain", reflect.TypeOf((*MockDDoSXService)(nil).CreateDomain), arg0)
}

// CreateDomainACLGeoIPRule mocks base method
func (m *MockDDoSXService) CreateDomainACLGeoIPRule(arg0 string, arg1 ddosx.CreateACLGeoIPRuleRequest) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDomainACLGeoIPRule", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateDomainACLGeoIPRule indicates an expected call of CreateDomainACLGeoIPRule
func (mr *MockDDoSXServiceMockRecorder) CreateDomainACLGeoIPRule(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDomainACLGeoIPRule", reflect.TypeOf((*MockDDoSXService)(nil).CreateDomainACLGeoIPRule), arg0, arg1)
}

// CreateDomainACLIPRule mocks base method
func (m *MockDDoSXService) CreateDomainACLIPRule(arg0 string, arg1 ddosx.CreateACLIPRuleRequest) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDomainACLIPRule", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateDomainACLIPRule indicates an expected call of CreateDomainACLIPRule
func (mr *MockDDoSXServiceMockRecorder) CreateDomainACLIPRule(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDomainACLIPRule", reflect.TypeOf((*MockDDoSXService)(nil).CreateDomainACLIPRule), arg0, arg1)
}

// CreateDomainCDNRule mocks base method
func (m *MockDDoSXService) CreateDomainCDNRule(arg0 string, arg1 ddosx.CreateCDNRuleRequest) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDomainCDNRule", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateDomainCDNRule indicates an expected call of CreateDomainCDNRule
func (mr *MockDDoSXServiceMockRecorder) CreateDomainCDNRule(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDomainCDNRule", reflect.TypeOf((*MockDDoSXService)(nil).CreateDomainCDNRule), arg0, arg1)
}

// CreateDomainRecord mocks base method
func (m *MockDDoSXService) CreateDomainRecord(arg0 string, arg1 ddosx.CreateRecordRequest) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDomainRecord", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateDomainRecord indicates an expected call of CreateDomainRecord
func (mr *MockDDoSXServiceMockRecorder) CreateDomainRecord(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDomainRecord", reflect.TypeOf((*MockDDoSXService)(nil).CreateDomainRecord), arg0, arg1)
}

// CreateDomainWAF mocks base method
func (m *MockDDoSXService) CreateDomainWAF(arg0 string, arg1 ddosx.CreateWAFRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDomainWAF", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateDomainWAF indicates an expected call of CreateDomainWAF
func (mr *MockDDoSXServiceMockRecorder) CreateDomainWAF(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDomainWAF", reflect.TypeOf((*MockDDoSXService)(nil).CreateDomainWAF), arg0, arg1)
}

// CreateDomainWAFAdvancedRule mocks base method
func (m *MockDDoSXService) CreateDomainWAFAdvancedRule(arg0 string, arg1 ddosx.CreateWAFAdvancedRuleRequest) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDomainWAFAdvancedRule", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateDomainWAFAdvancedRule indicates an expected call of CreateDomainWAFAdvancedRule
func (mr *MockDDoSXServiceMockRecorder) CreateDomainWAFAdvancedRule(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDomainWAFAdvancedRule", reflect.TypeOf((*MockDDoSXService)(nil).CreateDomainWAFAdvancedRule), arg0, arg1)
}

// CreateDomainWAFRule mocks base method
func (m *MockDDoSXService) CreateDomainWAFRule(arg0 string, arg1 ddosx.CreateWAFRuleRequest) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDomainWAFRule", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateDomainWAFRule indicates an expected call of CreateDomainWAFRule
func (mr *MockDDoSXServiceMockRecorder) CreateDomainWAFRule(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDomainWAFRule", reflect.TypeOf((*MockDDoSXService)(nil).CreateDomainWAFRule), arg0, arg1)
}

// CreateSSL mocks base method
func (m *MockDDoSXService) CreateSSL(arg0 ddosx.CreateSSLRequest) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSSL", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSSL indicates an expected call of CreateSSL
func (mr *MockDDoSXServiceMockRecorder) CreateSSL(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSSL", reflect.TypeOf((*MockDDoSXService)(nil).CreateSSL), arg0)
}

// DeleteDomainACLGeoIPRule mocks base method
func (m *MockDDoSXService) DeleteDomainACLGeoIPRule(arg0, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteDomainACLGeoIPRule", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteDomainACLGeoIPRule indicates an expected call of DeleteDomainACLGeoIPRule
func (mr *MockDDoSXServiceMockRecorder) DeleteDomainACLGeoIPRule(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDomainACLGeoIPRule", reflect.TypeOf((*MockDDoSXService)(nil).DeleteDomainACLGeoIPRule), arg0, arg1)
}

// DeleteDomainACLIPRule mocks base method
func (m *MockDDoSXService) DeleteDomainACLIPRule(arg0, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteDomainACLIPRule", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteDomainACLIPRule indicates an expected call of DeleteDomainACLIPRule
func (mr *MockDDoSXServiceMockRecorder) DeleteDomainACLIPRule(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDomainACLIPRule", reflect.TypeOf((*MockDDoSXService)(nil).DeleteDomainACLIPRule), arg0, arg1)
}

// DeleteDomainCDNConfiguration mocks base method
func (m *MockDDoSXService) DeleteDomainCDNConfiguration(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteDomainCDNConfiguration", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteDomainCDNConfiguration indicates an expected call of DeleteDomainCDNConfiguration
func (mr *MockDDoSXServiceMockRecorder) DeleteDomainCDNConfiguration(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDomainCDNConfiguration", reflect.TypeOf((*MockDDoSXService)(nil).DeleteDomainCDNConfiguration), arg0)
}

// DeleteDomainCDNRule mocks base method
func (m *MockDDoSXService) DeleteDomainCDNRule(arg0, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteDomainCDNRule", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteDomainCDNRule indicates an expected call of DeleteDomainCDNRule
func (mr *MockDDoSXServiceMockRecorder) DeleteDomainCDNRule(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDomainCDNRule", reflect.TypeOf((*MockDDoSXService)(nil).DeleteDomainCDNRule), arg0, arg1)
}

// DeleteDomainHSTSConfiguration mocks base method
func (m *MockDDoSXService) DeleteDomainHSTSConfiguration(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteDomainHSTSConfiguration", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteDomainHSTSConfiguration indicates an expected call of DeleteDomainHSTSConfiguration
func (mr *MockDDoSXServiceMockRecorder) DeleteDomainHSTSConfiguration(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDomainHSTSConfiguration", reflect.TypeOf((*MockDDoSXService)(nil).DeleteDomainHSTSConfiguration), arg0)
}

// DeleteDomainRecord mocks base method
func (m *MockDDoSXService) DeleteDomainRecord(arg0, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteDomainRecord", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteDomainRecord indicates an expected call of DeleteDomainRecord
func (mr *MockDDoSXServiceMockRecorder) DeleteDomainRecord(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDomainRecord", reflect.TypeOf((*MockDDoSXService)(nil).DeleteDomainRecord), arg0, arg1)
}

// DeleteDomainWAF mocks base method
func (m *MockDDoSXService) DeleteDomainWAF(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteDomainWAF", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteDomainWAF indicates an expected call of DeleteDomainWAF
func (mr *MockDDoSXServiceMockRecorder) DeleteDomainWAF(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDomainWAF", reflect.TypeOf((*MockDDoSXService)(nil).DeleteDomainWAF), arg0)
}

// DeleteDomainWAFAdvancedRule mocks base method
func (m *MockDDoSXService) DeleteDomainWAFAdvancedRule(arg0, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteDomainWAFAdvancedRule", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteDomainWAFAdvancedRule indicates an expected call of DeleteDomainWAFAdvancedRule
func (mr *MockDDoSXServiceMockRecorder) DeleteDomainWAFAdvancedRule(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDomainWAFAdvancedRule", reflect.TypeOf((*MockDDoSXService)(nil).DeleteDomainWAFAdvancedRule), arg0, arg1)
}

// DeleteDomainWAFRule mocks base method
func (m *MockDDoSXService) DeleteDomainWAFRule(arg0, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteDomainWAFRule", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteDomainWAFRule indicates an expected call of DeleteDomainWAFRule
func (mr *MockDDoSXServiceMockRecorder) DeleteDomainWAFRule(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDomainWAFRule", reflect.TypeOf((*MockDDoSXService)(nil).DeleteDomainWAFRule), arg0, arg1)
}

// DeleteSSL mocks base method
func (m *MockDDoSXService) DeleteSSL(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSSL", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteSSL indicates an expected call of DeleteSSL
func (mr *MockDDoSXServiceMockRecorder) DeleteSSL(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSSL", reflect.TypeOf((*MockDDoSXService)(nil).DeleteSSL), arg0)
}

// DeployDomain mocks base method
func (m *MockDDoSXService) DeployDomain(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeployDomain", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeployDomain indicates an expected call of DeployDomain
func (mr *MockDDoSXServiceMockRecorder) DeployDomain(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeployDomain", reflect.TypeOf((*MockDDoSXService)(nil).DeployDomain), arg0)
}

// DownloadDomainVerificationFile mocks base method
func (m *MockDDoSXService) DownloadDomainVerificationFile(arg0 string) (string, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DownloadDomainVerificationFile", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// DownloadDomainVerificationFile indicates an expected call of DownloadDomainVerificationFile
func (mr *MockDDoSXServiceMockRecorder) DownloadDomainVerificationFile(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DownloadDomainVerificationFile", reflect.TypeOf((*MockDDoSXService)(nil).DownloadDomainVerificationFile), arg0)
}

// DownloadDomainVerificationFileStream mocks base method
func (m *MockDDoSXService) DownloadDomainVerificationFileStream(arg0 string) (io.ReadCloser, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DownloadDomainVerificationFileStream", arg0)
	ret0, _ := ret[0].(io.ReadCloser)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// DownloadDomainVerificationFileStream indicates an expected call of DownloadDomainVerificationFileStream
func (mr *MockDDoSXServiceMockRecorder) DownloadDomainVerificationFileStream(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DownloadDomainVerificationFileStream", reflect.TypeOf((*MockDDoSXService)(nil).DownloadDomainVerificationFileStream), arg0)
}

// GetDomain mocks base method
func (m *MockDDoSXService) GetDomain(arg0 string) (ddosx.Domain, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDomain", arg0)
	ret0, _ := ret[0].(ddosx.Domain)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDomain indicates an expected call of GetDomain
func (mr *MockDDoSXServiceMockRecorder) GetDomain(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDomain", reflect.TypeOf((*MockDDoSXService)(nil).GetDomain), arg0)
}

// GetDomainACLGeoIPRules mocks base method
func (m *MockDDoSXService) GetDomainACLGeoIPRules(arg0 string, arg1 connection.APIRequestParameters) ([]ddosx.ACLGeoIPRule, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDomainACLGeoIPRules", arg0, arg1)
	ret0, _ := ret[0].([]ddosx.ACLGeoIPRule)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDomainACLGeoIPRules indicates an expected call of GetDomainACLGeoIPRules
func (mr *MockDDoSXServiceMockRecorder) GetDomainACLGeoIPRules(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDomainACLGeoIPRules", reflect.TypeOf((*MockDDoSXService)(nil).GetDomainACLGeoIPRules), arg0, arg1)
}

// GetDomainACLGeoIPRulesMode mocks base method
func (m *MockDDoSXService) GetDomainACLGeoIPRulesMode(arg0 string) (ddosx.ACLGeoIPRulesMode, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDomainACLGeoIPRulesMode", arg0)
	ret0, _ := ret[0].(ddosx.ACLGeoIPRulesMode)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDomainACLGeoIPRulesMode indicates an expected call of GetDomainACLGeoIPRulesMode
func (mr *MockDDoSXServiceMockRecorder) GetDomainACLGeoIPRulesMode(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDomainACLGeoIPRulesMode", reflect.TypeOf((*MockDDoSXService)(nil).GetDomainACLGeoIPRulesMode), arg0)
}

// GetDomainACLGeoIPRulesPaginated mocks base method
func (m *MockDDoSXService) GetDomainACLGeoIPRulesPaginated(arg0 string, arg1 connection.APIRequestParameters) ([]ddosx.ACLGeoIPRule, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDomainACLGeoIPRulesPaginated", arg0, arg1)
	ret0, _ := ret[0].([]ddosx.ACLGeoIPRule)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDomainACLGeoIPRulesPaginated indicates an expected call of GetDomainACLGeoIPRulesPaginated
func (mr *MockDDoSXServiceMockRecorder) GetDomainACLGeoIPRulesPaginated(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDomainACLGeoIPRulesPaginated", reflect.TypeOf((*MockDDoSXService)(nil).GetDomainACLGeoIPRulesPaginated), arg0, arg1)
}

// GetDomainACLIPRules mocks base method
func (m *MockDDoSXService) GetDomainACLIPRules(arg0 string, arg1 connection.APIRequestParameters) ([]ddosx.ACLIPRule, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDomainACLIPRules", arg0, arg1)
	ret0, _ := ret[0].([]ddosx.ACLIPRule)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDomainACLIPRules indicates an expected call of GetDomainACLIPRules
func (mr *MockDDoSXServiceMockRecorder) GetDomainACLIPRules(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDomainACLIPRules", reflect.TypeOf((*MockDDoSXService)(nil).GetDomainACLIPRules), arg0, arg1)
}

// GetDomainACLIPRulesPaginated mocks base method
func (m *MockDDoSXService) GetDomainACLIPRulesPaginated(arg0 string, arg1 connection.APIRequestParameters) ([]ddosx.ACLIPRule, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDomainACLIPRulesPaginated", arg0, arg1)
	ret0, _ := ret[0].([]ddosx.ACLIPRule)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDomainACLIPRulesPaginated indicates an expected call of GetDomainACLIPRulesPaginated
func (mr *MockDDoSXServiceMockRecorder) GetDomainACLIPRulesPaginated(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDomainACLIPRulesPaginated", reflect.TypeOf((*MockDDoSXService)(nil).GetDomainACLIPRulesPaginated), arg0, arg1)
}

// GetDomainCDNRule mocks base method
func (m *MockDDoSXService) GetDomainCDNRule(arg0, arg1 string) (ddosx.CDNRule, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDomainCDNRule", arg0, arg1)
	ret0, _ := ret[0].(ddosx.CDNRule)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDomainCDNRule indicates an expected call of GetDomainCDNRule
func (mr *MockDDoSXServiceMockRecorder) GetDomainCDNRule(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDomainCDNRule", reflect.TypeOf((*MockDDoSXService)(nil).GetDomainCDNRule), arg0, arg1)
}

// GetDomainCDNRules mocks base method
func (m *MockDDoSXService) GetDomainCDNRules(arg0 string, arg1 connection.APIRequestParameters) ([]ddosx.CDNRule, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDomainCDNRules", arg0, arg1)
	ret0, _ := ret[0].([]ddosx.CDNRule)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDomainCDNRules indicates an expected call of GetDomainCDNRules
func (mr *MockDDoSXServiceMockRecorder) GetDomainCDNRules(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDomainCDNRules", reflect.TypeOf((*MockDDoSXService)(nil).GetDomainCDNRules), arg0, arg1)
}

// GetDomainCDNRulesPaginated mocks base method
func (m *MockDDoSXService) GetDomainCDNRulesPaginated(arg0 string, arg1 connection.APIRequestParameters) ([]ddosx.CDNRule, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDomainCDNRulesPaginated", arg0, arg1)
	ret0, _ := ret[0].([]ddosx.CDNRule)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDomainCDNRulesPaginated indicates an expected call of GetDomainCDNRulesPaginated
func (mr *MockDDoSXServiceMockRecorder) GetDomainCDNRulesPaginated(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDomainCDNRulesPaginated", reflect.TypeOf((*MockDDoSXService)(nil).GetDomainCDNRulesPaginated), arg0, arg1)
}

// GetDomainProperties mocks base method
func (m *MockDDoSXService) GetDomainProperties(arg0 string, arg1 connection.APIRequestParameters) ([]ddosx.DomainProperty, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDomainProperties", arg0, arg1)
	ret0, _ := ret[0].([]ddosx.DomainProperty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDomainProperties indicates an expected call of GetDomainProperties
func (mr *MockDDoSXServiceMockRecorder) GetDomainProperties(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDomainProperties", reflect.TypeOf((*MockDDoSXService)(nil).GetDomainProperties), arg0, arg1)
}

// GetDomainPropertiesPaginated mocks base method
func (m *MockDDoSXService) GetDomainPropertiesPaginated(arg0 string, arg1 connection.APIRequestParameters) ([]ddosx.DomainProperty, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDomainPropertiesPaginated", arg0, arg1)
	ret0, _ := ret[0].([]ddosx.DomainProperty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDomainPropertiesPaginated indicates an expected call of GetDomainPropertiesPaginated
func (mr *MockDDoSXServiceMockRecorder) GetDomainPropertiesPaginated(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDomainPropertiesPaginated", reflect.TypeOf((*MockDDoSXService)(nil).GetDomainPropertiesPaginated), arg0, arg1)
}

// GetDomainProperty mocks base method
func (m *MockDDoSXService) GetDomainProperty(arg0, arg1 string) (ddosx.DomainProperty, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDomainProperty", arg0, arg1)
	ret0, _ := ret[0].(ddosx.DomainProperty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDomainProperty indicates an expected call of GetDomainProperty
func (mr *MockDDoSXServiceMockRecorder) GetDomainProperty(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDomainProperty", reflect.TypeOf((*MockDDoSXService)(nil).GetDomainProperty), arg0, arg1)
}

// GetDomainRecords mocks base method
func (m *MockDDoSXService) GetDomainRecords(arg0 string, arg1 connection.APIRequestParameters) ([]ddosx.Record, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDomainRecords", arg0, arg1)
	ret0, _ := ret[0].([]ddosx.Record)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDomainRecords indicates an expected call of GetDomainRecords
func (mr *MockDDoSXServiceMockRecorder) GetDomainRecords(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDomainRecords", reflect.TypeOf((*MockDDoSXService)(nil).GetDomainRecords), arg0, arg1)
}

// GetDomainRecordsPaginated mocks base method
func (m *MockDDoSXService) GetDomainRecordsPaginated(arg0 string, arg1 connection.APIRequestParameters) ([]ddosx.Record, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDomainRecordsPaginated", arg0, arg1)
	ret0, _ := ret[0].([]ddosx.Record)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDomainRecordsPaginated indicates an expected call of GetDomainRecordsPaginated
func (mr *MockDDoSXServiceMockRecorder) GetDomainRecordsPaginated(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDomainRecordsPaginated", reflect.TypeOf((*MockDDoSXService)(nil).GetDomainRecordsPaginated), arg0, arg1)
}

// GetDomainWAF mocks base method
func (m *MockDDoSXService) GetDomainWAF(arg0 string) (ddosx.WAF, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDomainWAF", arg0)
	ret0, _ := ret[0].(ddosx.WAF)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDomainWAF indicates an expected call of GetDomainWAF
func (mr *MockDDoSXServiceMockRecorder) GetDomainWAF(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDomainWAF", reflect.TypeOf((*MockDDoSXService)(nil).GetDomainWAF), arg0)
}

// GetDomainWAFAdvancedRules mocks base method
func (m *MockDDoSXService) GetDomainWAFAdvancedRules(arg0 string, arg1 connection.APIRequestParameters) ([]ddosx.WAFAdvancedRule, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDomainWAFAdvancedRules", arg0, arg1)
	ret0, _ := ret[0].([]ddosx.WAFAdvancedRule)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDomainWAFAdvancedRules indicates an expected call of GetDomainWAFAdvancedRules
func (mr *MockDDoSXServiceMockRecorder) GetDomainWAFAdvancedRules(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDomainWAFAdvancedRules", reflect.TypeOf((*MockDDoSXService)(nil).GetDomainWAFAdvancedRules), arg0, arg1)
}

// GetDomainWAFAdvancedRulesPaginated mocks base method
func (m *MockDDoSXService) GetDomainWAFAdvancedRulesPaginated(arg0 string, arg1 connection.APIRequestParameters) ([]ddosx.WAFAdvancedRule, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDomainWAFAdvancedRulesPaginated", arg0, arg1)
	ret0, _ := ret[0].([]ddosx.WAFAdvancedRule)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDomainWAFAdvancedRulesPaginated indicates an expected call of GetDomainWAFAdvancedRulesPaginated
func (mr *MockDDoSXServiceMockRecorder) GetDomainWAFAdvancedRulesPaginated(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDomainWAFAdvancedRulesPaginated", reflect.TypeOf((*MockDDoSXService)(nil).GetDomainWAFAdvancedRulesPaginated), arg0, arg1)
}

// GetDomainWAFRuleSet mocks base method
func (m *MockDDoSXService) GetDomainWAFRuleSet(arg0, arg1 string) (ddosx.WAFRuleSet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDomainWAFRuleSet", arg0, arg1)
	ret0, _ := ret[0].(ddosx.WAFRuleSet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDomainWAFRuleSet indicates an expected call of GetDomainWAFRuleSet
func (mr *MockDDoSXServiceMockRecorder) GetDomainWAFRuleSet(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDomainWAFRuleSet", reflect.TypeOf((*MockDDoSXService)(nil).GetDomainWAFRuleSet), arg0, arg1)
}

// GetDomainWAFRuleSets mocks base method
func (m *MockDDoSXService) GetDomainWAFRuleSets(arg0 string, arg1 connection.APIRequestParameters) ([]ddosx.WAFRuleSet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDomainWAFRuleSets", arg0, arg1)
	ret0, _ := ret[0].([]ddosx.WAFRuleSet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDomainWAFRuleSets indicates an expected call of GetDomainWAFRuleSets
func (mr *MockDDoSXServiceMockRecorder) GetDomainWAFRuleSets(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDomainWAFRuleSets", reflect.TypeOf((*MockDDoSXService)(nil).GetDomainWAFRuleSets), arg0, arg1)
}

// GetDomainWAFRuleSetsPaginated mocks base method
func (m *MockDDoSXService) GetDomainWAFRuleSetsPaginated(arg0 string, arg1 connection.APIRequestParameters) ([]ddosx.WAFRuleSet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDomainWAFRuleSetsPaginated", arg0, arg1)
	ret0, _ := ret[0].([]ddosx.WAFRuleSet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDomainWAFRuleSetsPaginated indicates an expected call of GetDomainWAFRuleSetsPaginated
func (mr *MockDDoSXServiceMockRecorder) GetDomainWAFRuleSetsPaginated(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDomainWAFRuleSetsPaginated", reflect.TypeOf((*MockDDoSXService)(nil).GetDomainWAFRuleSetsPaginated), arg0, arg1)
}

// GetDomainWAFRules mocks base method
func (m *MockDDoSXService) GetDomainWAFRules(arg0 string, arg1 connection.APIRequestParameters) ([]ddosx.WAFRule, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDomainWAFRules", arg0, arg1)
	ret0, _ := ret[0].([]ddosx.WAFRule)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDomainWAFRules indicates an expected call of GetDomainWAFRules
func (mr *MockDDoSXServiceMockRecorder) GetDomainWAFRules(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDomainWAFRules", reflect.TypeOf((*MockDDoSXService)(nil).GetDomainWAFRules), arg0, arg1)
}

// GetDomainWAFRulesPaginated mocks base method
func (m *MockDDoSXService) GetDomainWAFRulesPaginated(arg0 string, arg1 connection.APIRequestParameters) ([]ddosx.WAFRule, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDomainWAFRulesPaginated", arg0, arg1)
	ret0, _ := ret[0].([]ddosx.WAFRule)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDomainWAFRulesPaginated indicates an expected call of GetDomainWAFRulesPaginated
func (mr *MockDDoSXServiceMockRecorder) GetDomainWAFRulesPaginated(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDomainWAFRulesPaginated", reflect.TypeOf((*MockDDoSXService)(nil).GetDomainWAFRulesPaginated), arg0, arg1)
}

// GetDomains mocks base method
func (m *MockDDoSXService) GetDomains(arg0 connection.APIRequestParameters) ([]ddosx.Domain, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDomains", arg0)
	ret0, _ := ret[0].([]ddosx.Domain)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDomains indicates an expected call of GetDomains
func (mr *MockDDoSXServiceMockRecorder) GetDomains(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDomains", reflect.TypeOf((*MockDDoSXService)(nil).GetDomains), arg0)
}

// GetDomainsPaginated mocks base method
func (m *MockDDoSXService) GetDomainsPaginated(arg0 connection.APIRequestParameters) ([]ddosx.Domain, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDomainsPaginated", arg0)
	ret0, _ := ret[0].([]ddosx.Domain)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDomainsPaginated indicates an expected call of GetDomainsPaginated
func (mr *MockDDoSXServiceMockRecorder) GetDomainsPaginated(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDomainsPaginated", reflect.TypeOf((*MockDDoSXService)(nil).GetDomainsPaginated), arg0)
}

// GetRecords mocks base method
func (m *MockDDoSXService) GetRecords(arg0 connection.APIRequestParameters) ([]ddosx.Record, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRecords", arg0)
	ret0, _ := ret[0].([]ddosx.Record)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRecords indicates an expected call of GetRecords
func (mr *MockDDoSXServiceMockRecorder) GetRecords(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRecords", reflect.TypeOf((*MockDDoSXService)(nil).GetRecords), arg0)
}

// GetRecordsPaginated mocks base method
func (m *MockDDoSXService) GetRecordsPaginated(arg0 connection.APIRequestParameters) ([]ddosx.Record, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRecordsPaginated", arg0)
	ret0, _ := ret[0].([]ddosx.Record)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRecordsPaginated indicates an expected call of GetRecordsPaginated
func (mr *MockDDoSXServiceMockRecorder) GetRecordsPaginated(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRecordsPaginated", reflect.TypeOf((*MockDDoSXService)(nil).GetRecordsPaginated), arg0)
}

// GetSSL mocks base method
func (m *MockDDoSXService) GetSSL(arg0 string) (ddosx.SSL, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSSL", arg0)
	ret0, _ := ret[0].(ddosx.SSL)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSSL indicates an expected call of GetSSL
func (mr *MockDDoSXServiceMockRecorder) GetSSL(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSSL", reflect.TypeOf((*MockDDoSXService)(nil).GetSSL), arg0)
}

// GetSSLContent mocks base method
func (m *MockDDoSXService) GetSSLContent(arg0 string) (ddosx.SSLContent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSSLContent", arg0)
	ret0, _ := ret[0].(ddosx.SSLContent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSSLContent indicates an expected call of GetSSLContent
func (mr *MockDDoSXServiceMockRecorder) GetSSLContent(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSSLContent", reflect.TypeOf((*MockDDoSXService)(nil).GetSSLContent), arg0)
}

// GetSSLPrivateKey mocks base method
func (m *MockDDoSXService) GetSSLPrivateKey(arg0 string) (ddosx.SSLPrivateKey, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSSLPrivateKey", arg0)
	ret0, _ := ret[0].(ddosx.SSLPrivateKey)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSSLPrivateKey indicates an expected call of GetSSLPrivateKey
func (mr *MockDDoSXServiceMockRecorder) GetSSLPrivateKey(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSSLPrivateKey", reflect.TypeOf((*MockDDoSXService)(nil).GetSSLPrivateKey), arg0)
}

// GetSSLs mocks base method
func (m *MockDDoSXService) GetSSLs(arg0 connection.APIRequestParameters) ([]ddosx.SSL, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSSLs", arg0)
	ret0, _ := ret[0].([]ddosx.SSL)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSSLs indicates an expected call of GetSSLs
func (mr *MockDDoSXServiceMockRecorder) GetSSLs(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSSLs", reflect.TypeOf((*MockDDoSXService)(nil).GetSSLs), arg0)
}

// GetSSLsPaginated mocks base method
func (m *MockDDoSXService) GetSSLsPaginated(arg0 connection.APIRequestParameters) ([]ddosx.SSL, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSSLsPaginated", arg0)
	ret0, _ := ret[0].([]ddosx.SSL)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSSLsPaginated indicates an expected call of GetSSLsPaginated
func (mr *MockDDoSXServiceMockRecorder) GetSSLsPaginated(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSSLsPaginated", reflect.TypeOf((*MockDDoSXService)(nil).GetSSLsPaginated), arg0)
}

// PatchDomainACLGeoIPRule mocks base method
func (m *MockDDoSXService) PatchDomainACLGeoIPRule(arg0, arg1 string, arg2 ddosx.PatchACLGeoIPRuleRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PatchDomainACLGeoIPRule", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchDomainACLGeoIPRule indicates an expected call of PatchDomainACLGeoIPRule
func (mr *MockDDoSXServiceMockRecorder) PatchDomainACLGeoIPRule(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchDomainACLGeoIPRule", reflect.TypeOf((*MockDDoSXService)(nil).PatchDomainACLGeoIPRule), arg0, arg1, arg2)
}

// PatchDomainACLGeoIPRulesMode mocks base method
func (m *MockDDoSXService) PatchDomainACLGeoIPRulesMode(arg0 string, arg1 ddosx.PatchACLGeoIPRulesModeRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PatchDomainACLGeoIPRulesMode", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchDomainACLGeoIPRulesMode indicates an expected call of PatchDomainACLGeoIPRulesMode
func (mr *MockDDoSXServiceMockRecorder) PatchDomainACLGeoIPRulesMode(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchDomainACLGeoIPRulesMode", reflect.TypeOf((*MockDDoSXService)(nil).PatchDomainACLGeoIPRulesMode), arg0, arg1)
}

// PatchDomainACLIPRule mocks base method
func (m *MockDDoSXService) PatchDomainACLIPRule(arg0, arg1 string, arg2 ddosx.PatchACLIPRuleRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PatchDomainACLIPRule", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchDomainACLIPRule indicates an expected call of PatchDomainACLIPRule
func (mr *MockDDoSXServiceMockRecorder) PatchDomainACLIPRule(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchDomainACLIPRule", reflect.TypeOf((*MockDDoSXService)(nil).PatchDomainACLIPRule), arg0, arg1, arg2)
}

// PatchDomainCDNRule mocks base method
func (m *MockDDoSXService) PatchDomainCDNRule(arg0, arg1 string, arg2 ddosx.PatchCDNRuleRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PatchDomainCDNRule", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchDomainCDNRule indicates an expected call of PatchDomainCDNRule
func (mr *MockDDoSXServiceMockRecorder) PatchDomainCDNRule(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchDomainCDNRule", reflect.TypeOf((*MockDDoSXService)(nil).PatchDomainCDNRule), arg0, arg1, arg2)
}

// PatchDomainProperty mocks base method
func (m *MockDDoSXService) PatchDomainProperty(arg0, arg1 string, arg2 ddosx.PatchDomainPropertyRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PatchDomainProperty", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchDomainProperty indicates an expected call of PatchDomainProperty
func (mr *MockDDoSXServiceMockRecorder) PatchDomainProperty(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchDomainProperty", reflect.TypeOf((*MockDDoSXService)(nil).PatchDomainProperty), arg0, arg1, arg2)
}

// PatchDomainRecord mocks base method
func (m *MockDDoSXService) PatchDomainRecord(arg0, arg1 string, arg2 ddosx.PatchRecordRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PatchDomainRecord", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchDomainRecord indicates an expected call of PatchDomainRecord
func (mr *MockDDoSXServiceMockRecorder) PatchDomainRecord(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchDomainRecord", reflect.TypeOf((*MockDDoSXService)(nil).PatchDomainRecord), arg0, arg1, arg2)
}

// PatchDomainWAF mocks base method
func (m *MockDDoSXService) PatchDomainWAF(arg0 string, arg1 ddosx.PatchWAFRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PatchDomainWAF", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchDomainWAF indicates an expected call of PatchDomainWAF
func (mr *MockDDoSXServiceMockRecorder) PatchDomainWAF(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchDomainWAF", reflect.TypeOf((*MockDDoSXService)(nil).PatchDomainWAF), arg0, arg1)
}

// PatchDomainWAFAdvancedRule mocks base method
func (m *MockDDoSXService) PatchDomainWAFAdvancedRule(arg0, arg1 string, arg2 ddosx.PatchWAFAdvancedRuleRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PatchDomainWAFAdvancedRule", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchDomainWAFAdvancedRule indicates an expected call of PatchDomainWAFAdvancedRule
func (mr *MockDDoSXServiceMockRecorder) PatchDomainWAFAdvancedRule(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchDomainWAFAdvancedRule", reflect.TypeOf((*MockDDoSXService)(nil).PatchDomainWAFAdvancedRule), arg0, arg1, arg2)
}

// PatchDomainWAFRule mocks base method
func (m *MockDDoSXService) PatchDomainWAFRule(arg0, arg1 string, arg2 ddosx.PatchWAFRuleRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PatchDomainWAFRule", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchDomainWAFRule indicates an expected call of PatchDomainWAFRule
func (mr *MockDDoSXServiceMockRecorder) PatchDomainWAFRule(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchDomainWAFRule", reflect.TypeOf((*MockDDoSXService)(nil).PatchDomainWAFRule), arg0, arg1, arg2)
}

// PatchDomainWAFRuleSet mocks base method
func (m *MockDDoSXService) PatchDomainWAFRuleSet(arg0, arg1 string, arg2 ddosx.PatchWAFRuleSetRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PatchDomainWAFRuleSet", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchDomainWAFRuleSet indicates an expected call of PatchDomainWAFRuleSet
func (mr *MockDDoSXServiceMockRecorder) PatchDomainWAFRuleSet(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchDomainWAFRuleSet", reflect.TypeOf((*MockDDoSXService)(nil).PatchDomainWAFRuleSet), arg0, arg1, arg2)
}

// PatchSSL mocks base method
func (m *MockDDoSXService) PatchSSL(arg0 string, arg1 ddosx.PatchSSLRequest) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PatchSSL", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PatchSSL indicates an expected call of PatchSSL
func (mr *MockDDoSXServiceMockRecorder) PatchSSL(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchSSL", reflect.TypeOf((*MockDDoSXService)(nil).PatchSSL), arg0, arg1)
}
