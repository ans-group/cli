// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/ans-group/sdk-go/pkg/service/ecloud (interfaces: ECloudService)

// Package mocks is a generated GoMock package.
package mocks

import (
	connection "github.com/ans-group/sdk-go/pkg/connection"
	account "github.com/ans-group/sdk-go/pkg/service/account"
	ecloud "github.com/ans-group/sdk-go/pkg/service/ecloud"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockECloudService is a mock of ECloudService interface.
type MockECloudService struct {
	ctrl     *gomock.Controller
	recorder *MockECloudServiceMockRecorder
}

// MockECloudServiceMockRecorder is the mock recorder for MockECloudService.
type MockECloudServiceMockRecorder struct {
	mock *MockECloudService
}

// NewMockECloudService creates a new mock instance.
func NewMockECloudService(ctrl *gomock.Controller) *MockECloudService {
	mock := &MockECloudService{ctrl: ctrl}
	mock.recorder = &MockECloudServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockECloudService) EXPECT() *MockECloudServiceMockRecorder {
	return m.recorder
}

// AssignFloatingIP mocks base method.
func (m *MockECloudService) AssignFloatingIP(arg0 string, arg1 ecloud.AssignFloatingIPRequest) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AssignFloatingIP", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AssignFloatingIP indicates an expected call of AssignFloatingIP.
func (mr *MockECloudServiceMockRecorder) AssignFloatingIP(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AssignFloatingIP", reflect.TypeOf((*MockECloudService)(nil).AssignFloatingIP), arg0, arg1)
}

// AssignNICIPAddress mocks base method.
func (m *MockECloudService) AssignNICIPAddress(arg0 string, arg1 ecloud.AssignIPAddressRequest) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AssignNICIPAddress", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AssignNICIPAddress indicates an expected call of AssignNICIPAddress.
func (mr *MockECloudServiceMockRecorder) AssignNICIPAddress(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AssignNICIPAddress", reflect.TypeOf((*MockECloudService)(nil).AssignNICIPAddress), arg0, arg1)
}

// AttachInstanceVolume mocks base method.
func (m *MockECloudService) AttachInstanceVolume(arg0 string, arg1 ecloud.AttachDetachInstanceVolumeRequest) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AttachInstanceVolume", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AttachInstanceVolume indicates an expected call of AttachInstanceVolume.
func (mr *MockECloudServiceMockRecorder) AttachInstanceVolume(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AttachInstanceVolume", reflect.TypeOf((*MockECloudService)(nil).AttachInstanceVolume), arg0, arg1)
}

// CloneVirtualMachine mocks base method.
func (m *MockECloudService) CloneVirtualMachine(arg0 int, arg1 ecloud.CloneVirtualMachineRequest) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloneVirtualMachine", arg0, arg1)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CloneVirtualMachine indicates an expected call of CloneVirtualMachine.
func (mr *MockECloudServiceMockRecorder) CloneVirtualMachine(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloneVirtualMachine", reflect.TypeOf((*MockECloudService)(nil).CloneVirtualMachine), arg0, arg1)
}

// CreateAffinityRule mocks base method.
func (m *MockECloudService) CreateAffinityRule(arg0 ecloud.CreateAffinityRuleRequest) (ecloud.TaskReference, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAffinityRule", arg0)
	ret0, _ := ret[0].(ecloud.TaskReference)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAffinityRule indicates an expected call of CreateAffinityRule.
func (mr *MockECloudServiceMockRecorder) CreateAffinityRule(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAffinityRule", reflect.TypeOf((*MockECloudService)(nil).CreateAffinityRule), arg0)
}

// CreateAffinityRuleMember mocks base method.
func (m *MockECloudService) CreateAffinityRuleMember(arg0 ecloud.CreateAffinityRuleMemberRequest) (ecloud.TaskReference, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAffinityRuleMember", arg0)
	ret0, _ := ret[0].(ecloud.TaskReference)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAffinityRuleMember indicates an expected call of CreateAffinityRuleMember.
func (mr *MockECloudServiceMockRecorder) CreateAffinityRuleMember(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAffinityRuleMember", reflect.TypeOf((*MockECloudService)(nil).CreateAffinityRuleMember), arg0)
}

// CreateBackupGateway mocks base method.
func (m *MockECloudService) CreateBackupGateway(arg0 ecloud.CreateBackupGatewayRequest) (ecloud.TaskReference, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateBackupGateway", arg0)
	ret0, _ := ret[0].(ecloud.TaskReference)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateBackupGateway indicates an expected call of CreateBackupGateway.
func (mr *MockECloudServiceMockRecorder) CreateBackupGateway(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateBackupGateway", reflect.TypeOf((*MockECloudService)(nil).CreateBackupGateway), arg0)
}

// CreateFirewallPolicy mocks base method.
func (m *MockECloudService) CreateFirewallPolicy(arg0 ecloud.CreateFirewallPolicyRequest) (ecloud.TaskReference, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateFirewallPolicy", arg0)
	ret0, _ := ret[0].(ecloud.TaskReference)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateFirewallPolicy indicates an expected call of CreateFirewallPolicy.
func (mr *MockECloudServiceMockRecorder) CreateFirewallPolicy(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateFirewallPolicy", reflect.TypeOf((*MockECloudService)(nil).CreateFirewallPolicy), arg0)
}

// CreateFirewallRule mocks base method.
func (m *MockECloudService) CreateFirewallRule(arg0 ecloud.CreateFirewallRuleRequest) (ecloud.TaskReference, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateFirewallRule", arg0)
	ret0, _ := ret[0].(ecloud.TaskReference)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateFirewallRule indicates an expected call of CreateFirewallRule.
func (mr *MockECloudServiceMockRecorder) CreateFirewallRule(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateFirewallRule", reflect.TypeOf((*MockECloudService)(nil).CreateFirewallRule), arg0)
}

// CreateFirewallRulePort mocks base method.
func (m *MockECloudService) CreateFirewallRulePort(arg0 ecloud.CreateFirewallRulePortRequest) (ecloud.TaskReference, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateFirewallRulePort", arg0)
	ret0, _ := ret[0].(ecloud.TaskReference)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateFirewallRulePort indicates an expected call of CreateFirewallRulePort.
func (mr *MockECloudServiceMockRecorder) CreateFirewallRulePort(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateFirewallRulePort", reflect.TypeOf((*MockECloudService)(nil).CreateFirewallRulePort), arg0)
}

// CreateFloatingIP mocks base method.
func (m *MockECloudService) CreateFloatingIP(arg0 ecloud.CreateFloatingIPRequest) (ecloud.TaskReference, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateFloatingIP", arg0)
	ret0, _ := ret[0].(ecloud.TaskReference)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateFloatingIP indicates an expected call of CreateFloatingIP.
func (mr *MockECloudServiceMockRecorder) CreateFloatingIP(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateFloatingIP", reflect.TypeOf((*MockECloudService)(nil).CreateFloatingIP), arg0)
}

// CreateHost mocks base method.
func (m *MockECloudService) CreateHost(arg0 ecloud.CreateHostRequest) (ecloud.TaskReference, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateHost", arg0)
	ret0, _ := ret[0].(ecloud.TaskReference)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateHost indicates an expected call of CreateHost.
func (mr *MockECloudServiceMockRecorder) CreateHost(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateHost", reflect.TypeOf((*MockECloudService)(nil).CreateHost), arg0)
}

// CreateHostGroup mocks base method.
func (m *MockECloudService) CreateHostGroup(arg0 ecloud.CreateHostGroupRequest) (ecloud.TaskReference, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateHostGroup", arg0)
	ret0, _ := ret[0].(ecloud.TaskReference)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateHostGroup indicates an expected call of CreateHostGroup.
func (mr *MockECloudServiceMockRecorder) CreateHostGroup(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateHostGroup", reflect.TypeOf((*MockECloudService)(nil).CreateHostGroup), arg0)
}

// CreateIPAddress mocks base method.
func (m *MockECloudService) CreateIPAddress(arg0 ecloud.CreateIPAddressRequest) (ecloud.TaskReference, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateIPAddress", arg0)
	ret0, _ := ret[0].(ecloud.TaskReference)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateIPAddress indicates an expected call of CreateIPAddress.
func (mr *MockECloudServiceMockRecorder) CreateIPAddress(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateIPAddress", reflect.TypeOf((*MockECloudService)(nil).CreateIPAddress), arg0)
}

// CreateInstance mocks base method.
func (m *MockECloudService) CreateInstance(arg0 ecloud.CreateInstanceRequest) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateInstance", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateInstance indicates an expected call of CreateInstance.
func (mr *MockECloudServiceMockRecorder) CreateInstance(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateInstance", reflect.TypeOf((*MockECloudService)(nil).CreateInstance), arg0)
}

// CreateInstanceConsoleSession mocks base method.
func (m *MockECloudService) CreateInstanceConsoleSession(arg0 string) (ecloud.ConsoleSession, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateInstanceConsoleSession", arg0)
	ret0, _ := ret[0].(ecloud.ConsoleSession)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateInstanceConsoleSession indicates an expected call of CreateInstanceConsoleSession.
func (mr *MockECloudServiceMockRecorder) CreateInstanceConsoleSession(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateInstanceConsoleSession", reflect.TypeOf((*MockECloudService)(nil).CreateInstanceConsoleSession), arg0)
}

// CreateInstanceImage mocks base method.
func (m *MockECloudService) CreateInstanceImage(arg0 string, arg1 ecloud.CreateInstanceImageRequest) (ecloud.TaskReference, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateInstanceImage", arg0, arg1)
	ret0, _ := ret[0].(ecloud.TaskReference)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateInstanceImage indicates an expected call of CreateInstanceImage.
func (mr *MockECloudServiceMockRecorder) CreateInstanceImage(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateInstanceImage", reflect.TypeOf((*MockECloudService)(nil).CreateInstanceImage), arg0, arg1)
}

// CreateLoadBalancer mocks base method.
func (m *MockECloudService) CreateLoadBalancer(arg0 ecloud.CreateLoadBalancerRequest) (ecloud.TaskReference, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateLoadBalancer", arg0)
	ret0, _ := ret[0].(ecloud.TaskReference)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateLoadBalancer indicates an expected call of CreateLoadBalancer.
func (mr *MockECloudServiceMockRecorder) CreateLoadBalancer(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateLoadBalancer", reflect.TypeOf((*MockECloudService)(nil).CreateLoadBalancer), arg0)
}

// CreateMonitoringGateway mocks base method.
func (m *MockECloudService) CreateMonitoringGateway(arg0 ecloud.CreateMonitoringGatewayRequest) (ecloud.TaskReference, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateMonitoringGateway", arg0)
	ret0, _ := ret[0].(ecloud.TaskReference)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateMonitoringGateway indicates an expected call of CreateMonitoringGateway.
func (mr *MockECloudServiceMockRecorder) CreateMonitoringGateway(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateMonitoringGateway", reflect.TypeOf((*MockECloudService)(nil).CreateMonitoringGateway), arg0)
}

// CreateNATOverloadRule mocks base method.
func (m *MockECloudService) CreateNATOverloadRule(arg0 ecloud.CreateNATOverloadRuleRequest) (ecloud.TaskReference, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateNATOverloadRule", arg0)
	ret0, _ := ret[0].(ecloud.TaskReference)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateNATOverloadRule indicates an expected call of CreateNATOverloadRule.
func (mr *MockECloudServiceMockRecorder) CreateNATOverloadRule(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateNATOverloadRule", reflect.TypeOf((*MockECloudService)(nil).CreateNATOverloadRule), arg0)
}

// CreateNIC mocks base method.
func (m *MockECloudService) CreateNIC(arg0 ecloud.CreateNICRequest) (ecloud.TaskReference, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateNIC", arg0)
	ret0, _ := ret[0].(ecloud.TaskReference)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateNIC indicates an expected call of CreateNIC.
func (mr *MockECloudServiceMockRecorder) CreateNIC(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateNIC", reflect.TypeOf((*MockECloudService)(nil).CreateNIC), arg0)
}

// CreateNetwork mocks base method.
func (m *MockECloudService) CreateNetwork(arg0 ecloud.CreateNetworkRequest) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateNetwork", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateNetwork indicates an expected call of CreateNetwork.
func (mr *MockECloudServiceMockRecorder) CreateNetwork(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateNetwork", reflect.TypeOf((*MockECloudService)(nil).CreateNetwork), arg0)
}

// CreateNetworkPolicy mocks base method.
func (m *MockECloudService) CreateNetworkPolicy(arg0 ecloud.CreateNetworkPolicyRequest) (ecloud.TaskReference, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateNetworkPolicy", arg0)
	ret0, _ := ret[0].(ecloud.TaskReference)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateNetworkPolicy indicates an expected call of CreateNetworkPolicy.
func (mr *MockECloudServiceMockRecorder) CreateNetworkPolicy(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateNetworkPolicy", reflect.TypeOf((*MockECloudService)(nil).CreateNetworkPolicy), arg0)
}

// CreateNetworkRule mocks base method.
func (m *MockECloudService) CreateNetworkRule(arg0 ecloud.CreateNetworkRuleRequest) (ecloud.TaskReference, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateNetworkRule", arg0)
	ret0, _ := ret[0].(ecloud.TaskReference)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateNetworkRule indicates an expected call of CreateNetworkRule.
func (mr *MockECloudServiceMockRecorder) CreateNetworkRule(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateNetworkRule", reflect.TypeOf((*MockECloudService)(nil).CreateNetworkRule), arg0)
}

// CreateNetworkRulePort mocks base method.
func (m *MockECloudService) CreateNetworkRulePort(arg0 ecloud.CreateNetworkRulePortRequest) (ecloud.TaskReference, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateNetworkRulePort", arg0)
	ret0, _ := ret[0].(ecloud.TaskReference)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateNetworkRulePort indicates an expected call of CreateNetworkRulePort.
func (mr *MockECloudServiceMockRecorder) CreateNetworkRulePort(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateNetworkRulePort", reflect.TypeOf((*MockECloudService)(nil).CreateNetworkRulePort), arg0)
}

// CreateRouter mocks base method.
func (m *MockECloudService) CreateRouter(arg0 ecloud.CreateRouterRequest) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRouter", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateRouter indicates an expected call of CreateRouter.
func (mr *MockECloudServiceMockRecorder) CreateRouter(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRouter", reflect.TypeOf((*MockECloudService)(nil).CreateRouter), arg0)
}

// CreateSSHKeyPair mocks base method.
func (m *MockECloudService) CreateSSHKeyPair(arg0 ecloud.CreateSSHKeyPairRequest) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSSHKeyPair", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSSHKeyPair indicates an expected call of CreateSSHKeyPair.
func (mr *MockECloudServiceMockRecorder) CreateSSHKeyPair(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSSHKeyPair", reflect.TypeOf((*MockECloudService)(nil).CreateSSHKeyPair), arg0)
}

// CreateSolutionTag mocks base method.
func (m *MockECloudService) CreateSolutionTag(arg0 int, arg1 ecloud.CreateTagV1Request) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSolutionTag", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateSolutionTag indicates an expected call of CreateSolutionTag.
func (mr *MockECloudServiceMockRecorder) CreateSolutionTag(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSolutionTag", reflect.TypeOf((*MockECloudService)(nil).CreateSolutionTag), arg0, arg1)
}

// CreateTag mocks base method.
func (m *MockECloudService) CreateTag(arg0 ecloud.CreateTagRequest) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTag", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTag indicates an expected call of CreateTag.
func (mr *MockECloudServiceMockRecorder) CreateTag(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTag", reflect.TypeOf((*MockECloudService)(nil).CreateTag), arg0)
}

// CreateVIP mocks base method.
func (m *MockECloudService) CreateVIP(arg0 ecloud.CreateVIPRequest) (ecloud.TaskReference, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateVIP", arg0)
	ret0, _ := ret[0].(ecloud.TaskReference)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateVIP indicates an expected call of CreateVIP.
func (mr *MockECloudServiceMockRecorder) CreateVIP(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateVIP", reflect.TypeOf((*MockECloudService)(nil).CreateVIP), arg0)
}

// CreateVPC mocks base method.
func (m *MockECloudService) CreateVPC(arg0 ecloud.CreateVPCRequest) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateVPC", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateVPC indicates an expected call of CreateVPC.
func (mr *MockECloudServiceMockRecorder) CreateVPC(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateVPC", reflect.TypeOf((*MockECloudService)(nil).CreateVPC), arg0)
}

// CreateVPNEndpoint mocks base method.
func (m *MockECloudService) CreateVPNEndpoint(arg0 ecloud.CreateVPNEndpointRequest) (ecloud.TaskReference, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateVPNEndpoint", arg0)
	ret0, _ := ret[0].(ecloud.TaskReference)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateVPNEndpoint indicates an expected call of CreateVPNEndpoint.
func (mr *MockECloudServiceMockRecorder) CreateVPNEndpoint(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateVPNEndpoint", reflect.TypeOf((*MockECloudService)(nil).CreateVPNEndpoint), arg0)
}

// CreateVPNGateway mocks base method.
func (m *MockECloudService) CreateVPNGateway(arg0 ecloud.CreateVPNGatewayRequest) (ecloud.TaskReference, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateVPNGateway", arg0)
	ret0, _ := ret[0].(ecloud.TaskReference)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateVPNGateway indicates an expected call of CreateVPNGateway.
func (mr *MockECloudServiceMockRecorder) CreateVPNGateway(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateVPNGateway", reflect.TypeOf((*MockECloudService)(nil).CreateVPNGateway), arg0)
}

// CreateVPNGatewayUser mocks base method.
func (m *MockECloudService) CreateVPNGatewayUser(arg0 ecloud.CreateVPNGatewayUserRequest) (ecloud.TaskReference, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateVPNGatewayUser", arg0)
	ret0, _ := ret[0].(ecloud.TaskReference)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateVPNGatewayUser indicates an expected call of CreateVPNGatewayUser.
func (mr *MockECloudServiceMockRecorder) CreateVPNGatewayUser(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateVPNGatewayUser", reflect.TypeOf((*MockECloudService)(nil).CreateVPNGatewayUser), arg0)
}

// CreateVPNService mocks base method.
func (m *MockECloudService) CreateVPNService(arg0 ecloud.CreateVPNServiceRequest) (ecloud.TaskReference, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateVPNService", arg0)
	ret0, _ := ret[0].(ecloud.TaskReference)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateVPNService indicates an expected call of CreateVPNService.
func (mr *MockECloudServiceMockRecorder) CreateVPNService(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateVPNService", reflect.TypeOf((*MockECloudService)(nil).CreateVPNService), arg0)
}

// CreateVPNSession mocks base method.
func (m *MockECloudService) CreateVPNSession(arg0 ecloud.CreateVPNSessionRequest) (ecloud.TaskReference, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateVPNSession", arg0)
	ret0, _ := ret[0].(ecloud.TaskReference)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateVPNSession indicates an expected call of CreateVPNSession.
func (mr *MockECloudServiceMockRecorder) CreateVPNSession(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateVPNSession", reflect.TypeOf((*MockECloudService)(nil).CreateVPNSession), arg0)
}

// CreateVirtualMachine mocks base method.
func (m *MockECloudService) CreateVirtualMachine(arg0 ecloud.CreateVirtualMachineRequest) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateVirtualMachine", arg0)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateVirtualMachine indicates an expected call of CreateVirtualMachine.
func (mr *MockECloudServiceMockRecorder) CreateVirtualMachine(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateVirtualMachine", reflect.TypeOf((*MockECloudService)(nil).CreateVirtualMachine), arg0)
}

// CreateVirtualMachineConsoleSession mocks base method.
func (m *MockECloudService) CreateVirtualMachineConsoleSession(arg0 int) (ecloud.ConsoleSession, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateVirtualMachineConsoleSession", arg0)
	ret0, _ := ret[0].(ecloud.ConsoleSession)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateVirtualMachineConsoleSession indicates an expected call of CreateVirtualMachineConsoleSession.
func (mr *MockECloudServiceMockRecorder) CreateVirtualMachineConsoleSession(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateVirtualMachineConsoleSession", reflect.TypeOf((*MockECloudService)(nil).CreateVirtualMachineConsoleSession), arg0)
}

// CreateVirtualMachineTag mocks base method.
func (m *MockECloudService) CreateVirtualMachineTag(arg0 int, arg1 ecloud.CreateTagV1Request) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateVirtualMachineTag", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateVirtualMachineTag indicates an expected call of CreateVirtualMachineTag.
func (mr *MockECloudServiceMockRecorder) CreateVirtualMachineTag(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateVirtualMachineTag", reflect.TypeOf((*MockECloudService)(nil).CreateVirtualMachineTag), arg0, arg1)
}

// CreateVirtualMachineTemplate mocks base method.
func (m *MockECloudService) CreateVirtualMachineTemplate(arg0 int, arg1 ecloud.CreateVirtualMachineTemplateRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateVirtualMachineTemplate", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateVirtualMachineTemplate indicates an expected call of CreateVirtualMachineTemplate.
func (mr *MockECloudServiceMockRecorder) CreateVirtualMachineTemplate(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateVirtualMachineTemplate", reflect.TypeOf((*MockECloudService)(nil).CreateVirtualMachineTemplate), arg0, arg1)
}

// CreateVolume mocks base method.
func (m *MockECloudService) CreateVolume(arg0 ecloud.CreateVolumeRequest) (ecloud.TaskReference, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateVolume", arg0)
	ret0, _ := ret[0].(ecloud.TaskReference)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateVolume indicates an expected call of CreateVolume.
func (mr *MockECloudServiceMockRecorder) CreateVolume(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateVolume", reflect.TypeOf((*MockECloudService)(nil).CreateVolume), arg0)
}

// CreateVolumeGroup mocks base method.
func (m *MockECloudService) CreateVolumeGroup(arg0 ecloud.CreateVolumeGroupRequest) (ecloud.TaskReference, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateVolumeGroup", arg0)
	ret0, _ := ret[0].(ecloud.TaskReference)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateVolumeGroup indicates an expected call of CreateVolumeGroup.
func (mr *MockECloudServiceMockRecorder) CreateVolumeGroup(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateVolumeGroup", reflect.TypeOf((*MockECloudService)(nil).CreateVolumeGroup), arg0)
}

// DecryptInstance mocks base method.
func (m *MockECloudService) DecryptInstance(arg0 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DecryptInstance", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DecryptInstance indicates an expected call of DecryptInstance.
func (mr *MockECloudServiceMockRecorder) DecryptInstance(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DecryptInstance", reflect.TypeOf((*MockECloudService)(nil).DecryptInstance), arg0)
}

// DeleteAffinityRule mocks base method.
func (m *MockECloudService) DeleteAffinityRule(arg0 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAffinityRule", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteAffinityRule indicates an expected call of DeleteAffinityRule.
func (mr *MockECloudServiceMockRecorder) DeleteAffinityRule(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAffinityRule", reflect.TypeOf((*MockECloudService)(nil).DeleteAffinityRule), arg0)
}

// DeleteAffinityRuleMember mocks base method.
func (m *MockECloudService) DeleteAffinityRuleMember(arg0 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAffinityRuleMember", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteAffinityRuleMember indicates an expected call of DeleteAffinityRuleMember.
func (mr *MockECloudServiceMockRecorder) DeleteAffinityRuleMember(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAffinityRuleMember", reflect.TypeOf((*MockECloudService)(nil).DeleteAffinityRuleMember), arg0)
}

// DeleteBackupGateway mocks base method.
func (m *MockECloudService) DeleteBackupGateway(arg0 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteBackupGateway", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteBackupGateway indicates an expected call of DeleteBackupGateway.
func (mr *MockECloudServiceMockRecorder) DeleteBackupGateway(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteBackupGateway", reflect.TypeOf((*MockECloudService)(nil).DeleteBackupGateway), arg0)
}

// DeleteFirewallPolicy mocks base method.
func (m *MockECloudService) DeleteFirewallPolicy(arg0 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteFirewallPolicy", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteFirewallPolicy indicates an expected call of DeleteFirewallPolicy.
func (mr *MockECloudServiceMockRecorder) DeleteFirewallPolicy(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFirewallPolicy", reflect.TypeOf((*MockECloudService)(nil).DeleteFirewallPolicy), arg0)
}

// DeleteFirewallRule mocks base method.
func (m *MockECloudService) DeleteFirewallRule(arg0 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteFirewallRule", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteFirewallRule indicates an expected call of DeleteFirewallRule.
func (mr *MockECloudServiceMockRecorder) DeleteFirewallRule(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFirewallRule", reflect.TypeOf((*MockECloudService)(nil).DeleteFirewallRule), arg0)
}

// DeleteFirewallRulePort mocks base method.
func (m *MockECloudService) DeleteFirewallRulePort(arg0 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteFirewallRulePort", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteFirewallRulePort indicates an expected call of DeleteFirewallRulePort.
func (mr *MockECloudServiceMockRecorder) DeleteFirewallRulePort(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFirewallRulePort", reflect.TypeOf((*MockECloudService)(nil).DeleteFirewallRulePort), arg0)
}

// DeleteFloatingIP mocks base method.
func (m *MockECloudService) DeleteFloatingIP(arg0 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteFloatingIP", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteFloatingIP indicates an expected call of DeleteFloatingIP.
func (mr *MockECloudServiceMockRecorder) DeleteFloatingIP(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFloatingIP", reflect.TypeOf((*MockECloudService)(nil).DeleteFloatingIP), arg0)
}

// DeleteHost mocks base method.
func (m *MockECloudService) DeleteHost(arg0 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteHost", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteHost indicates an expected call of DeleteHost.
func (mr *MockECloudServiceMockRecorder) DeleteHost(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteHost", reflect.TypeOf((*MockECloudService)(nil).DeleteHost), arg0)
}

// DeleteHostGroup mocks base method.
func (m *MockECloudService) DeleteHostGroup(arg0 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteHostGroup", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteHostGroup indicates an expected call of DeleteHostGroup.
func (mr *MockECloudServiceMockRecorder) DeleteHostGroup(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteHostGroup", reflect.TypeOf((*MockECloudService)(nil).DeleteHostGroup), arg0)
}

// DeleteIPAddress mocks base method.
func (m *MockECloudService) DeleteIPAddress(arg0 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteIPAddress", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteIPAddress indicates an expected call of DeleteIPAddress.
func (mr *MockECloudServiceMockRecorder) DeleteIPAddress(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteIPAddress", reflect.TypeOf((*MockECloudService)(nil).DeleteIPAddress), arg0)
}

// DeleteImage mocks base method.
func (m *MockECloudService) DeleteImage(arg0 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteImage", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteImage indicates an expected call of DeleteImage.
func (mr *MockECloudServiceMockRecorder) DeleteImage(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteImage", reflect.TypeOf((*MockECloudService)(nil).DeleteImage), arg0)
}

// DeleteInstance mocks base method.
func (m *MockECloudService) DeleteInstance(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteInstance", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteInstance indicates an expected call of DeleteInstance.
func (mr *MockECloudServiceMockRecorder) DeleteInstance(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteInstance", reflect.TypeOf((*MockECloudService)(nil).DeleteInstance), arg0)
}

// DeleteLoadBalancer mocks base method.
func (m *MockECloudService) DeleteLoadBalancer(arg0 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteLoadBalancer", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteLoadBalancer indicates an expected call of DeleteLoadBalancer.
func (mr *MockECloudServiceMockRecorder) DeleteLoadBalancer(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteLoadBalancer", reflect.TypeOf((*MockECloudService)(nil).DeleteLoadBalancer), arg0)
}

// DeleteMonitoringGateway mocks base method.
func (m *MockECloudService) DeleteMonitoringGateway(arg0 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteMonitoringGateway", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteMonitoringGateway indicates an expected call of DeleteMonitoringGateway.
func (mr *MockECloudServiceMockRecorder) DeleteMonitoringGateway(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteMonitoringGateway", reflect.TypeOf((*MockECloudService)(nil).DeleteMonitoringGateway), arg0)
}

// DeleteNATOverloadRule mocks base method.
func (m *MockECloudService) DeleteNATOverloadRule(arg0 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteNATOverloadRule", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteNATOverloadRule indicates an expected call of DeleteNATOverloadRule.
func (mr *MockECloudServiceMockRecorder) DeleteNATOverloadRule(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteNATOverloadRule", reflect.TypeOf((*MockECloudService)(nil).DeleteNATOverloadRule), arg0)
}

// DeleteNIC mocks base method.
func (m *MockECloudService) DeleteNIC(arg0 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteNIC", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteNIC indicates an expected call of DeleteNIC.
func (mr *MockECloudServiceMockRecorder) DeleteNIC(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteNIC", reflect.TypeOf((*MockECloudService)(nil).DeleteNIC), arg0)
}

// DeleteNetwork mocks base method.
func (m *MockECloudService) DeleteNetwork(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteNetwork", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteNetwork indicates an expected call of DeleteNetwork.
func (mr *MockECloudServiceMockRecorder) DeleteNetwork(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteNetwork", reflect.TypeOf((*MockECloudService)(nil).DeleteNetwork), arg0)
}

// DeleteNetworkPolicy mocks base method.
func (m *MockECloudService) DeleteNetworkPolicy(arg0 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteNetworkPolicy", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteNetworkPolicy indicates an expected call of DeleteNetworkPolicy.
func (mr *MockECloudServiceMockRecorder) DeleteNetworkPolicy(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteNetworkPolicy", reflect.TypeOf((*MockECloudService)(nil).DeleteNetworkPolicy), arg0)
}

// DeleteNetworkRule mocks base method.
func (m *MockECloudService) DeleteNetworkRule(arg0 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteNetworkRule", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteNetworkRule indicates an expected call of DeleteNetworkRule.
func (mr *MockECloudServiceMockRecorder) DeleteNetworkRule(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteNetworkRule", reflect.TypeOf((*MockECloudService)(nil).DeleteNetworkRule), arg0)
}

// DeleteNetworkRulePort mocks base method.
func (m *MockECloudService) DeleteNetworkRulePort(arg0 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteNetworkRulePort", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteNetworkRulePort indicates an expected call of DeleteNetworkRulePort.
func (mr *MockECloudServiceMockRecorder) DeleteNetworkRulePort(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteNetworkRulePort", reflect.TypeOf((*MockECloudService)(nil).DeleteNetworkRulePort), arg0)
}

// DeletePodTemplate mocks base method.
func (m *MockECloudService) DeletePodTemplate(arg0 int, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePodTemplate", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeletePodTemplate indicates an expected call of DeletePodTemplate.
func (mr *MockECloudServiceMockRecorder) DeletePodTemplate(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePodTemplate", reflect.TypeOf((*MockECloudService)(nil).DeletePodTemplate), arg0, arg1)
}

// DeleteRouter mocks base method.
func (m *MockECloudService) DeleteRouter(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRouter", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteRouter indicates an expected call of DeleteRouter.
func (mr *MockECloudServiceMockRecorder) DeleteRouter(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRouter", reflect.TypeOf((*MockECloudService)(nil).DeleteRouter), arg0)
}

// DeleteSSHKeyPair mocks base method.
func (m *MockECloudService) DeleteSSHKeyPair(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSSHKeyPair", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteSSHKeyPair indicates an expected call of DeleteSSHKeyPair.
func (mr *MockECloudServiceMockRecorder) DeleteSSHKeyPair(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSSHKeyPair", reflect.TypeOf((*MockECloudService)(nil).DeleteSSHKeyPair), arg0)
}

// DeleteSolutionTag mocks base method.
func (m *MockECloudService) DeleteSolutionTag(arg0 int, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSolutionTag", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteSolutionTag indicates an expected call of DeleteSolutionTag.
func (mr *MockECloudServiceMockRecorder) DeleteSolutionTag(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSolutionTag", reflect.TypeOf((*MockECloudService)(nil).DeleteSolutionTag), arg0, arg1)
}

// DeleteSolutionTemplate mocks base method.
func (m *MockECloudService) DeleteSolutionTemplate(arg0 int, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSolutionTemplate", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteSolutionTemplate indicates an expected call of DeleteSolutionTemplate.
func (mr *MockECloudServiceMockRecorder) DeleteSolutionTemplate(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSolutionTemplate", reflect.TypeOf((*MockECloudService)(nil).DeleteSolutionTemplate), arg0, arg1)
}

// DeleteTag mocks base method.
func (m *MockECloudService) DeleteTag(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTag", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteTag indicates an expected call of DeleteTag.
func (mr *MockECloudServiceMockRecorder) DeleteTag(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTag", reflect.TypeOf((*MockECloudService)(nil).DeleteTag), arg0)
}

// DeleteVIP mocks base method.
func (m *MockECloudService) DeleteVIP(arg0 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteVIP", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteVIP indicates an expected call of DeleteVIP.
func (mr *MockECloudServiceMockRecorder) DeleteVIP(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteVIP", reflect.TypeOf((*MockECloudService)(nil).DeleteVIP), arg0)
}

// DeleteVPC mocks base method.
func (m *MockECloudService) DeleteVPC(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteVPC", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteVPC indicates an expected call of DeleteVPC.
func (mr *MockECloudServiceMockRecorder) DeleteVPC(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteVPC", reflect.TypeOf((*MockECloudService)(nil).DeleteVPC), arg0)
}

// DeleteVPNEndpoint mocks base method.
func (m *MockECloudService) DeleteVPNEndpoint(arg0 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteVPNEndpoint", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteVPNEndpoint indicates an expected call of DeleteVPNEndpoint.
func (mr *MockECloudServiceMockRecorder) DeleteVPNEndpoint(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteVPNEndpoint", reflect.TypeOf((*MockECloudService)(nil).DeleteVPNEndpoint), arg0)
}

// DeleteVPNGateway mocks base method.
func (m *MockECloudService) DeleteVPNGateway(arg0 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteVPNGateway", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteVPNGateway indicates an expected call of DeleteVPNGateway.
func (mr *MockECloudServiceMockRecorder) DeleteVPNGateway(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteVPNGateway", reflect.TypeOf((*MockECloudService)(nil).DeleteVPNGateway), arg0)
}

// DeleteVPNGatewayUser mocks base method.
func (m *MockECloudService) DeleteVPNGatewayUser(arg0 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteVPNGatewayUser", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteVPNGatewayUser indicates an expected call of DeleteVPNGatewayUser.
func (mr *MockECloudServiceMockRecorder) DeleteVPNGatewayUser(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteVPNGatewayUser", reflect.TypeOf((*MockECloudService)(nil).DeleteVPNGatewayUser), arg0)
}

// DeleteVPNService mocks base method.
func (m *MockECloudService) DeleteVPNService(arg0 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteVPNService", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteVPNService indicates an expected call of DeleteVPNService.
func (mr *MockECloudServiceMockRecorder) DeleteVPNService(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteVPNService", reflect.TypeOf((*MockECloudService)(nil).DeleteVPNService), arg0)
}

// DeleteVPNSession mocks base method.
func (m *MockECloudService) DeleteVPNSession(arg0 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteVPNSession", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteVPNSession indicates an expected call of DeleteVPNSession.
func (mr *MockECloudServiceMockRecorder) DeleteVPNSession(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteVPNSession", reflect.TypeOf((*MockECloudService)(nil).DeleteVPNSession), arg0)
}

// DeleteVirtualMachine mocks base method.
func (m *MockECloudService) DeleteVirtualMachine(arg0 int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteVirtualMachine", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteVirtualMachine indicates an expected call of DeleteVirtualMachine.
func (mr *MockECloudServiceMockRecorder) DeleteVirtualMachine(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteVirtualMachine", reflect.TypeOf((*MockECloudService)(nil).DeleteVirtualMachine), arg0)
}

// DeleteVirtualMachineTag mocks base method.
func (m *MockECloudService) DeleteVirtualMachineTag(arg0 int, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteVirtualMachineTag", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteVirtualMachineTag indicates an expected call of DeleteVirtualMachineTag.
func (mr *MockECloudServiceMockRecorder) DeleteVirtualMachineTag(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteVirtualMachineTag", reflect.TypeOf((*MockECloudService)(nil).DeleteVirtualMachineTag), arg0, arg1)
}

// DeleteVolume mocks base method.
func (m *MockECloudService) DeleteVolume(arg0 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteVolume", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteVolume indicates an expected call of DeleteVolume.
func (mr *MockECloudServiceMockRecorder) DeleteVolume(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteVolume", reflect.TypeOf((*MockECloudService)(nil).DeleteVolume), arg0)
}

// DeleteVolumeGroup mocks base method.
func (m *MockECloudService) DeleteVolumeGroup(arg0 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteVolumeGroup", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteVolumeGroup indicates an expected call of DeleteVolumeGroup.
func (mr *MockECloudServiceMockRecorder) DeleteVolumeGroup(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteVolumeGroup", reflect.TypeOf((*MockECloudService)(nil).DeleteVolumeGroup), arg0)
}

// DeployRouterDefaultFirewallPolicies mocks base method.
func (m *MockECloudService) DeployRouterDefaultFirewallPolicies(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeployRouterDefaultFirewallPolicies", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeployRouterDefaultFirewallPolicies indicates an expected call of DeployRouterDefaultFirewallPolicies.
func (mr *MockECloudServiceMockRecorder) DeployRouterDefaultFirewallPolicies(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeployRouterDefaultFirewallPolicies", reflect.TypeOf((*MockECloudService)(nil).DeployRouterDefaultFirewallPolicies), arg0)
}

// DeployVPCDefaults mocks base method.
func (m *MockECloudService) DeployVPCDefaults(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeployVPCDefaults", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeployVPCDefaults indicates an expected call of DeployVPCDefaults.
func (mr *MockECloudServiceMockRecorder) DeployVPCDefaults(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeployVPCDefaults", reflect.TypeOf((*MockECloudService)(nil).DeployVPCDefaults), arg0)
}

// DetachInstanceVolume mocks base method.
func (m *MockECloudService) DetachInstanceVolume(arg0 string, arg1 ecloud.AttachDetachInstanceVolumeRequest) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DetachInstanceVolume", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DetachInstanceVolume indicates an expected call of DetachInstanceVolume.
func (mr *MockECloudServiceMockRecorder) DetachInstanceVolume(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DetachInstanceVolume", reflect.TypeOf((*MockECloudService)(nil).DetachInstanceVolume), arg0, arg1)
}

// EncryptInstance mocks base method.
func (m *MockECloudService) EncryptInstance(arg0 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EncryptInstance", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EncryptInstance indicates an expected call of EncryptInstance.
func (mr *MockECloudServiceMockRecorder) EncryptInstance(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EncryptInstance", reflect.TypeOf((*MockECloudService)(nil).EncryptInstance), arg0)
}

// ExecuteInstanceScript mocks base method.
func (m *MockECloudService) ExecuteInstanceScript(arg0 string, arg1 ecloud.ExecuteInstanceScriptRequest) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExecuteInstanceScript", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExecuteInstanceScript indicates an expected call of ExecuteInstanceScript.
func (mr *MockECloudServiceMockRecorder) ExecuteInstanceScript(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecuteInstanceScript", reflect.TypeOf((*MockECloudService)(nil).ExecuteInstanceScript), arg0, arg1)
}

// GetActiveDirectoryDomain mocks base method.
func (m *MockECloudService) GetActiveDirectoryDomain(arg0 int) (ecloud.ActiveDirectoryDomain, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetActiveDirectoryDomain", arg0)
	ret0, _ := ret[0].(ecloud.ActiveDirectoryDomain)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetActiveDirectoryDomain indicates an expected call of GetActiveDirectoryDomain.
func (mr *MockECloudServiceMockRecorder) GetActiveDirectoryDomain(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetActiveDirectoryDomain", reflect.TypeOf((*MockECloudService)(nil).GetActiveDirectoryDomain), arg0)
}

// GetActiveDirectoryDomains mocks base method.
func (m *MockECloudService) GetActiveDirectoryDomains(arg0 connection.APIRequestParameters) ([]ecloud.ActiveDirectoryDomain, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetActiveDirectoryDomains", arg0)
	ret0, _ := ret[0].([]ecloud.ActiveDirectoryDomain)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetActiveDirectoryDomains indicates an expected call of GetActiveDirectoryDomains.
func (mr *MockECloudServiceMockRecorder) GetActiveDirectoryDomains(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetActiveDirectoryDomains", reflect.TypeOf((*MockECloudService)(nil).GetActiveDirectoryDomains), arg0)
}

// GetActiveDirectoryDomainsPaginated mocks base method.
func (m *MockECloudService) GetActiveDirectoryDomainsPaginated(arg0 connection.APIRequestParameters) (*connection.Paginated[ecloud.ActiveDirectoryDomain], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetActiveDirectoryDomainsPaginated", arg0)
	ret0, _ := ret[0].(*connection.Paginated[ecloud.ActiveDirectoryDomain])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetActiveDirectoryDomainsPaginated indicates an expected call of GetActiveDirectoryDomainsPaginated.
func (mr *MockECloudServiceMockRecorder) GetActiveDirectoryDomainsPaginated(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetActiveDirectoryDomainsPaginated", reflect.TypeOf((*MockECloudService)(nil).GetActiveDirectoryDomainsPaginated), arg0)
}

// GetAffinityRule mocks base method.
func (m *MockECloudService) GetAffinityRule(arg0 string) (ecloud.AffinityRule, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAffinityRule", arg0)
	ret0, _ := ret[0].(ecloud.AffinityRule)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAffinityRule indicates an expected call of GetAffinityRule.
func (mr *MockECloudServiceMockRecorder) GetAffinityRule(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAffinityRule", reflect.TypeOf((*MockECloudService)(nil).GetAffinityRule), arg0)
}

// GetAffinityRuleMember mocks base method.
func (m *MockECloudService) GetAffinityRuleMember(arg0 string) (ecloud.AffinityRuleMember, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAffinityRuleMember", arg0)
	ret0, _ := ret[0].(ecloud.AffinityRuleMember)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAffinityRuleMember indicates an expected call of GetAffinityRuleMember.
func (mr *MockECloudServiceMockRecorder) GetAffinityRuleMember(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAffinityRuleMember", reflect.TypeOf((*MockECloudService)(nil).GetAffinityRuleMember), arg0)
}

// GetAffinityRuleMembers mocks base method.
func (m *MockECloudService) GetAffinityRuleMembers(arg0 string, arg1 connection.APIRequestParameters) ([]ecloud.AffinityRuleMember, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAffinityRuleMembers", arg0, arg1)
	ret0, _ := ret[0].([]ecloud.AffinityRuleMember)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAffinityRuleMembers indicates an expected call of GetAffinityRuleMembers.
func (mr *MockECloudServiceMockRecorder) GetAffinityRuleMembers(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAffinityRuleMembers", reflect.TypeOf((*MockECloudService)(nil).GetAffinityRuleMembers), arg0, arg1)
}

// GetAffinityRuleMembersPaginated mocks base method.
func (m *MockECloudService) GetAffinityRuleMembersPaginated(arg0 string, arg1 connection.APIRequestParameters) (*connection.Paginated[ecloud.AffinityRuleMember], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAffinityRuleMembersPaginated", arg0, arg1)
	ret0, _ := ret[0].(*connection.Paginated[ecloud.AffinityRuleMember])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAffinityRuleMembersPaginated indicates an expected call of GetAffinityRuleMembersPaginated.
func (mr *MockECloudServiceMockRecorder) GetAffinityRuleMembersPaginated(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAffinityRuleMembersPaginated", reflect.TypeOf((*MockECloudService)(nil).GetAffinityRuleMembersPaginated), arg0, arg1)
}

// GetAffinityRules mocks base method.
func (m *MockECloudService) GetAffinityRules(arg0 connection.APIRequestParameters) ([]ecloud.AffinityRule, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAffinityRules", arg0)
	ret0, _ := ret[0].([]ecloud.AffinityRule)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAffinityRules indicates an expected call of GetAffinityRules.
func (mr *MockECloudServiceMockRecorder) GetAffinityRules(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAffinityRules", reflect.TypeOf((*MockECloudService)(nil).GetAffinityRules), arg0)
}

// GetAffinityRulesPaginated mocks base method.
func (m *MockECloudService) GetAffinityRulesPaginated(arg0 connection.APIRequestParameters) (*connection.Paginated[ecloud.AffinityRule], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAffinityRulesPaginated", arg0)
	ret0, _ := ret[0].(*connection.Paginated[ecloud.AffinityRule])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAffinityRulesPaginated indicates an expected call of GetAffinityRulesPaginated.
func (mr *MockECloudServiceMockRecorder) GetAffinityRulesPaginated(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAffinityRulesPaginated", reflect.TypeOf((*MockECloudService)(nil).GetAffinityRulesPaginated), arg0)
}

// GetAppliance mocks base method.
func (m *MockECloudService) GetAppliance(arg0 string) (ecloud.Appliance, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAppliance", arg0)
	ret0, _ := ret[0].(ecloud.Appliance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAppliance indicates an expected call of GetAppliance.
func (mr *MockECloudServiceMockRecorder) GetAppliance(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAppliance", reflect.TypeOf((*MockECloudService)(nil).GetAppliance), arg0)
}

// GetApplianceParameters mocks base method.
func (m *MockECloudService) GetApplianceParameters(arg0 string, arg1 connection.APIRequestParameters) ([]ecloud.ApplianceParameter, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetApplianceParameters", arg0, arg1)
	ret0, _ := ret[0].([]ecloud.ApplianceParameter)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetApplianceParameters indicates an expected call of GetApplianceParameters.
func (mr *MockECloudServiceMockRecorder) GetApplianceParameters(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetApplianceParameters", reflect.TypeOf((*MockECloudService)(nil).GetApplianceParameters), arg0, arg1)
}

// GetApplianceParametersPaginated mocks base method.
func (m *MockECloudService) GetApplianceParametersPaginated(arg0 string, arg1 connection.APIRequestParameters) (*connection.Paginated[ecloud.ApplianceParameter], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetApplianceParametersPaginated", arg0, arg1)
	ret0, _ := ret[0].(*connection.Paginated[ecloud.ApplianceParameter])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetApplianceParametersPaginated indicates an expected call of GetApplianceParametersPaginated.
func (mr *MockECloudServiceMockRecorder) GetApplianceParametersPaginated(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetApplianceParametersPaginated", reflect.TypeOf((*MockECloudService)(nil).GetApplianceParametersPaginated), arg0, arg1)
}

// GetAppliances mocks base method.
func (m *MockECloudService) GetAppliances(arg0 connection.APIRequestParameters) ([]ecloud.Appliance, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAppliances", arg0)
	ret0, _ := ret[0].([]ecloud.Appliance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAppliances indicates an expected call of GetAppliances.
func (mr *MockECloudServiceMockRecorder) GetAppliances(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAppliances", reflect.TypeOf((*MockECloudService)(nil).GetAppliances), arg0)
}

// GetAppliancesPaginated mocks base method.
func (m *MockECloudService) GetAppliancesPaginated(arg0 connection.APIRequestParameters) (*connection.Paginated[ecloud.Appliance], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAppliancesPaginated", arg0)
	ret0, _ := ret[0].(*connection.Paginated[ecloud.Appliance])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAppliancesPaginated indicates an expected call of GetAppliancesPaginated.
func (mr *MockECloudServiceMockRecorder) GetAppliancesPaginated(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAppliancesPaginated", reflect.TypeOf((*MockECloudService)(nil).GetAppliancesPaginated), arg0)
}

// GetAvailabilityZone mocks base method.
func (m *MockECloudService) GetAvailabilityZone(arg0 string) (ecloud.AvailabilityZone, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAvailabilityZone", arg0)
	ret0, _ := ret[0].(ecloud.AvailabilityZone)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAvailabilityZone indicates an expected call of GetAvailabilityZone.
func (mr *MockECloudServiceMockRecorder) GetAvailabilityZone(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAvailabilityZone", reflect.TypeOf((*MockECloudService)(nil).GetAvailabilityZone), arg0)
}

// GetAvailabilityZoneIOPSTiers mocks base method.
func (m *MockECloudService) GetAvailabilityZoneIOPSTiers(arg0 string, arg1 connection.APIRequestParameters) ([]ecloud.IOPSTier, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAvailabilityZoneIOPSTiers", arg0, arg1)
	ret0, _ := ret[0].([]ecloud.IOPSTier)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAvailabilityZoneIOPSTiers indicates an expected call of GetAvailabilityZoneIOPSTiers.
func (mr *MockECloudServiceMockRecorder) GetAvailabilityZoneIOPSTiers(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAvailabilityZoneIOPSTiers", reflect.TypeOf((*MockECloudService)(nil).GetAvailabilityZoneIOPSTiers), arg0, arg1)
}

// GetAvailabilityZoneIOPSTiersPaginated mocks base method.
func (m *MockECloudService) GetAvailabilityZoneIOPSTiersPaginated(arg0 string, arg1 connection.APIRequestParameters) (*connection.Paginated[ecloud.IOPSTier], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAvailabilityZoneIOPSTiersPaginated", arg0, arg1)
	ret0, _ := ret[0].(*connection.Paginated[ecloud.IOPSTier])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAvailabilityZoneIOPSTiersPaginated indicates an expected call of GetAvailabilityZoneIOPSTiersPaginated.
func (mr *MockECloudServiceMockRecorder) GetAvailabilityZoneIOPSTiersPaginated(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAvailabilityZoneIOPSTiersPaginated", reflect.TypeOf((*MockECloudService)(nil).GetAvailabilityZoneIOPSTiersPaginated), arg0, arg1)
}

// GetAvailabilityZones mocks base method.
func (m *MockECloudService) GetAvailabilityZones(arg0 connection.APIRequestParameters) ([]ecloud.AvailabilityZone, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAvailabilityZones", arg0)
	ret0, _ := ret[0].([]ecloud.AvailabilityZone)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAvailabilityZones indicates an expected call of GetAvailabilityZones.
func (mr *MockECloudServiceMockRecorder) GetAvailabilityZones(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAvailabilityZones", reflect.TypeOf((*MockECloudService)(nil).GetAvailabilityZones), arg0)
}

// GetAvailabilityZonesPaginated mocks base method.
func (m *MockECloudService) GetAvailabilityZonesPaginated(arg0 connection.APIRequestParameters) (*connection.Paginated[ecloud.AvailabilityZone], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAvailabilityZonesPaginated", arg0)
	ret0, _ := ret[0].(*connection.Paginated[ecloud.AvailabilityZone])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAvailabilityZonesPaginated indicates an expected call of GetAvailabilityZonesPaginated.
func (mr *MockECloudServiceMockRecorder) GetAvailabilityZonesPaginated(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAvailabilityZonesPaginated", reflect.TypeOf((*MockECloudService)(nil).GetAvailabilityZonesPaginated), arg0)
}

// GetBackupGateway mocks base method.
func (m *MockECloudService) GetBackupGateway(arg0 string) (ecloud.BackupGateway, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBackupGateway", arg0)
	ret0, _ := ret[0].(ecloud.BackupGateway)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBackupGateway indicates an expected call of GetBackupGateway.
func (mr *MockECloudServiceMockRecorder) GetBackupGateway(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBackupGateway", reflect.TypeOf((*MockECloudService)(nil).GetBackupGateway), arg0)
}

// GetBackupGatewaySpecification mocks base method.
func (m *MockECloudService) GetBackupGatewaySpecification(arg0 string) (ecloud.BackupGatewaySpecification, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBackupGatewaySpecification", arg0)
	ret0, _ := ret[0].(ecloud.BackupGatewaySpecification)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBackupGatewaySpecification indicates an expected call of GetBackupGatewaySpecification.
func (mr *MockECloudServiceMockRecorder) GetBackupGatewaySpecification(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBackupGatewaySpecification", reflect.TypeOf((*MockECloudService)(nil).GetBackupGatewaySpecification), arg0)
}

// GetBackupGatewaySpecifications mocks base method.
func (m *MockECloudService) GetBackupGatewaySpecifications(arg0 connection.APIRequestParameters) ([]ecloud.BackupGatewaySpecification, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBackupGatewaySpecifications", arg0)
	ret0, _ := ret[0].([]ecloud.BackupGatewaySpecification)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBackupGatewaySpecifications indicates an expected call of GetBackupGatewaySpecifications.
func (mr *MockECloudServiceMockRecorder) GetBackupGatewaySpecifications(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBackupGatewaySpecifications", reflect.TypeOf((*MockECloudService)(nil).GetBackupGatewaySpecifications), arg0)
}

// GetBackupGatewaySpecificationsPaginated mocks base method.
func (m *MockECloudService) GetBackupGatewaySpecificationsPaginated(arg0 connection.APIRequestParameters) (*connection.Paginated[ecloud.BackupGatewaySpecification], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBackupGatewaySpecificationsPaginated", arg0)
	ret0, _ := ret[0].(*connection.Paginated[ecloud.BackupGatewaySpecification])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBackupGatewaySpecificationsPaginated indicates an expected call of GetBackupGatewaySpecificationsPaginated.
func (mr *MockECloudServiceMockRecorder) GetBackupGatewaySpecificationsPaginated(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBackupGatewaySpecificationsPaginated", reflect.TypeOf((*MockECloudService)(nil).GetBackupGatewaySpecificationsPaginated), arg0)
}

// GetBackupGateways mocks base method.
func (m *MockECloudService) GetBackupGateways(arg0 connection.APIRequestParameters) ([]ecloud.BackupGateway, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBackupGateways", arg0)
	ret0, _ := ret[0].([]ecloud.BackupGateway)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBackupGateways indicates an expected call of GetBackupGateways.
func (mr *MockECloudServiceMockRecorder) GetBackupGateways(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBackupGateways", reflect.TypeOf((*MockECloudService)(nil).GetBackupGateways), arg0)
}

// GetBackupGatewaysPaginated mocks base method.
func (m *MockECloudService) GetBackupGatewaysPaginated(arg0 connection.APIRequestParameters) (*connection.Paginated[ecloud.BackupGateway], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBackupGatewaysPaginated", arg0)
	ret0, _ := ret[0].(*connection.Paginated[ecloud.BackupGateway])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBackupGatewaysPaginated indicates an expected call of GetBackupGatewaysPaginated.
func (mr *MockECloudServiceMockRecorder) GetBackupGatewaysPaginated(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBackupGatewaysPaginated", reflect.TypeOf((*MockECloudService)(nil).GetBackupGatewaysPaginated), arg0)
}

// GetBillingMetric mocks base method.
func (m *MockECloudService) GetBillingMetric(arg0 string) (ecloud.BillingMetric, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBillingMetric", arg0)
	ret0, _ := ret[0].(ecloud.BillingMetric)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBillingMetric indicates an expected call of GetBillingMetric.
func (mr *MockECloudServiceMockRecorder) GetBillingMetric(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBillingMetric", reflect.TypeOf((*MockECloudService)(nil).GetBillingMetric), arg0)
}

// GetBillingMetrics mocks base method.
func (m *MockECloudService) GetBillingMetrics(arg0 connection.APIRequestParameters) ([]ecloud.BillingMetric, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBillingMetrics", arg0)
	ret0, _ := ret[0].([]ecloud.BillingMetric)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBillingMetrics indicates an expected call of GetBillingMetrics.
func (mr *MockECloudServiceMockRecorder) GetBillingMetrics(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBillingMetrics", reflect.TypeOf((*MockECloudService)(nil).GetBillingMetrics), arg0)
}

// GetBillingMetricsPaginated mocks base method.
func (m *MockECloudService) GetBillingMetricsPaginated(arg0 connection.APIRequestParameters) (*connection.Paginated[ecloud.BillingMetric], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBillingMetricsPaginated", arg0)
	ret0, _ := ret[0].(*connection.Paginated[ecloud.BillingMetric])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBillingMetricsPaginated indicates an expected call of GetBillingMetricsPaginated.
func (mr *MockECloudServiceMockRecorder) GetBillingMetricsPaginated(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBillingMetricsPaginated", reflect.TypeOf((*MockECloudService)(nil).GetBillingMetricsPaginated), arg0)
}

// GetCredits mocks base method.
func (m *MockECloudService) GetCredits(arg0 connection.APIRequestParameters) ([]account.Credit, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCredits", arg0)
	ret0, _ := ret[0].([]account.Credit)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCredits indicates an expected call of GetCredits.
func (mr *MockECloudServiceMockRecorder) GetCredits(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCredits", reflect.TypeOf((*MockECloudService)(nil).GetCredits), arg0)
}

// GetDHCP mocks base method.
func (m *MockECloudService) GetDHCP(arg0 string) (ecloud.DHCP, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDHCP", arg0)
	ret0, _ := ret[0].(ecloud.DHCP)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDHCP indicates an expected call of GetDHCP.
func (mr *MockECloudServiceMockRecorder) GetDHCP(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDHCP", reflect.TypeOf((*MockECloudService)(nil).GetDHCP), arg0)
}

// GetDHCPTasks mocks base method.
func (m *MockECloudService) GetDHCPTasks(arg0 string, arg1 connection.APIRequestParameters) ([]ecloud.Task, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDHCPTasks", arg0, arg1)
	ret0, _ := ret[0].([]ecloud.Task)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDHCPTasks indicates an expected call of GetDHCPTasks.
func (mr *MockECloudServiceMockRecorder) GetDHCPTasks(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDHCPTasks", reflect.TypeOf((*MockECloudService)(nil).GetDHCPTasks), arg0, arg1)
}

// GetDHCPTasksPaginated mocks base method.
func (m *MockECloudService) GetDHCPTasksPaginated(arg0 string, arg1 connection.APIRequestParameters) (*connection.Paginated[ecloud.Task], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDHCPTasksPaginated", arg0, arg1)
	ret0, _ := ret[0].(*connection.Paginated[ecloud.Task])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDHCPTasksPaginated indicates an expected call of GetDHCPTasksPaginated.
func (mr *MockECloudServiceMockRecorder) GetDHCPTasksPaginated(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDHCPTasksPaginated", reflect.TypeOf((*MockECloudService)(nil).GetDHCPTasksPaginated), arg0, arg1)
}

// GetDHCPs mocks base method.
func (m *MockECloudService) GetDHCPs(arg0 connection.APIRequestParameters) ([]ecloud.DHCP, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDHCPs", arg0)
	ret0, _ := ret[0].([]ecloud.DHCP)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDHCPs indicates an expected call of GetDHCPs.
func (mr *MockECloudServiceMockRecorder) GetDHCPs(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDHCPs", reflect.TypeOf((*MockECloudService)(nil).GetDHCPs), arg0)
}

// GetDHCPsPaginated mocks base method.
func (m *MockECloudService) GetDHCPsPaginated(arg0 connection.APIRequestParameters) (*connection.Paginated[ecloud.DHCP], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDHCPsPaginated", arg0)
	ret0, _ := ret[0].(*connection.Paginated[ecloud.DHCP])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDHCPsPaginated indicates an expected call of GetDHCPsPaginated.
func (mr *MockECloudServiceMockRecorder) GetDHCPsPaginated(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDHCPsPaginated", reflect.TypeOf((*MockECloudService)(nil).GetDHCPsPaginated), arg0)
}

// GetDatastore mocks base method.
func (m *MockECloudService) GetDatastore(arg0 int) (ecloud.Datastore, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDatastore", arg0)
	ret0, _ := ret[0].(ecloud.Datastore)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDatastore indicates an expected call of GetDatastore.
func (mr *MockECloudServiceMockRecorder) GetDatastore(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDatastore", reflect.TypeOf((*MockECloudService)(nil).GetDatastore), arg0)
}

// GetDatastores mocks base method.
func (m *MockECloudService) GetDatastores(arg0 connection.APIRequestParameters) ([]ecloud.Datastore, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDatastores", arg0)
	ret0, _ := ret[0].([]ecloud.Datastore)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDatastores indicates an expected call of GetDatastores.
func (mr *MockECloudServiceMockRecorder) GetDatastores(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDatastores", reflect.TypeOf((*MockECloudService)(nil).GetDatastores), arg0)
}

// GetDatastoresPaginated mocks base method.
func (m *MockECloudService) GetDatastoresPaginated(arg0 connection.APIRequestParameters) (*connection.Paginated[ecloud.Datastore], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDatastoresPaginated", arg0)
	ret0, _ := ret[0].(*connection.Paginated[ecloud.Datastore])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDatastoresPaginated indicates an expected call of GetDatastoresPaginated.
func (mr *MockECloudServiceMockRecorder) GetDatastoresPaginated(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDatastoresPaginated", reflect.TypeOf((*MockECloudService)(nil).GetDatastoresPaginated), arg0)
}

// GetFirewall mocks base method.
func (m *MockECloudService) GetFirewall(arg0 int) (ecloud.Firewall, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFirewall", arg0)
	ret0, _ := ret[0].(ecloud.Firewall)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFirewall indicates an expected call of GetFirewall.
func (mr *MockECloudServiceMockRecorder) GetFirewall(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFirewall", reflect.TypeOf((*MockECloudService)(nil).GetFirewall), arg0)
}

// GetFirewallConfig mocks base method.
func (m *MockECloudService) GetFirewallConfig(arg0 int) (ecloud.FirewallConfig, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFirewallConfig", arg0)
	ret0, _ := ret[0].(ecloud.FirewallConfig)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFirewallConfig indicates an expected call of GetFirewallConfig.
func (mr *MockECloudServiceMockRecorder) GetFirewallConfig(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFirewallConfig", reflect.TypeOf((*MockECloudService)(nil).GetFirewallConfig), arg0)
}

// GetFirewallPolicies mocks base method.
func (m *MockECloudService) GetFirewallPolicies(arg0 connection.APIRequestParameters) ([]ecloud.FirewallPolicy, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFirewallPolicies", arg0)
	ret0, _ := ret[0].([]ecloud.FirewallPolicy)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFirewallPolicies indicates an expected call of GetFirewallPolicies.
func (mr *MockECloudServiceMockRecorder) GetFirewallPolicies(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFirewallPolicies", reflect.TypeOf((*MockECloudService)(nil).GetFirewallPolicies), arg0)
}

// GetFirewallPoliciesPaginated mocks base method.
func (m *MockECloudService) GetFirewallPoliciesPaginated(arg0 connection.APIRequestParameters) (*connection.Paginated[ecloud.FirewallPolicy], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFirewallPoliciesPaginated", arg0)
	ret0, _ := ret[0].(*connection.Paginated[ecloud.FirewallPolicy])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFirewallPoliciesPaginated indicates an expected call of GetFirewallPoliciesPaginated.
func (mr *MockECloudServiceMockRecorder) GetFirewallPoliciesPaginated(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFirewallPoliciesPaginated", reflect.TypeOf((*MockECloudService)(nil).GetFirewallPoliciesPaginated), arg0)
}

// GetFirewallPolicy mocks base method.
func (m *MockECloudService) GetFirewallPolicy(arg0 string) (ecloud.FirewallPolicy, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFirewallPolicy", arg0)
	ret0, _ := ret[0].(ecloud.FirewallPolicy)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFirewallPolicy indicates an expected call of GetFirewallPolicy.
func (mr *MockECloudServiceMockRecorder) GetFirewallPolicy(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFirewallPolicy", reflect.TypeOf((*MockECloudService)(nil).GetFirewallPolicy), arg0)
}

// GetFirewallPolicyFirewallRules mocks base method.
func (m *MockECloudService) GetFirewallPolicyFirewallRules(arg0 string, arg1 connection.APIRequestParameters) ([]ecloud.FirewallRule, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFirewallPolicyFirewallRules", arg0, arg1)
	ret0, _ := ret[0].([]ecloud.FirewallRule)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFirewallPolicyFirewallRules indicates an expected call of GetFirewallPolicyFirewallRules.
func (mr *MockECloudServiceMockRecorder) GetFirewallPolicyFirewallRules(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFirewallPolicyFirewallRules", reflect.TypeOf((*MockECloudService)(nil).GetFirewallPolicyFirewallRules), arg0, arg1)
}

// GetFirewallPolicyFirewallRulesPaginated mocks base method.
func (m *MockECloudService) GetFirewallPolicyFirewallRulesPaginated(arg0 string, arg1 connection.APIRequestParameters) (*connection.Paginated[ecloud.FirewallRule], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFirewallPolicyFirewallRulesPaginated", arg0, arg1)
	ret0, _ := ret[0].(*connection.Paginated[ecloud.FirewallRule])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFirewallPolicyFirewallRulesPaginated indicates an expected call of GetFirewallPolicyFirewallRulesPaginated.
func (mr *MockECloudServiceMockRecorder) GetFirewallPolicyFirewallRulesPaginated(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFirewallPolicyFirewallRulesPaginated", reflect.TypeOf((*MockECloudService)(nil).GetFirewallPolicyFirewallRulesPaginated), arg0, arg1)
}

// GetFirewallPolicyTasks mocks base method.
func (m *MockECloudService) GetFirewallPolicyTasks(arg0 string, arg1 connection.APIRequestParameters) ([]ecloud.Task, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFirewallPolicyTasks", arg0, arg1)
	ret0, _ := ret[0].([]ecloud.Task)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFirewallPolicyTasks indicates an expected call of GetFirewallPolicyTasks.
func (mr *MockECloudServiceMockRecorder) GetFirewallPolicyTasks(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFirewallPolicyTasks", reflect.TypeOf((*MockECloudService)(nil).GetFirewallPolicyTasks), arg0, arg1)
}

// GetFirewallPolicyTasksPaginated mocks base method.
func (m *MockECloudService) GetFirewallPolicyTasksPaginated(arg0 string, arg1 connection.APIRequestParameters) (*connection.Paginated[ecloud.Task], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFirewallPolicyTasksPaginated", arg0, arg1)
	ret0, _ := ret[0].(*connection.Paginated[ecloud.Task])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFirewallPolicyTasksPaginated indicates an expected call of GetFirewallPolicyTasksPaginated.
func (mr *MockECloudServiceMockRecorder) GetFirewallPolicyTasksPaginated(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFirewallPolicyTasksPaginated", reflect.TypeOf((*MockECloudService)(nil).GetFirewallPolicyTasksPaginated), arg0, arg1)
}

// GetFirewallRule mocks base method.
func (m *MockECloudService) GetFirewallRule(arg0 string) (ecloud.FirewallRule, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFirewallRule", arg0)
	ret0, _ := ret[0].(ecloud.FirewallRule)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFirewallRule indicates an expected call of GetFirewallRule.
func (mr *MockECloudServiceMockRecorder) GetFirewallRule(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFirewallRule", reflect.TypeOf((*MockECloudService)(nil).GetFirewallRule), arg0)
}

// GetFirewallRuleFirewallRulePorts mocks base method.
func (m *MockECloudService) GetFirewallRuleFirewallRulePorts(arg0 string, arg1 connection.APIRequestParameters) ([]ecloud.FirewallRulePort, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFirewallRuleFirewallRulePorts", arg0, arg1)
	ret0, _ := ret[0].([]ecloud.FirewallRulePort)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFirewallRuleFirewallRulePorts indicates an expected call of GetFirewallRuleFirewallRulePorts.
func (mr *MockECloudServiceMockRecorder) GetFirewallRuleFirewallRulePorts(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFirewallRuleFirewallRulePorts", reflect.TypeOf((*MockECloudService)(nil).GetFirewallRuleFirewallRulePorts), arg0, arg1)
}

// GetFirewallRuleFirewallRulePortsPaginated mocks base method.
func (m *MockECloudService) GetFirewallRuleFirewallRulePortsPaginated(arg0 string, arg1 connection.APIRequestParameters) (*connection.Paginated[ecloud.FirewallRulePort], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFirewallRuleFirewallRulePortsPaginated", arg0, arg1)
	ret0, _ := ret[0].(*connection.Paginated[ecloud.FirewallRulePort])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFirewallRuleFirewallRulePortsPaginated indicates an expected call of GetFirewallRuleFirewallRulePortsPaginated.
func (mr *MockECloudServiceMockRecorder) GetFirewallRuleFirewallRulePortsPaginated(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFirewallRuleFirewallRulePortsPaginated", reflect.TypeOf((*MockECloudService)(nil).GetFirewallRuleFirewallRulePortsPaginated), arg0, arg1)
}

// GetFirewallRulePort mocks base method.
func (m *MockECloudService) GetFirewallRulePort(arg0 string) (ecloud.FirewallRulePort, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFirewallRulePort", arg0)
	ret0, _ := ret[0].(ecloud.FirewallRulePort)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFirewallRulePort indicates an expected call of GetFirewallRulePort.
func (mr *MockECloudServiceMockRecorder) GetFirewallRulePort(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFirewallRulePort", reflect.TypeOf((*MockECloudService)(nil).GetFirewallRulePort), arg0)
}

// GetFirewallRulePorts mocks base method.
func (m *MockECloudService) GetFirewallRulePorts(arg0 connection.APIRequestParameters) ([]ecloud.FirewallRulePort, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFirewallRulePorts", arg0)
	ret0, _ := ret[0].([]ecloud.FirewallRulePort)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFirewallRulePorts indicates an expected call of GetFirewallRulePorts.
func (mr *MockECloudServiceMockRecorder) GetFirewallRulePorts(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFirewallRulePorts", reflect.TypeOf((*MockECloudService)(nil).GetFirewallRulePorts), arg0)
}

// GetFirewallRulePortsPaginated mocks base method.
func (m *MockECloudService) GetFirewallRulePortsPaginated(arg0 connection.APIRequestParameters) (*connection.Paginated[ecloud.FirewallRulePort], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFirewallRulePortsPaginated", arg0)
	ret0, _ := ret[0].(*connection.Paginated[ecloud.FirewallRulePort])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFirewallRulePortsPaginated indicates an expected call of GetFirewallRulePortsPaginated.
func (mr *MockECloudServiceMockRecorder) GetFirewallRulePortsPaginated(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFirewallRulePortsPaginated", reflect.TypeOf((*MockECloudService)(nil).GetFirewallRulePortsPaginated), arg0)
}

// GetFirewallRules mocks base method.
func (m *MockECloudService) GetFirewallRules(arg0 connection.APIRequestParameters) ([]ecloud.FirewallRule, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFirewallRules", arg0)
	ret0, _ := ret[0].([]ecloud.FirewallRule)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFirewallRules indicates an expected call of GetFirewallRules.
func (mr *MockECloudServiceMockRecorder) GetFirewallRules(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFirewallRules", reflect.TypeOf((*MockECloudService)(nil).GetFirewallRules), arg0)
}

// GetFirewallRulesPaginated mocks base method.
func (m *MockECloudService) GetFirewallRulesPaginated(arg0 connection.APIRequestParameters) (*connection.Paginated[ecloud.FirewallRule], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFirewallRulesPaginated", arg0)
	ret0, _ := ret[0].(*connection.Paginated[ecloud.FirewallRule])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFirewallRulesPaginated indicates an expected call of GetFirewallRulesPaginated.
func (mr *MockECloudServiceMockRecorder) GetFirewallRulesPaginated(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFirewallRulesPaginated", reflect.TypeOf((*MockECloudService)(nil).GetFirewallRulesPaginated), arg0)
}

// GetFirewalls mocks base method.
func (m *MockECloudService) GetFirewalls(arg0 connection.APIRequestParameters) ([]ecloud.Firewall, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFirewalls", arg0)
	ret0, _ := ret[0].([]ecloud.Firewall)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFirewalls indicates an expected call of GetFirewalls.
func (mr *MockECloudServiceMockRecorder) GetFirewalls(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFirewalls", reflect.TypeOf((*MockECloudService)(nil).GetFirewalls), arg0)
}

// GetFirewallsPaginated mocks base method.
func (m *MockECloudService) GetFirewallsPaginated(arg0 connection.APIRequestParameters) (*connection.Paginated[ecloud.Firewall], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFirewallsPaginated", arg0)
	ret0, _ := ret[0].(*connection.Paginated[ecloud.Firewall])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFirewallsPaginated indicates an expected call of GetFirewallsPaginated.
func (mr *MockECloudServiceMockRecorder) GetFirewallsPaginated(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFirewallsPaginated", reflect.TypeOf((*MockECloudService)(nil).GetFirewallsPaginated), arg0)
}

// GetFloatingIP mocks base method.
func (m *MockECloudService) GetFloatingIP(arg0 string) (ecloud.FloatingIP, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFloatingIP", arg0)
	ret0, _ := ret[0].(ecloud.FloatingIP)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFloatingIP indicates an expected call of GetFloatingIP.
func (mr *MockECloudServiceMockRecorder) GetFloatingIP(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFloatingIP", reflect.TypeOf((*MockECloudService)(nil).GetFloatingIP), arg0)
}

// GetFloatingIPTasks mocks base method.
func (m *MockECloudService) GetFloatingIPTasks(arg0 string, arg1 connection.APIRequestParameters) ([]ecloud.Task, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFloatingIPTasks", arg0, arg1)
	ret0, _ := ret[0].([]ecloud.Task)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFloatingIPTasks indicates an expected call of GetFloatingIPTasks.
func (mr *MockECloudServiceMockRecorder) GetFloatingIPTasks(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFloatingIPTasks", reflect.TypeOf((*MockECloudService)(nil).GetFloatingIPTasks), arg0, arg1)
}

// GetFloatingIPTasksPaginated mocks base method.
func (m *MockECloudService) GetFloatingIPTasksPaginated(arg0 string, arg1 connection.APIRequestParameters) (*connection.Paginated[ecloud.Task], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFloatingIPTasksPaginated", arg0, arg1)
	ret0, _ := ret[0].(*connection.Paginated[ecloud.Task])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFloatingIPTasksPaginated indicates an expected call of GetFloatingIPTasksPaginated.
func (mr *MockECloudServiceMockRecorder) GetFloatingIPTasksPaginated(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFloatingIPTasksPaginated", reflect.TypeOf((*MockECloudService)(nil).GetFloatingIPTasksPaginated), arg0, arg1)
}

// GetFloatingIPs mocks base method.
func (m *MockECloudService) GetFloatingIPs(arg0 connection.APIRequestParameters) ([]ecloud.FloatingIP, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFloatingIPs", arg0)
	ret0, _ := ret[0].([]ecloud.FloatingIP)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFloatingIPs indicates an expected call of GetFloatingIPs.
func (mr *MockECloudServiceMockRecorder) GetFloatingIPs(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFloatingIPs", reflect.TypeOf((*MockECloudService)(nil).GetFloatingIPs), arg0)
}

// GetFloatingIPsPaginated mocks base method.
func (m *MockECloudService) GetFloatingIPsPaginated(arg0 connection.APIRequestParameters) (*connection.Paginated[ecloud.FloatingIP], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFloatingIPsPaginated", arg0)
	ret0, _ := ret[0].(*connection.Paginated[ecloud.FloatingIP])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFloatingIPsPaginated indicates an expected call of GetFloatingIPsPaginated.
func (mr *MockECloudServiceMockRecorder) GetFloatingIPsPaginated(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFloatingIPsPaginated", reflect.TypeOf((*MockECloudService)(nil).GetFloatingIPsPaginated), arg0)
}

// GetHost mocks base method.
func (m *MockECloudService) GetHost(arg0 string) (ecloud.Host, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHost", arg0)
	ret0, _ := ret[0].(ecloud.Host)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetHost indicates an expected call of GetHost.
func (mr *MockECloudServiceMockRecorder) GetHost(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHost", reflect.TypeOf((*MockECloudService)(nil).GetHost), arg0)
}

// GetHostGroup mocks base method.
func (m *MockECloudService) GetHostGroup(arg0 string) (ecloud.HostGroup, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHostGroup", arg0)
	ret0, _ := ret[0].(ecloud.HostGroup)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetHostGroup indicates an expected call of GetHostGroup.
func (mr *MockECloudServiceMockRecorder) GetHostGroup(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHostGroup", reflect.TypeOf((*MockECloudService)(nil).GetHostGroup), arg0)
}

// GetHostGroupTasks mocks base method.
func (m *MockECloudService) GetHostGroupTasks(arg0 string, arg1 connection.APIRequestParameters) ([]ecloud.Task, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHostGroupTasks", arg0, arg1)
	ret0, _ := ret[0].([]ecloud.Task)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetHostGroupTasks indicates an expected call of GetHostGroupTasks.
func (mr *MockECloudServiceMockRecorder) GetHostGroupTasks(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHostGroupTasks", reflect.TypeOf((*MockECloudService)(nil).GetHostGroupTasks), arg0, arg1)
}

// GetHostGroupTasksPaginated mocks base method.
func (m *MockECloudService) GetHostGroupTasksPaginated(arg0 string, arg1 connection.APIRequestParameters) (*connection.Paginated[ecloud.Task], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHostGroupTasksPaginated", arg0, arg1)
	ret0, _ := ret[0].(*connection.Paginated[ecloud.Task])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetHostGroupTasksPaginated indicates an expected call of GetHostGroupTasksPaginated.
func (mr *MockECloudServiceMockRecorder) GetHostGroupTasksPaginated(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHostGroupTasksPaginated", reflect.TypeOf((*MockECloudService)(nil).GetHostGroupTasksPaginated), arg0, arg1)
}

// GetHostGroups mocks base method.
func (m *MockECloudService) GetHostGroups(arg0 connection.APIRequestParameters) ([]ecloud.HostGroup, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHostGroups", arg0)
	ret0, _ := ret[0].([]ecloud.HostGroup)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetHostGroups indicates an expected call of GetHostGroups.
func (mr *MockECloudServiceMockRecorder) GetHostGroups(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHostGroups", reflect.TypeOf((*MockECloudService)(nil).GetHostGroups), arg0)
}

// GetHostGroupsPaginated mocks base method.
func (m *MockECloudService) GetHostGroupsPaginated(arg0 connection.APIRequestParameters) (*connection.Paginated[ecloud.HostGroup], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHostGroupsPaginated", arg0)
	ret0, _ := ret[0].(*connection.Paginated[ecloud.HostGroup])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetHostGroupsPaginated indicates an expected call of GetHostGroupsPaginated.
func (mr *MockECloudServiceMockRecorder) GetHostGroupsPaginated(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHostGroupsPaginated", reflect.TypeOf((*MockECloudService)(nil).GetHostGroupsPaginated), arg0)
}

// GetHostSpec mocks base method.
func (m *MockECloudService) GetHostSpec(arg0 string) (ecloud.HostSpec, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHostSpec", arg0)
	ret0, _ := ret[0].(ecloud.HostSpec)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetHostSpec indicates an expected call of GetHostSpec.
func (mr *MockECloudServiceMockRecorder) GetHostSpec(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHostSpec", reflect.TypeOf((*MockECloudService)(nil).GetHostSpec), arg0)
}

// GetHostSpecs mocks base method.
func (m *MockECloudService) GetHostSpecs(arg0 connection.APIRequestParameters) ([]ecloud.HostSpec, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHostSpecs", arg0)
	ret0, _ := ret[0].([]ecloud.HostSpec)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetHostSpecs indicates an expected call of GetHostSpecs.
func (mr *MockECloudServiceMockRecorder) GetHostSpecs(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHostSpecs", reflect.TypeOf((*MockECloudService)(nil).GetHostSpecs), arg0)
}

// GetHostSpecsPaginated mocks base method.
func (m *MockECloudService) GetHostSpecsPaginated(arg0 connection.APIRequestParameters) (*connection.Paginated[ecloud.HostSpec], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHostSpecsPaginated", arg0)
	ret0, _ := ret[0].(*connection.Paginated[ecloud.HostSpec])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetHostSpecsPaginated indicates an expected call of GetHostSpecsPaginated.
func (mr *MockECloudServiceMockRecorder) GetHostSpecsPaginated(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHostSpecsPaginated", reflect.TypeOf((*MockECloudService)(nil).GetHostSpecsPaginated), arg0)
}

// GetHostTasks mocks base method.
func (m *MockECloudService) GetHostTasks(arg0 string, arg1 connection.APIRequestParameters) ([]ecloud.Task, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHostTasks", arg0, arg1)
	ret0, _ := ret[0].([]ecloud.Task)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetHostTasks indicates an expected call of GetHostTasks.
func (mr *MockECloudServiceMockRecorder) GetHostTasks(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHostTasks", reflect.TypeOf((*MockECloudService)(nil).GetHostTasks), arg0, arg1)
}

// GetHostTasksPaginated mocks base method.
func (m *MockECloudService) GetHostTasksPaginated(arg0 string, arg1 connection.APIRequestParameters) (*connection.Paginated[ecloud.Task], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHostTasksPaginated", arg0, arg1)
	ret0, _ := ret[0].(*connection.Paginated[ecloud.Task])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetHostTasksPaginated indicates an expected call of GetHostTasksPaginated.
func (mr *MockECloudServiceMockRecorder) GetHostTasksPaginated(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHostTasksPaginated", reflect.TypeOf((*MockECloudService)(nil).GetHostTasksPaginated), arg0, arg1)
}

// GetHosts mocks base method.
func (m *MockECloudService) GetHosts(arg0 connection.APIRequestParameters) ([]ecloud.Host, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHosts", arg0)
	ret0, _ := ret[0].([]ecloud.Host)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetHosts indicates an expected call of GetHosts.
func (mr *MockECloudServiceMockRecorder) GetHosts(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHosts", reflect.TypeOf((*MockECloudService)(nil).GetHosts), arg0)
}

// GetHostsPaginated mocks base method.
func (m *MockECloudService) GetHostsPaginated(arg0 connection.APIRequestParameters) (*connection.Paginated[ecloud.Host], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHostsPaginated", arg0)
	ret0, _ := ret[0].(*connection.Paginated[ecloud.Host])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetHostsPaginated indicates an expected call of GetHostsPaginated.
func (mr *MockECloudServiceMockRecorder) GetHostsPaginated(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHostsPaginated", reflect.TypeOf((*MockECloudService)(nil).GetHostsPaginated), arg0)
}

// GetIOPSTier mocks base method.
func (m *MockECloudService) GetIOPSTier(arg0 string) (ecloud.IOPSTier, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetIOPSTier", arg0)
	ret0, _ := ret[0].(ecloud.IOPSTier)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetIOPSTier indicates an expected call of GetIOPSTier.
func (mr *MockECloudServiceMockRecorder) GetIOPSTier(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIOPSTier", reflect.TypeOf((*MockECloudService)(nil).GetIOPSTier), arg0)
}

// GetIOPSTiers mocks base method.
func (m *MockECloudService) GetIOPSTiers(arg0 connection.APIRequestParameters) ([]ecloud.IOPSTier, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetIOPSTiers", arg0)
	ret0, _ := ret[0].([]ecloud.IOPSTier)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetIOPSTiers indicates an expected call of GetIOPSTiers.
func (mr *MockECloudServiceMockRecorder) GetIOPSTiers(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIOPSTiers", reflect.TypeOf((*MockECloudService)(nil).GetIOPSTiers), arg0)
}

// GetIOPSTiersPaginated mocks base method.
func (m *MockECloudService) GetIOPSTiersPaginated(arg0 connection.APIRequestParameters) (*connection.Paginated[ecloud.IOPSTier], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetIOPSTiersPaginated", arg0)
	ret0, _ := ret[0].(*connection.Paginated[ecloud.IOPSTier])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetIOPSTiersPaginated indicates an expected call of GetIOPSTiersPaginated.
func (mr *MockECloudServiceMockRecorder) GetIOPSTiersPaginated(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIOPSTiersPaginated", reflect.TypeOf((*MockECloudService)(nil).GetIOPSTiersPaginated), arg0)
}

// GetIPAddress mocks base method.
func (m *MockECloudService) GetIPAddress(arg0 string) (ecloud.IPAddress, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetIPAddress", arg0)
	ret0, _ := ret[0].(ecloud.IPAddress)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetIPAddress indicates an expected call of GetIPAddress.
func (mr *MockECloudServiceMockRecorder) GetIPAddress(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIPAddress", reflect.TypeOf((*MockECloudService)(nil).GetIPAddress), arg0)
}

// GetIPAddresses mocks base method.
func (m *MockECloudService) GetIPAddresses(arg0 connection.APIRequestParameters) ([]ecloud.IPAddress, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetIPAddresses", arg0)
	ret0, _ := ret[0].([]ecloud.IPAddress)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetIPAddresses indicates an expected call of GetIPAddresses.
func (mr *MockECloudServiceMockRecorder) GetIPAddresses(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIPAddresses", reflect.TypeOf((*MockECloudService)(nil).GetIPAddresses), arg0)
}

// GetIPAddressesPaginated mocks base method.
func (m *MockECloudService) GetIPAddressesPaginated(arg0 connection.APIRequestParameters) (*connection.Paginated[ecloud.IPAddress], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetIPAddressesPaginated", arg0)
	ret0, _ := ret[0].(*connection.Paginated[ecloud.IPAddress])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetIPAddressesPaginated indicates an expected call of GetIPAddressesPaginated.
func (mr *MockECloudServiceMockRecorder) GetIPAddressesPaginated(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIPAddressesPaginated", reflect.TypeOf((*MockECloudService)(nil).GetIPAddressesPaginated), arg0)
}

// GetImage mocks base method.
func (m *MockECloudService) GetImage(arg0 string) (ecloud.Image, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetImage", arg0)
	ret0, _ := ret[0].(ecloud.Image)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetImage indicates an expected call of GetImage.
func (mr *MockECloudServiceMockRecorder) GetImage(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetImage", reflect.TypeOf((*MockECloudService)(nil).GetImage), arg0)
}

// GetImageMetadata mocks base method.
func (m *MockECloudService) GetImageMetadata(arg0 string, arg1 connection.APIRequestParameters) ([]ecloud.ImageMetadata, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetImageMetadata", arg0, arg1)
	ret0, _ := ret[0].([]ecloud.ImageMetadata)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetImageMetadata indicates an expected call of GetImageMetadata.
func (mr *MockECloudServiceMockRecorder) GetImageMetadata(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetImageMetadata", reflect.TypeOf((*MockECloudService)(nil).GetImageMetadata), arg0, arg1)
}

// GetImageMetadataPaginated mocks base method.
func (m *MockECloudService) GetImageMetadataPaginated(arg0 string, arg1 connection.APIRequestParameters) (*connection.Paginated[ecloud.ImageMetadata], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetImageMetadataPaginated", arg0, arg1)
	ret0, _ := ret[0].(*connection.Paginated[ecloud.ImageMetadata])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetImageMetadataPaginated indicates an expected call of GetImageMetadataPaginated.
func (mr *MockECloudServiceMockRecorder) GetImageMetadataPaginated(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetImageMetadataPaginated", reflect.TypeOf((*MockECloudService)(nil).GetImageMetadataPaginated), arg0, arg1)
}

// GetImageParameters mocks base method.
func (m *MockECloudService) GetImageParameters(arg0 string, arg1 connection.APIRequestParameters) ([]ecloud.ImageParameter, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetImageParameters", arg0, arg1)
	ret0, _ := ret[0].([]ecloud.ImageParameter)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetImageParameters indicates an expected call of GetImageParameters.
func (mr *MockECloudServiceMockRecorder) GetImageParameters(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetImageParameters", reflect.TypeOf((*MockECloudService)(nil).GetImageParameters), arg0, arg1)
}

// GetImageParametersPaginated mocks base method.
func (m *MockECloudService) GetImageParametersPaginated(arg0 string, arg1 connection.APIRequestParameters) (*connection.Paginated[ecloud.ImageParameter], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetImageParametersPaginated", arg0, arg1)
	ret0, _ := ret[0].(*connection.Paginated[ecloud.ImageParameter])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetImageParametersPaginated indicates an expected call of GetImageParametersPaginated.
func (mr *MockECloudServiceMockRecorder) GetImageParametersPaginated(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetImageParametersPaginated", reflect.TypeOf((*MockECloudService)(nil).GetImageParametersPaginated), arg0, arg1)
}

// GetImages mocks base method.
func (m *MockECloudService) GetImages(arg0 connection.APIRequestParameters) ([]ecloud.Image, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetImages", arg0)
	ret0, _ := ret[0].([]ecloud.Image)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetImages indicates an expected call of GetImages.
func (mr *MockECloudServiceMockRecorder) GetImages(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetImages", reflect.TypeOf((*MockECloudService)(nil).GetImages), arg0)
}

// GetImagesPaginated mocks base method.
func (m *MockECloudService) GetImagesPaginated(arg0 connection.APIRequestParameters) (*connection.Paginated[ecloud.Image], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetImagesPaginated", arg0)
	ret0, _ := ret[0].(*connection.Paginated[ecloud.Image])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetImagesPaginated indicates an expected call of GetImagesPaginated.
func (mr *MockECloudServiceMockRecorder) GetImagesPaginated(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetImagesPaginated", reflect.TypeOf((*MockECloudService)(nil).GetImagesPaginated), arg0)
}

// GetInstance mocks base method.
func (m *MockECloudService) GetInstance(arg0 string) (ecloud.Instance, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInstance", arg0)
	ret0, _ := ret[0].(ecloud.Instance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInstance indicates an expected call of GetInstance.
func (mr *MockECloudServiceMockRecorder) GetInstance(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInstance", reflect.TypeOf((*MockECloudService)(nil).GetInstance), arg0)
}

// GetInstanceCredentials mocks base method.
func (m *MockECloudService) GetInstanceCredentials(arg0 string, arg1 connection.APIRequestParameters) ([]ecloud.Credential, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInstanceCredentials", arg0, arg1)
	ret0, _ := ret[0].([]ecloud.Credential)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInstanceCredentials indicates an expected call of GetInstanceCredentials.
func (mr *MockECloudServiceMockRecorder) GetInstanceCredentials(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInstanceCredentials", reflect.TypeOf((*MockECloudService)(nil).GetInstanceCredentials), arg0, arg1)
}

// GetInstanceCredentialsPaginated mocks base method.
func (m *MockECloudService) GetInstanceCredentialsPaginated(arg0 string, arg1 connection.APIRequestParameters) (*connection.Paginated[ecloud.Credential], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInstanceCredentialsPaginated", arg0, arg1)
	ret0, _ := ret[0].(*connection.Paginated[ecloud.Credential])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInstanceCredentialsPaginated indicates an expected call of GetInstanceCredentialsPaginated.
func (mr *MockECloudServiceMockRecorder) GetInstanceCredentialsPaginated(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInstanceCredentialsPaginated", reflect.TypeOf((*MockECloudService)(nil).GetInstanceCredentialsPaginated), arg0, arg1)
}

// GetInstanceFloatingIPs mocks base method.
func (m *MockECloudService) GetInstanceFloatingIPs(arg0 string, arg1 connection.APIRequestParameters) ([]ecloud.FloatingIP, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInstanceFloatingIPs", arg0, arg1)
	ret0, _ := ret[0].([]ecloud.FloatingIP)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInstanceFloatingIPs indicates an expected call of GetInstanceFloatingIPs.
func (mr *MockECloudServiceMockRecorder) GetInstanceFloatingIPs(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInstanceFloatingIPs", reflect.TypeOf((*MockECloudService)(nil).GetInstanceFloatingIPs), arg0, arg1)
}

// GetInstanceFloatingIPsPaginated mocks base method.
func (m *MockECloudService) GetInstanceFloatingIPsPaginated(arg0 string, arg1 connection.APIRequestParameters) (*connection.Paginated[ecloud.FloatingIP], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInstanceFloatingIPsPaginated", arg0, arg1)
	ret0, _ := ret[0].(*connection.Paginated[ecloud.FloatingIP])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInstanceFloatingIPsPaginated indicates an expected call of GetInstanceFloatingIPsPaginated.
func (mr *MockECloudServiceMockRecorder) GetInstanceFloatingIPsPaginated(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInstanceFloatingIPsPaginated", reflect.TypeOf((*MockECloudService)(nil).GetInstanceFloatingIPsPaginated), arg0, arg1)
}

// GetInstanceNICs mocks base method.
func (m *MockECloudService) GetInstanceNICs(arg0 string, arg1 connection.APIRequestParameters) ([]ecloud.NIC, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInstanceNICs", arg0, arg1)
	ret0, _ := ret[0].([]ecloud.NIC)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInstanceNICs indicates an expected call of GetInstanceNICs.
func (mr *MockECloudServiceMockRecorder) GetInstanceNICs(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInstanceNICs", reflect.TypeOf((*MockECloudService)(nil).GetInstanceNICs), arg0, arg1)
}

// GetInstanceNICsPaginated mocks base method.
func (m *MockECloudService) GetInstanceNICsPaginated(arg0 string, arg1 connection.APIRequestParameters) (*connection.Paginated[ecloud.NIC], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInstanceNICsPaginated", arg0, arg1)
	ret0, _ := ret[0].(*connection.Paginated[ecloud.NIC])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInstanceNICsPaginated indicates an expected call of GetInstanceNICsPaginated.
func (mr *MockECloudServiceMockRecorder) GetInstanceNICsPaginated(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInstanceNICsPaginated", reflect.TypeOf((*MockECloudService)(nil).GetInstanceNICsPaginated), arg0, arg1)
}

// GetInstanceTasks mocks base method.
func (m *MockECloudService) GetInstanceTasks(arg0 string, arg1 connection.APIRequestParameters) ([]ecloud.Task, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInstanceTasks", arg0, arg1)
	ret0, _ := ret[0].([]ecloud.Task)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInstanceTasks indicates an expected call of GetInstanceTasks.
func (mr *MockECloudServiceMockRecorder) GetInstanceTasks(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInstanceTasks", reflect.TypeOf((*MockECloudService)(nil).GetInstanceTasks), arg0, arg1)
}

// GetInstanceTasksPaginated mocks base method.
func (m *MockECloudService) GetInstanceTasksPaginated(arg0 string, arg1 connection.APIRequestParameters) (*connection.Paginated[ecloud.Task], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInstanceTasksPaginated", arg0, arg1)
	ret0, _ := ret[0].(*connection.Paginated[ecloud.Task])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInstanceTasksPaginated indicates an expected call of GetInstanceTasksPaginated.
func (mr *MockECloudServiceMockRecorder) GetInstanceTasksPaginated(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInstanceTasksPaginated", reflect.TypeOf((*MockECloudService)(nil).GetInstanceTasksPaginated), arg0, arg1)
}

// GetInstanceVolumes mocks base method.
func (m *MockECloudService) GetInstanceVolumes(arg0 string, arg1 connection.APIRequestParameters) ([]ecloud.Volume, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInstanceVolumes", arg0, arg1)
	ret0, _ := ret[0].([]ecloud.Volume)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInstanceVolumes indicates an expected call of GetInstanceVolumes.
func (mr *MockECloudServiceMockRecorder) GetInstanceVolumes(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInstanceVolumes", reflect.TypeOf((*MockECloudService)(nil).GetInstanceVolumes), arg0, arg1)
}

// GetInstanceVolumesPaginated mocks base method.
func (m *MockECloudService) GetInstanceVolumesPaginated(arg0 string, arg1 connection.APIRequestParameters) (*connection.Paginated[ecloud.Volume], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInstanceVolumesPaginated", arg0, arg1)
	ret0, _ := ret[0].(*connection.Paginated[ecloud.Volume])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInstanceVolumesPaginated indicates an expected call of GetInstanceVolumesPaginated.
func (mr *MockECloudServiceMockRecorder) GetInstanceVolumesPaginated(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInstanceVolumesPaginated", reflect.TypeOf((*MockECloudService)(nil).GetInstanceVolumesPaginated), arg0, arg1)
}

// GetInstances mocks base method.
func (m *MockECloudService) GetInstances(arg0 connection.APIRequestParameters) ([]ecloud.Instance, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInstances", arg0)
	ret0, _ := ret[0].([]ecloud.Instance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInstances indicates an expected call of GetInstances.
func (mr *MockECloudServiceMockRecorder) GetInstances(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInstances", reflect.TypeOf((*MockECloudService)(nil).GetInstances), arg0)
}

// GetInstancesPaginated mocks base method.
func (m *MockECloudService) GetInstancesPaginated(arg0 connection.APIRequestParameters) (*connection.Paginated[ecloud.Instance], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInstancesPaginated", arg0)
	ret0, _ := ret[0].(*connection.Paginated[ecloud.Instance])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInstancesPaginated indicates an expected call of GetInstancesPaginated.
func (mr *MockECloudServiceMockRecorder) GetInstancesPaginated(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInstancesPaginated", reflect.TypeOf((*MockECloudService)(nil).GetInstancesPaginated), arg0)
}

// GetLoadBalancer mocks base method.
func (m *MockECloudService) GetLoadBalancer(arg0 string) (ecloud.LoadBalancer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLoadBalancer", arg0)
	ret0, _ := ret[0].(ecloud.LoadBalancer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLoadBalancer indicates an expected call of GetLoadBalancer.
func (mr *MockECloudServiceMockRecorder) GetLoadBalancer(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLoadBalancer", reflect.TypeOf((*MockECloudService)(nil).GetLoadBalancer), arg0)
}

// GetLoadBalancerSpec mocks base method.
func (m *MockECloudService) GetLoadBalancerSpec(arg0 string) (ecloud.LoadBalancerSpec, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLoadBalancerSpec", arg0)
	ret0, _ := ret[0].(ecloud.LoadBalancerSpec)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLoadBalancerSpec indicates an expected call of GetLoadBalancerSpec.
func (mr *MockECloudServiceMockRecorder) GetLoadBalancerSpec(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLoadBalancerSpec", reflect.TypeOf((*MockECloudService)(nil).GetLoadBalancerSpec), arg0)
}

// GetLoadBalancerSpecs mocks base method.
func (m *MockECloudService) GetLoadBalancerSpecs(arg0 connection.APIRequestParameters) ([]ecloud.LoadBalancerSpec, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLoadBalancerSpecs", arg0)
	ret0, _ := ret[0].([]ecloud.LoadBalancerSpec)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLoadBalancerSpecs indicates an expected call of GetLoadBalancerSpecs.
func (mr *MockECloudServiceMockRecorder) GetLoadBalancerSpecs(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLoadBalancerSpecs", reflect.TypeOf((*MockECloudService)(nil).GetLoadBalancerSpecs), arg0)
}

// GetLoadBalancerSpecsPaginated mocks base method.
func (m *MockECloudService) GetLoadBalancerSpecsPaginated(arg0 connection.APIRequestParameters) (*connection.Paginated[ecloud.LoadBalancerSpec], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLoadBalancerSpecsPaginated", arg0)
	ret0, _ := ret[0].(*connection.Paginated[ecloud.LoadBalancerSpec])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLoadBalancerSpecsPaginated indicates an expected call of GetLoadBalancerSpecsPaginated.
func (mr *MockECloudServiceMockRecorder) GetLoadBalancerSpecsPaginated(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLoadBalancerSpecsPaginated", reflect.TypeOf((*MockECloudService)(nil).GetLoadBalancerSpecsPaginated), arg0)
}

// GetLoadBalancers mocks base method.
func (m *MockECloudService) GetLoadBalancers(arg0 connection.APIRequestParameters) ([]ecloud.LoadBalancer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLoadBalancers", arg0)
	ret0, _ := ret[0].([]ecloud.LoadBalancer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLoadBalancers indicates an expected call of GetLoadBalancers.
func (mr *MockECloudServiceMockRecorder) GetLoadBalancers(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLoadBalancers", reflect.TypeOf((*MockECloudService)(nil).GetLoadBalancers), arg0)
}

// GetLoadBalancersPaginated mocks base method.
func (m *MockECloudService) GetLoadBalancersPaginated(arg0 connection.APIRequestParameters) (*connection.Paginated[ecloud.LoadBalancer], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLoadBalancersPaginated", arg0)
	ret0, _ := ret[0].(*connection.Paginated[ecloud.LoadBalancer])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLoadBalancersPaginated indicates an expected call of GetLoadBalancersPaginated.
func (mr *MockECloudServiceMockRecorder) GetLoadBalancersPaginated(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLoadBalancersPaginated", reflect.TypeOf((*MockECloudService)(nil).GetLoadBalancersPaginated), arg0)
}

// GetMonitoringGateway mocks base method.
func (m *MockECloudService) GetMonitoringGateway(arg0 string) (ecloud.MonitoringGateway, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMonitoringGateway", arg0)
	ret0, _ := ret[0].(ecloud.MonitoringGateway)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMonitoringGateway indicates an expected call of GetMonitoringGateway.
func (mr *MockECloudServiceMockRecorder) GetMonitoringGateway(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMonitoringGateway", reflect.TypeOf((*MockECloudService)(nil).GetMonitoringGateway), arg0)
}

// GetMonitoringGateways mocks base method.
func (m *MockECloudService) GetMonitoringGateways(arg0 connection.APIRequestParameters) ([]ecloud.MonitoringGateway, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMonitoringGateways", arg0)
	ret0, _ := ret[0].([]ecloud.MonitoringGateway)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMonitoringGateways indicates an expected call of GetMonitoringGateways.
func (mr *MockECloudServiceMockRecorder) GetMonitoringGateways(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMonitoringGateways", reflect.TypeOf((*MockECloudService)(nil).GetMonitoringGateways), arg0)
}

// GetMonitoringGatewaysPaginated mocks base method.
func (m *MockECloudService) GetMonitoringGatewaysPaginated(arg0 connection.APIRequestParameters) (*connection.Paginated[ecloud.MonitoringGateway], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMonitoringGatewaysPaginated", arg0)
	ret0, _ := ret[0].(*connection.Paginated[ecloud.MonitoringGateway])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMonitoringGatewaysPaginated indicates an expected call of GetMonitoringGatewaysPaginated.
func (mr *MockECloudServiceMockRecorder) GetMonitoringGatewaysPaginated(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMonitoringGatewaysPaginated", reflect.TypeOf((*MockECloudService)(nil).GetMonitoringGatewaysPaginated), arg0)
}

// GetNATOverloadRule mocks base method.
func (m *MockECloudService) GetNATOverloadRule(arg0 string) (ecloud.NATOverloadRule, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNATOverloadRule", arg0)
	ret0, _ := ret[0].(ecloud.NATOverloadRule)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNATOverloadRule indicates an expected call of GetNATOverloadRule.
func (mr *MockECloudServiceMockRecorder) GetNATOverloadRule(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNATOverloadRule", reflect.TypeOf((*MockECloudService)(nil).GetNATOverloadRule), arg0)
}

// GetNATOverloadRules mocks base method.
func (m *MockECloudService) GetNATOverloadRules(arg0 connection.APIRequestParameters) ([]ecloud.NATOverloadRule, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNATOverloadRules", arg0)
	ret0, _ := ret[0].([]ecloud.NATOverloadRule)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNATOverloadRules indicates an expected call of GetNATOverloadRules.
func (mr *MockECloudServiceMockRecorder) GetNATOverloadRules(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNATOverloadRules", reflect.TypeOf((*MockECloudService)(nil).GetNATOverloadRules), arg0)
}

// GetNATOverloadRulesPaginated mocks base method.
func (m *MockECloudService) GetNATOverloadRulesPaginated(arg0 connection.APIRequestParameters) (*connection.Paginated[ecloud.NATOverloadRule], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNATOverloadRulesPaginated", arg0)
	ret0, _ := ret[0].(*connection.Paginated[ecloud.NATOverloadRule])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNATOverloadRulesPaginated indicates an expected call of GetNATOverloadRulesPaginated.
func (mr *MockECloudServiceMockRecorder) GetNATOverloadRulesPaginated(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNATOverloadRulesPaginated", reflect.TypeOf((*MockECloudService)(nil).GetNATOverloadRulesPaginated), arg0)
}

// GetNIC mocks base method.
func (m *MockECloudService) GetNIC(arg0 string) (ecloud.NIC, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNIC", arg0)
	ret0, _ := ret[0].(ecloud.NIC)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNIC indicates an expected call of GetNIC.
func (mr *MockECloudServiceMockRecorder) GetNIC(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNIC", reflect.TypeOf((*MockECloudService)(nil).GetNIC), arg0)
}

// GetNICIPAddresses mocks base method.
func (m *MockECloudService) GetNICIPAddresses(arg0 string, arg1 connection.APIRequestParameters) ([]ecloud.IPAddress, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNICIPAddresses", arg0, arg1)
	ret0, _ := ret[0].([]ecloud.IPAddress)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNICIPAddresses indicates an expected call of GetNICIPAddresses.
func (mr *MockECloudServiceMockRecorder) GetNICIPAddresses(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNICIPAddresses", reflect.TypeOf((*MockECloudService)(nil).GetNICIPAddresses), arg0, arg1)
}

// GetNICIPAddressesPaginated mocks base method.
func (m *MockECloudService) GetNICIPAddressesPaginated(arg0 string, arg1 connection.APIRequestParameters) (*connection.Paginated[ecloud.IPAddress], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNICIPAddressesPaginated", arg0, arg1)
	ret0, _ := ret[0].(*connection.Paginated[ecloud.IPAddress])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNICIPAddressesPaginated indicates an expected call of GetNICIPAddressesPaginated.
func (mr *MockECloudServiceMockRecorder) GetNICIPAddressesPaginated(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNICIPAddressesPaginated", reflect.TypeOf((*MockECloudService)(nil).GetNICIPAddressesPaginated), arg0, arg1)
}

// GetNICTasks mocks base method.
func (m *MockECloudService) GetNICTasks(arg0 string, arg1 connection.APIRequestParameters) ([]ecloud.Task, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNICTasks", arg0, arg1)
	ret0, _ := ret[0].([]ecloud.Task)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNICTasks indicates an expected call of GetNICTasks.
func (mr *MockECloudServiceMockRecorder) GetNICTasks(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNICTasks", reflect.TypeOf((*MockECloudService)(nil).GetNICTasks), arg0, arg1)
}

// GetNICTasksPaginated mocks base method.
func (m *MockECloudService) GetNICTasksPaginated(arg0 string, arg1 connection.APIRequestParameters) (*connection.Paginated[ecloud.Task], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNICTasksPaginated", arg0, arg1)
	ret0, _ := ret[0].(*connection.Paginated[ecloud.Task])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNICTasksPaginated indicates an expected call of GetNICTasksPaginated.
func (mr *MockECloudServiceMockRecorder) GetNICTasksPaginated(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNICTasksPaginated", reflect.TypeOf((*MockECloudService)(nil).GetNICTasksPaginated), arg0, arg1)
}

// GetNICs mocks base method.
func (m *MockECloudService) GetNICs(arg0 connection.APIRequestParameters) ([]ecloud.NIC, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNICs", arg0)
	ret0, _ := ret[0].([]ecloud.NIC)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNICs indicates an expected call of GetNICs.
func (mr *MockECloudServiceMockRecorder) GetNICs(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNICs", reflect.TypeOf((*MockECloudService)(nil).GetNICs), arg0)
}

// GetNICsPaginated mocks base method.
func (m *MockECloudService) GetNICsPaginated(arg0 connection.APIRequestParameters) (*connection.Paginated[ecloud.NIC], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNICsPaginated", arg0)
	ret0, _ := ret[0].(*connection.Paginated[ecloud.NIC])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNICsPaginated indicates an expected call of GetNICsPaginated.
func (mr *MockECloudServiceMockRecorder) GetNICsPaginated(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNICsPaginated", reflect.TypeOf((*MockECloudService)(nil).GetNICsPaginated), arg0)
}

// GetNetwork mocks base method.
func (m *MockECloudService) GetNetwork(arg0 string) (ecloud.Network, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNetwork", arg0)
	ret0, _ := ret[0].(ecloud.Network)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNetwork indicates an expected call of GetNetwork.
func (mr *MockECloudServiceMockRecorder) GetNetwork(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNetwork", reflect.TypeOf((*MockECloudService)(nil).GetNetwork), arg0)
}

// GetNetworkNICs mocks base method.
func (m *MockECloudService) GetNetworkNICs(arg0 string, arg1 connection.APIRequestParameters) ([]ecloud.NIC, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNetworkNICs", arg0, arg1)
	ret0, _ := ret[0].([]ecloud.NIC)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNetworkNICs indicates an expected call of GetNetworkNICs.
func (mr *MockECloudServiceMockRecorder) GetNetworkNICs(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNetworkNICs", reflect.TypeOf((*MockECloudService)(nil).GetNetworkNICs), arg0, arg1)
}

// GetNetworkNICsPaginated mocks base method.
func (m *MockECloudService) GetNetworkNICsPaginated(arg0 string, arg1 connection.APIRequestParameters) (*connection.Paginated[ecloud.NIC], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNetworkNICsPaginated", arg0, arg1)
	ret0, _ := ret[0].(*connection.Paginated[ecloud.NIC])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNetworkNICsPaginated indicates an expected call of GetNetworkNICsPaginated.
func (mr *MockECloudServiceMockRecorder) GetNetworkNICsPaginated(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNetworkNICsPaginated", reflect.TypeOf((*MockECloudService)(nil).GetNetworkNICsPaginated), arg0, arg1)
}

// GetNetworkPolicies mocks base method.
func (m *MockECloudService) GetNetworkPolicies(arg0 connection.APIRequestParameters) ([]ecloud.NetworkPolicy, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNetworkPolicies", arg0)
	ret0, _ := ret[0].([]ecloud.NetworkPolicy)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNetworkPolicies indicates an expected call of GetNetworkPolicies.
func (mr *MockECloudServiceMockRecorder) GetNetworkPolicies(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNetworkPolicies", reflect.TypeOf((*MockECloudService)(nil).GetNetworkPolicies), arg0)
}

// GetNetworkPoliciesPaginated mocks base method.
func (m *MockECloudService) GetNetworkPoliciesPaginated(arg0 connection.APIRequestParameters) (*connection.Paginated[ecloud.NetworkPolicy], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNetworkPoliciesPaginated", arg0)
	ret0, _ := ret[0].(*connection.Paginated[ecloud.NetworkPolicy])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNetworkPoliciesPaginated indicates an expected call of GetNetworkPoliciesPaginated.
func (mr *MockECloudServiceMockRecorder) GetNetworkPoliciesPaginated(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNetworkPoliciesPaginated", reflect.TypeOf((*MockECloudService)(nil).GetNetworkPoliciesPaginated), arg0)
}

// GetNetworkPolicy mocks base method.
func (m *MockECloudService) GetNetworkPolicy(arg0 string) (ecloud.NetworkPolicy, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNetworkPolicy", arg0)
	ret0, _ := ret[0].(ecloud.NetworkPolicy)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNetworkPolicy indicates an expected call of GetNetworkPolicy.
func (mr *MockECloudServiceMockRecorder) GetNetworkPolicy(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNetworkPolicy", reflect.TypeOf((*MockECloudService)(nil).GetNetworkPolicy), arg0)
}

// GetNetworkPolicyNetworkRules mocks base method.
func (m *MockECloudService) GetNetworkPolicyNetworkRules(arg0 string, arg1 connection.APIRequestParameters) ([]ecloud.NetworkRule, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNetworkPolicyNetworkRules", arg0, arg1)
	ret0, _ := ret[0].([]ecloud.NetworkRule)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNetworkPolicyNetworkRules indicates an expected call of GetNetworkPolicyNetworkRules.
func (mr *MockECloudServiceMockRecorder) GetNetworkPolicyNetworkRules(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNetworkPolicyNetworkRules", reflect.TypeOf((*MockECloudService)(nil).GetNetworkPolicyNetworkRules), arg0, arg1)
}

// GetNetworkPolicyNetworkRulesPaginated mocks base method.
func (m *MockECloudService) GetNetworkPolicyNetworkRulesPaginated(arg0 string, arg1 connection.APIRequestParameters) (*connection.Paginated[ecloud.NetworkRule], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNetworkPolicyNetworkRulesPaginated", arg0, arg1)
	ret0, _ := ret[0].(*connection.Paginated[ecloud.NetworkRule])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNetworkPolicyNetworkRulesPaginated indicates an expected call of GetNetworkPolicyNetworkRulesPaginated.
func (mr *MockECloudServiceMockRecorder) GetNetworkPolicyNetworkRulesPaginated(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNetworkPolicyNetworkRulesPaginated", reflect.TypeOf((*MockECloudService)(nil).GetNetworkPolicyNetworkRulesPaginated), arg0, arg1)
}

// GetNetworkPolicyTasks mocks base method.
func (m *MockECloudService) GetNetworkPolicyTasks(arg0 string, arg1 connection.APIRequestParameters) ([]ecloud.Task, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNetworkPolicyTasks", arg0, arg1)
	ret0, _ := ret[0].([]ecloud.Task)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNetworkPolicyTasks indicates an expected call of GetNetworkPolicyTasks.
func (mr *MockECloudServiceMockRecorder) GetNetworkPolicyTasks(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNetworkPolicyTasks", reflect.TypeOf((*MockECloudService)(nil).GetNetworkPolicyTasks), arg0, arg1)
}

// GetNetworkPolicyTasksPaginated mocks base method.
func (m *MockECloudService) GetNetworkPolicyTasksPaginated(arg0 string, arg1 connection.APIRequestParameters) (*connection.Paginated[ecloud.Task], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNetworkPolicyTasksPaginated", arg0, arg1)
	ret0, _ := ret[0].(*connection.Paginated[ecloud.Task])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNetworkPolicyTasksPaginated indicates an expected call of GetNetworkPolicyTasksPaginated.
func (mr *MockECloudServiceMockRecorder) GetNetworkPolicyTasksPaginated(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNetworkPolicyTasksPaginated", reflect.TypeOf((*MockECloudService)(nil).GetNetworkPolicyTasksPaginated), arg0, arg1)
}

// GetNetworkRule mocks base method.
func (m *MockECloudService) GetNetworkRule(arg0 string) (ecloud.NetworkRule, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNetworkRule", arg0)
	ret0, _ := ret[0].(ecloud.NetworkRule)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNetworkRule indicates an expected call of GetNetworkRule.
func (mr *MockECloudServiceMockRecorder) GetNetworkRule(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNetworkRule", reflect.TypeOf((*MockECloudService)(nil).GetNetworkRule), arg0)
}

// GetNetworkRuleNetworkRulePorts mocks base method.
func (m *MockECloudService) GetNetworkRuleNetworkRulePorts(arg0 string, arg1 connection.APIRequestParameters) ([]ecloud.NetworkRulePort, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNetworkRuleNetworkRulePorts", arg0, arg1)
	ret0, _ := ret[0].([]ecloud.NetworkRulePort)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNetworkRuleNetworkRulePorts indicates an expected call of GetNetworkRuleNetworkRulePorts.
func (mr *MockECloudServiceMockRecorder) GetNetworkRuleNetworkRulePorts(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNetworkRuleNetworkRulePorts", reflect.TypeOf((*MockECloudService)(nil).GetNetworkRuleNetworkRulePorts), arg0, arg1)
}

// GetNetworkRuleNetworkRulePortsPaginated mocks base method.
func (m *MockECloudService) GetNetworkRuleNetworkRulePortsPaginated(arg0 string, arg1 connection.APIRequestParameters) (*connection.Paginated[ecloud.NetworkRulePort], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNetworkRuleNetworkRulePortsPaginated", arg0, arg1)
	ret0, _ := ret[0].(*connection.Paginated[ecloud.NetworkRulePort])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNetworkRuleNetworkRulePortsPaginated indicates an expected call of GetNetworkRuleNetworkRulePortsPaginated.
func (mr *MockECloudServiceMockRecorder) GetNetworkRuleNetworkRulePortsPaginated(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNetworkRuleNetworkRulePortsPaginated", reflect.TypeOf((*MockECloudService)(nil).GetNetworkRuleNetworkRulePortsPaginated), arg0, arg1)
}

// GetNetworkRulePort mocks base method.
func (m *MockECloudService) GetNetworkRulePort(arg0 string) (ecloud.NetworkRulePort, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNetworkRulePort", arg0)
	ret0, _ := ret[0].(ecloud.NetworkRulePort)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNetworkRulePort indicates an expected call of GetNetworkRulePort.
func (mr *MockECloudServiceMockRecorder) GetNetworkRulePort(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNetworkRulePort", reflect.TypeOf((*MockECloudService)(nil).GetNetworkRulePort), arg0)
}

// GetNetworkRulePorts mocks base method.
func (m *MockECloudService) GetNetworkRulePorts(arg0 connection.APIRequestParameters) ([]ecloud.NetworkRulePort, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNetworkRulePorts", arg0)
	ret0, _ := ret[0].([]ecloud.NetworkRulePort)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNetworkRulePorts indicates an expected call of GetNetworkRulePorts.
func (mr *MockECloudServiceMockRecorder) GetNetworkRulePorts(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNetworkRulePorts", reflect.TypeOf((*MockECloudService)(nil).GetNetworkRulePorts), arg0)
}

// GetNetworkRulePortsPaginated mocks base method.
func (m *MockECloudService) GetNetworkRulePortsPaginated(arg0 connection.APIRequestParameters) (*connection.Paginated[ecloud.NetworkRulePort], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNetworkRulePortsPaginated", arg0)
	ret0, _ := ret[0].(*connection.Paginated[ecloud.NetworkRulePort])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNetworkRulePortsPaginated indicates an expected call of GetNetworkRulePortsPaginated.
func (mr *MockECloudServiceMockRecorder) GetNetworkRulePortsPaginated(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNetworkRulePortsPaginated", reflect.TypeOf((*MockECloudService)(nil).GetNetworkRulePortsPaginated), arg0)
}

// GetNetworkRules mocks base method.
func (m *MockECloudService) GetNetworkRules(arg0 connection.APIRequestParameters) ([]ecloud.NetworkRule, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNetworkRules", arg0)
	ret0, _ := ret[0].([]ecloud.NetworkRule)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNetworkRules indicates an expected call of GetNetworkRules.
func (mr *MockECloudServiceMockRecorder) GetNetworkRules(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNetworkRules", reflect.TypeOf((*MockECloudService)(nil).GetNetworkRules), arg0)
}

// GetNetworkRulesPaginated mocks base method.
func (m *MockECloudService) GetNetworkRulesPaginated(arg0 connection.APIRequestParameters) (*connection.Paginated[ecloud.NetworkRule], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNetworkRulesPaginated", arg0)
	ret0, _ := ret[0].(*connection.Paginated[ecloud.NetworkRule])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNetworkRulesPaginated indicates an expected call of GetNetworkRulesPaginated.
func (mr *MockECloudServiceMockRecorder) GetNetworkRulesPaginated(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNetworkRulesPaginated", reflect.TypeOf((*MockECloudService)(nil).GetNetworkRulesPaginated), arg0)
}

// GetNetworkTasks mocks base method.
func (m *MockECloudService) GetNetworkTasks(arg0 string, arg1 connection.APIRequestParameters) ([]ecloud.Task, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNetworkTasks", arg0, arg1)
	ret0, _ := ret[0].([]ecloud.Task)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNetworkTasks indicates an expected call of GetNetworkTasks.
func (mr *MockECloudServiceMockRecorder) GetNetworkTasks(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNetworkTasks", reflect.TypeOf((*MockECloudService)(nil).GetNetworkTasks), arg0, arg1)
}

// GetNetworkTasksPaginated mocks base method.
func (m *MockECloudService) GetNetworkTasksPaginated(arg0 string, arg1 connection.APIRequestParameters) (*connection.Paginated[ecloud.Task], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNetworkTasksPaginated", arg0, arg1)
	ret0, _ := ret[0].(*connection.Paginated[ecloud.Task])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNetworkTasksPaginated indicates an expected call of GetNetworkTasksPaginated.
func (mr *MockECloudServiceMockRecorder) GetNetworkTasksPaginated(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNetworkTasksPaginated", reflect.TypeOf((*MockECloudService)(nil).GetNetworkTasksPaginated), arg0, arg1)
}

// GetNetworks mocks base method.
func (m *MockECloudService) GetNetworks(arg0 connection.APIRequestParameters) ([]ecloud.Network, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNetworks", arg0)
	ret0, _ := ret[0].([]ecloud.Network)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNetworks indicates an expected call of GetNetworks.
func (mr *MockECloudServiceMockRecorder) GetNetworks(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNetworks", reflect.TypeOf((*MockECloudService)(nil).GetNetworks), arg0)
}

// GetNetworksPaginated mocks base method.
func (m *MockECloudService) GetNetworksPaginated(arg0 connection.APIRequestParameters) (*connection.Paginated[ecloud.Network], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNetworksPaginated", arg0)
	ret0, _ := ret[0].(*connection.Paginated[ecloud.Network])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNetworksPaginated indicates an expected call of GetNetworksPaginated.
func (mr *MockECloudServiceMockRecorder) GetNetworksPaginated(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNetworksPaginated", reflect.TypeOf((*MockECloudService)(nil).GetNetworksPaginated), arg0)
}

// GetPod mocks base method.
func (m *MockECloudService) GetPod(arg0 int) (ecloud.Pod, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPod", arg0)
	ret0, _ := ret[0].(ecloud.Pod)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPod indicates an expected call of GetPod.
func (mr *MockECloudServiceMockRecorder) GetPod(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPod", reflect.TypeOf((*MockECloudService)(nil).GetPod), arg0)
}

// GetPodAppliances mocks base method.
func (m *MockECloudService) GetPodAppliances(arg0 int, arg1 connection.APIRequestParameters) ([]ecloud.Appliance, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPodAppliances", arg0, arg1)
	ret0, _ := ret[0].([]ecloud.Appliance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPodAppliances indicates an expected call of GetPodAppliances.
func (mr *MockECloudServiceMockRecorder) GetPodAppliances(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPodAppliances", reflect.TypeOf((*MockECloudService)(nil).GetPodAppliances), arg0, arg1)
}

// GetPodAppliancesPaginated mocks base method.
func (m *MockECloudService) GetPodAppliancesPaginated(arg0 int, arg1 connection.APIRequestParameters) (*connection.Paginated[ecloud.Appliance], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPodAppliancesPaginated", arg0, arg1)
	ret0, _ := ret[0].(*connection.Paginated[ecloud.Appliance])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPodAppliancesPaginated indicates an expected call of GetPodAppliancesPaginated.
func (mr *MockECloudServiceMockRecorder) GetPodAppliancesPaginated(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPodAppliancesPaginated", reflect.TypeOf((*MockECloudService)(nil).GetPodAppliancesPaginated), arg0, arg1)
}

// GetPodTemplate mocks base method.
func (m *MockECloudService) GetPodTemplate(arg0 int, arg1 string) (ecloud.Template, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPodTemplate", arg0, arg1)
	ret0, _ := ret[0].(ecloud.Template)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPodTemplate indicates an expected call of GetPodTemplate.
func (mr *MockECloudServiceMockRecorder) GetPodTemplate(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPodTemplate", reflect.TypeOf((*MockECloudService)(nil).GetPodTemplate), arg0, arg1)
}

// GetPodTemplates mocks base method.
func (m *MockECloudService) GetPodTemplates(arg0 int, arg1 connection.APIRequestParameters) ([]ecloud.Template, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPodTemplates", arg0, arg1)
	ret0, _ := ret[0].([]ecloud.Template)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPodTemplates indicates an expected call of GetPodTemplates.
func (mr *MockECloudServiceMockRecorder) GetPodTemplates(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPodTemplates", reflect.TypeOf((*MockECloudService)(nil).GetPodTemplates), arg0, arg1)
}

// GetPodTemplatesPaginated mocks base method.
func (m *MockECloudService) GetPodTemplatesPaginated(arg0 int, arg1 connection.APIRequestParameters) (*connection.Paginated[ecloud.Template], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPodTemplatesPaginated", arg0, arg1)
	ret0, _ := ret[0].(*connection.Paginated[ecloud.Template])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPodTemplatesPaginated indicates an expected call of GetPodTemplatesPaginated.
func (mr *MockECloudServiceMockRecorder) GetPodTemplatesPaginated(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPodTemplatesPaginated", reflect.TypeOf((*MockECloudService)(nil).GetPodTemplatesPaginated), arg0, arg1)
}

// GetPods mocks base method.
func (m *MockECloudService) GetPods(arg0 connection.APIRequestParameters) ([]ecloud.Pod, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPods", arg0)
	ret0, _ := ret[0].([]ecloud.Pod)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPods indicates an expected call of GetPods.
func (mr *MockECloudServiceMockRecorder) GetPods(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPods", reflect.TypeOf((*MockECloudService)(nil).GetPods), arg0)
}

// GetPodsPaginated mocks base method.
func (m *MockECloudService) GetPodsPaginated(arg0 connection.APIRequestParameters) (*connection.Paginated[ecloud.Pod], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPodsPaginated", arg0)
	ret0, _ := ret[0].(*connection.Paginated[ecloud.Pod])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPodsPaginated indicates an expected call of GetPodsPaginated.
func (mr *MockECloudServiceMockRecorder) GetPodsPaginated(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPodsPaginated", reflect.TypeOf((*MockECloudService)(nil).GetPodsPaginated), arg0)
}

// GetRegion mocks base method.
func (m *MockECloudService) GetRegion(arg0 string) (ecloud.Region, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRegion", arg0)
	ret0, _ := ret[0].(ecloud.Region)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRegion indicates an expected call of GetRegion.
func (mr *MockECloudServiceMockRecorder) GetRegion(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRegion", reflect.TypeOf((*MockECloudService)(nil).GetRegion), arg0)
}

// GetRegions mocks base method.
func (m *MockECloudService) GetRegions(arg0 connection.APIRequestParameters) ([]ecloud.Region, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRegions", arg0)
	ret0, _ := ret[0].([]ecloud.Region)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRegions indicates an expected call of GetRegions.
func (mr *MockECloudServiceMockRecorder) GetRegions(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRegions", reflect.TypeOf((*MockECloudService)(nil).GetRegions), arg0)
}

// GetRegionsPaginated mocks base method.
func (m *MockECloudService) GetRegionsPaginated(arg0 connection.APIRequestParameters) (*connection.Paginated[ecloud.Region], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRegionsPaginated", arg0)
	ret0, _ := ret[0].(*connection.Paginated[ecloud.Region])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRegionsPaginated indicates an expected call of GetRegionsPaginated.
func (mr *MockECloudServiceMockRecorder) GetRegionsPaginated(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRegionsPaginated", reflect.TypeOf((*MockECloudService)(nil).GetRegionsPaginated), arg0)
}

// GetResourceTier mocks base method.
func (m *MockECloudService) GetResourceTier(arg0 string) (ecloud.ResourceTier, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetResourceTier", arg0)
	ret0, _ := ret[0].(ecloud.ResourceTier)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetResourceTier indicates an expected call of GetResourceTier.
func (mr *MockECloudServiceMockRecorder) GetResourceTier(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetResourceTier", reflect.TypeOf((*MockECloudService)(nil).GetResourceTier), arg0)
}

// GetResourceTiers mocks base method.
func (m *MockECloudService) GetResourceTiers(arg0 connection.APIRequestParameters) ([]ecloud.ResourceTier, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetResourceTiers", arg0)
	ret0, _ := ret[0].([]ecloud.ResourceTier)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetResourceTiers indicates an expected call of GetResourceTiers.
func (mr *MockECloudServiceMockRecorder) GetResourceTiers(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetResourceTiers", reflect.TypeOf((*MockECloudService)(nil).GetResourceTiers), arg0)
}

// GetResourceTiersPaginated mocks base method.
func (m *MockECloudService) GetResourceTiersPaginated(arg0 connection.APIRequestParameters) (*connection.Paginated[ecloud.ResourceTier], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetResourceTiersPaginated", arg0)
	ret0, _ := ret[0].(*connection.Paginated[ecloud.ResourceTier])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetResourceTiersPaginated indicates an expected call of GetResourceTiersPaginated.
func (mr *MockECloudServiceMockRecorder) GetResourceTiersPaginated(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetResourceTiersPaginated", reflect.TypeOf((*MockECloudService)(nil).GetResourceTiersPaginated), arg0)
}

// GetRouter mocks base method.
func (m *MockECloudService) GetRouter(arg0 string) (ecloud.Router, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRouter", arg0)
	ret0, _ := ret[0].(ecloud.Router)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRouter indicates an expected call of GetRouter.
func (mr *MockECloudServiceMockRecorder) GetRouter(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRouter", reflect.TypeOf((*MockECloudService)(nil).GetRouter), arg0)
}

// GetRouterFirewallPolicies mocks base method.
func (m *MockECloudService) GetRouterFirewallPolicies(arg0 string, arg1 connection.APIRequestParameters) ([]ecloud.FirewallPolicy, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRouterFirewallPolicies", arg0, arg1)
	ret0, _ := ret[0].([]ecloud.FirewallPolicy)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRouterFirewallPolicies indicates an expected call of GetRouterFirewallPolicies.
func (mr *MockECloudServiceMockRecorder) GetRouterFirewallPolicies(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRouterFirewallPolicies", reflect.TypeOf((*MockECloudService)(nil).GetRouterFirewallPolicies), arg0, arg1)
}

// GetRouterFirewallPoliciesPaginated mocks base method.
func (m *MockECloudService) GetRouterFirewallPoliciesPaginated(arg0 string, arg1 connection.APIRequestParameters) (*connection.Paginated[ecloud.FirewallPolicy], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRouterFirewallPoliciesPaginated", arg0, arg1)
	ret0, _ := ret[0].(*connection.Paginated[ecloud.FirewallPolicy])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRouterFirewallPoliciesPaginated indicates an expected call of GetRouterFirewallPoliciesPaginated.
func (mr *MockECloudServiceMockRecorder) GetRouterFirewallPoliciesPaginated(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRouterFirewallPoliciesPaginated", reflect.TypeOf((*MockECloudService)(nil).GetRouterFirewallPoliciesPaginated), arg0, arg1)
}

// GetRouterNetworks mocks base method.
func (m *MockECloudService) GetRouterNetworks(arg0 string, arg1 connection.APIRequestParameters) ([]ecloud.Network, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRouterNetworks", arg0, arg1)
	ret0, _ := ret[0].([]ecloud.Network)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRouterNetworks indicates an expected call of GetRouterNetworks.
func (mr *MockECloudServiceMockRecorder) GetRouterNetworks(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRouterNetworks", reflect.TypeOf((*MockECloudService)(nil).GetRouterNetworks), arg0, arg1)
}

// GetRouterNetworksPaginated mocks base method.
func (m *MockECloudService) GetRouterNetworksPaginated(arg0 string, arg1 connection.APIRequestParameters) (*connection.Paginated[ecloud.Network], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRouterNetworksPaginated", arg0, arg1)
	ret0, _ := ret[0].(*connection.Paginated[ecloud.Network])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRouterNetworksPaginated indicates an expected call of GetRouterNetworksPaginated.
func (mr *MockECloudServiceMockRecorder) GetRouterNetworksPaginated(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRouterNetworksPaginated", reflect.TypeOf((*MockECloudService)(nil).GetRouterNetworksPaginated), arg0, arg1)
}

// GetRouterTasks mocks base method.
func (m *MockECloudService) GetRouterTasks(arg0 string, arg1 connection.APIRequestParameters) ([]ecloud.Task, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRouterTasks", arg0, arg1)
	ret0, _ := ret[0].([]ecloud.Task)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRouterTasks indicates an expected call of GetRouterTasks.
func (mr *MockECloudServiceMockRecorder) GetRouterTasks(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRouterTasks", reflect.TypeOf((*MockECloudService)(nil).GetRouterTasks), arg0, arg1)
}

// GetRouterTasksPaginated mocks base method.
func (m *MockECloudService) GetRouterTasksPaginated(arg0 string, arg1 connection.APIRequestParameters) (*connection.Paginated[ecloud.Task], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRouterTasksPaginated", arg0, arg1)
	ret0, _ := ret[0].(*connection.Paginated[ecloud.Task])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRouterTasksPaginated indicates an expected call of GetRouterTasksPaginated.
func (mr *MockECloudServiceMockRecorder) GetRouterTasksPaginated(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRouterTasksPaginated", reflect.TypeOf((*MockECloudService)(nil).GetRouterTasksPaginated), arg0, arg1)
}

// GetRouterThroughput mocks base method.
func (m *MockECloudService) GetRouterThroughput(arg0 string) (ecloud.RouterThroughput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRouterThroughput", arg0)
	ret0, _ := ret[0].(ecloud.RouterThroughput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRouterThroughput indicates an expected call of GetRouterThroughput.
func (mr *MockECloudServiceMockRecorder) GetRouterThroughput(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRouterThroughput", reflect.TypeOf((*MockECloudService)(nil).GetRouterThroughput), arg0)
}

// GetRouterThroughputs mocks base method.
func (m *MockECloudService) GetRouterThroughputs(arg0 connection.APIRequestParameters) ([]ecloud.RouterThroughput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRouterThroughputs", arg0)
	ret0, _ := ret[0].([]ecloud.RouterThroughput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRouterThroughputs indicates an expected call of GetRouterThroughputs.
func (mr *MockECloudServiceMockRecorder) GetRouterThroughputs(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRouterThroughputs", reflect.TypeOf((*MockECloudService)(nil).GetRouterThroughputs), arg0)
}

// GetRouterThroughputsPaginated mocks base method.
func (m *MockECloudService) GetRouterThroughputsPaginated(arg0 connection.APIRequestParameters) (*connection.Paginated[ecloud.RouterThroughput], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRouterThroughputsPaginated", arg0)
	ret0, _ := ret[0].(*connection.Paginated[ecloud.RouterThroughput])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRouterThroughputsPaginated indicates an expected call of GetRouterThroughputsPaginated.
func (mr *MockECloudServiceMockRecorder) GetRouterThroughputsPaginated(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRouterThroughputsPaginated", reflect.TypeOf((*MockECloudService)(nil).GetRouterThroughputsPaginated), arg0)
}

// GetRouterVPNs mocks base method.
func (m *MockECloudService) GetRouterVPNs(arg0 string, arg1 connection.APIRequestParameters) ([]ecloud.VPN, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRouterVPNs", arg0, arg1)
	ret0, _ := ret[0].([]ecloud.VPN)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRouterVPNs indicates an expected call of GetRouterVPNs.
func (mr *MockECloudServiceMockRecorder) GetRouterVPNs(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRouterVPNs", reflect.TypeOf((*MockECloudService)(nil).GetRouterVPNs), arg0, arg1)
}

// GetRouterVPNsPaginated mocks base method.
func (m *MockECloudService) GetRouterVPNsPaginated(arg0 string, arg1 connection.APIRequestParameters) (*connection.Paginated[ecloud.VPN], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRouterVPNsPaginated", arg0, arg1)
	ret0, _ := ret[0].(*connection.Paginated[ecloud.VPN])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRouterVPNsPaginated indicates an expected call of GetRouterVPNsPaginated.
func (mr *MockECloudServiceMockRecorder) GetRouterVPNsPaginated(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRouterVPNsPaginated", reflect.TypeOf((*MockECloudService)(nil).GetRouterVPNsPaginated), arg0, arg1)
}

// GetRouters mocks base method.
func (m *MockECloudService) GetRouters(arg0 connection.APIRequestParameters) ([]ecloud.Router, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRouters", arg0)
	ret0, _ := ret[0].([]ecloud.Router)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRouters indicates an expected call of GetRouters.
func (mr *MockECloudServiceMockRecorder) GetRouters(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRouters", reflect.TypeOf((*MockECloudService)(nil).GetRouters), arg0)
}

// GetRoutersPaginated mocks base method.
func (m *MockECloudService) GetRoutersPaginated(arg0 connection.APIRequestParameters) (*connection.Paginated[ecloud.Router], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRoutersPaginated", arg0)
	ret0, _ := ret[0].(*connection.Paginated[ecloud.Router])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRoutersPaginated indicates an expected call of GetRoutersPaginated.
func (mr *MockECloudServiceMockRecorder) GetRoutersPaginated(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRoutersPaginated", reflect.TypeOf((*MockECloudService)(nil).GetRoutersPaginated), arg0)
}

// GetSSHKeyPair mocks base method.
func (m *MockECloudService) GetSSHKeyPair(arg0 string) (ecloud.SSHKeyPair, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSSHKeyPair", arg0)
	ret0, _ := ret[0].(ecloud.SSHKeyPair)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSSHKeyPair indicates an expected call of GetSSHKeyPair.
func (mr *MockECloudServiceMockRecorder) GetSSHKeyPair(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSSHKeyPair", reflect.TypeOf((*MockECloudService)(nil).GetSSHKeyPair), arg0)
}

// GetSSHKeyPairs mocks base method.
func (m *MockECloudService) GetSSHKeyPairs(arg0 connection.APIRequestParameters) ([]ecloud.SSHKeyPair, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSSHKeyPairs", arg0)
	ret0, _ := ret[0].([]ecloud.SSHKeyPair)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSSHKeyPairs indicates an expected call of GetSSHKeyPairs.
func (mr *MockECloudServiceMockRecorder) GetSSHKeyPairs(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSSHKeyPairs", reflect.TypeOf((*MockECloudService)(nil).GetSSHKeyPairs), arg0)
}

// GetSSHKeyPairsPaginated mocks base method.
func (m *MockECloudService) GetSSHKeyPairsPaginated(arg0 connection.APIRequestParameters) (*connection.Paginated[ecloud.SSHKeyPair], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSSHKeyPairsPaginated", arg0)
	ret0, _ := ret[0].(*connection.Paginated[ecloud.SSHKeyPair])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSSHKeyPairsPaginated indicates an expected call of GetSSHKeyPairsPaginated.
func (mr *MockECloudServiceMockRecorder) GetSSHKeyPairsPaginated(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSSHKeyPairsPaginated", reflect.TypeOf((*MockECloudService)(nil).GetSSHKeyPairsPaginated), arg0)
}

// GetSite mocks base method.
func (m *MockECloudService) GetSite(arg0 int) (ecloud.Site, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSite", arg0)
	ret0, _ := ret[0].(ecloud.Site)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSite indicates an expected call of GetSite.
func (mr *MockECloudServiceMockRecorder) GetSite(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSite", reflect.TypeOf((*MockECloudService)(nil).GetSite), arg0)
}

// GetSites mocks base method.
func (m *MockECloudService) GetSites(arg0 connection.APIRequestParameters) ([]ecloud.Site, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSites", arg0)
	ret0, _ := ret[0].([]ecloud.Site)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSites indicates an expected call of GetSites.
func (mr *MockECloudServiceMockRecorder) GetSites(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSites", reflect.TypeOf((*MockECloudService)(nil).GetSites), arg0)
}

// GetSitesPaginated mocks base method.
func (m *MockECloudService) GetSitesPaginated(arg0 connection.APIRequestParameters) (*connection.Paginated[ecloud.Site], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSitesPaginated", arg0)
	ret0, _ := ret[0].(*connection.Paginated[ecloud.Site])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSitesPaginated indicates an expected call of GetSitesPaginated.
func (mr *MockECloudServiceMockRecorder) GetSitesPaginated(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSitesPaginated", reflect.TypeOf((*MockECloudService)(nil).GetSitesPaginated), arg0)
}

// GetSolution mocks base method.
func (m *MockECloudService) GetSolution(arg0 int) (ecloud.Solution, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSolution", arg0)
	ret0, _ := ret[0].(ecloud.Solution)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSolution indicates an expected call of GetSolution.
func (mr *MockECloudServiceMockRecorder) GetSolution(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSolution", reflect.TypeOf((*MockECloudService)(nil).GetSolution), arg0)
}

// GetSolutionDatastores mocks base method.
func (m *MockECloudService) GetSolutionDatastores(arg0 int, arg1 connection.APIRequestParameters) ([]ecloud.Datastore, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSolutionDatastores", arg0, arg1)
	ret0, _ := ret[0].([]ecloud.Datastore)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSolutionDatastores indicates an expected call of GetSolutionDatastores.
func (mr *MockECloudServiceMockRecorder) GetSolutionDatastores(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSolutionDatastores", reflect.TypeOf((*MockECloudService)(nil).GetSolutionDatastores), arg0, arg1)
}

// GetSolutionDatastoresPaginated mocks base method.
func (m *MockECloudService) GetSolutionDatastoresPaginated(arg0 int, arg1 connection.APIRequestParameters) (*connection.Paginated[ecloud.Datastore], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSolutionDatastoresPaginated", arg0, arg1)
	ret0, _ := ret[0].(*connection.Paginated[ecloud.Datastore])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSolutionDatastoresPaginated indicates an expected call of GetSolutionDatastoresPaginated.
func (mr *MockECloudServiceMockRecorder) GetSolutionDatastoresPaginated(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSolutionDatastoresPaginated", reflect.TypeOf((*MockECloudService)(nil).GetSolutionDatastoresPaginated), arg0, arg1)
}

// GetSolutionFirewalls mocks base method.
func (m *MockECloudService) GetSolutionFirewalls(arg0 int, arg1 connection.APIRequestParameters) ([]ecloud.Firewall, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSolutionFirewalls", arg0, arg1)
	ret0, _ := ret[0].([]ecloud.Firewall)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSolutionFirewalls indicates an expected call of GetSolutionFirewalls.
func (mr *MockECloudServiceMockRecorder) GetSolutionFirewalls(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSolutionFirewalls", reflect.TypeOf((*MockECloudService)(nil).GetSolutionFirewalls), arg0, arg1)
}

// GetSolutionFirewallsPaginated mocks base method.
func (m *MockECloudService) GetSolutionFirewallsPaginated(arg0 int, arg1 connection.APIRequestParameters) (*connection.Paginated[ecloud.Firewall], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSolutionFirewallsPaginated", arg0, arg1)
	ret0, _ := ret[0].(*connection.Paginated[ecloud.Firewall])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSolutionFirewallsPaginated indicates an expected call of GetSolutionFirewallsPaginated.
func (mr *MockECloudServiceMockRecorder) GetSolutionFirewallsPaginated(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSolutionFirewallsPaginated", reflect.TypeOf((*MockECloudService)(nil).GetSolutionFirewallsPaginated), arg0, arg1)
}

// GetSolutionHosts mocks base method.
func (m *MockECloudService) GetSolutionHosts(arg0 int, arg1 connection.APIRequestParameters) ([]ecloud.V1Host, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSolutionHosts", arg0, arg1)
	ret0, _ := ret[0].([]ecloud.V1Host)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSolutionHosts indicates an expected call of GetSolutionHosts.
func (mr *MockECloudServiceMockRecorder) GetSolutionHosts(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSolutionHosts", reflect.TypeOf((*MockECloudService)(nil).GetSolutionHosts), arg0, arg1)
}

// GetSolutionHostsPaginated mocks base method.
func (m *MockECloudService) GetSolutionHostsPaginated(arg0 int, arg1 connection.APIRequestParameters) (*connection.Paginated[ecloud.V1Host], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSolutionHostsPaginated", arg0, arg1)
	ret0, _ := ret[0].(*connection.Paginated[ecloud.V1Host])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSolutionHostsPaginated indicates an expected call of GetSolutionHostsPaginated.
func (mr *MockECloudServiceMockRecorder) GetSolutionHostsPaginated(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSolutionHostsPaginated", reflect.TypeOf((*MockECloudService)(nil).GetSolutionHostsPaginated), arg0, arg1)
}

// GetSolutionNetworks mocks base method.
func (m *MockECloudService) GetSolutionNetworks(arg0 int, arg1 connection.APIRequestParameters) ([]ecloud.V1Network, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSolutionNetworks", arg0, arg1)
	ret0, _ := ret[0].([]ecloud.V1Network)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSolutionNetworks indicates an expected call of GetSolutionNetworks.
func (mr *MockECloudServiceMockRecorder) GetSolutionNetworks(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSolutionNetworks", reflect.TypeOf((*MockECloudService)(nil).GetSolutionNetworks), arg0, arg1)
}

// GetSolutionNetworksPaginated mocks base method.
func (m *MockECloudService) GetSolutionNetworksPaginated(arg0 int, arg1 connection.APIRequestParameters) (*connection.Paginated[ecloud.V1Network], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSolutionNetworksPaginated", arg0, arg1)
	ret0, _ := ret[0].(*connection.Paginated[ecloud.V1Network])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSolutionNetworksPaginated indicates an expected call of GetSolutionNetworksPaginated.
func (mr *MockECloudServiceMockRecorder) GetSolutionNetworksPaginated(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSolutionNetworksPaginated", reflect.TypeOf((*MockECloudService)(nil).GetSolutionNetworksPaginated), arg0, arg1)
}

// GetSolutionSites mocks base method.
func (m *MockECloudService) GetSolutionSites(arg0 int, arg1 connection.APIRequestParameters) ([]ecloud.Site, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSolutionSites", arg0, arg1)
	ret0, _ := ret[0].([]ecloud.Site)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSolutionSites indicates an expected call of GetSolutionSites.
func (mr *MockECloudServiceMockRecorder) GetSolutionSites(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSolutionSites", reflect.TypeOf((*MockECloudService)(nil).GetSolutionSites), arg0, arg1)
}

// GetSolutionSitesPaginated mocks base method.
func (m *MockECloudService) GetSolutionSitesPaginated(arg0 int, arg1 connection.APIRequestParameters) (*connection.Paginated[ecloud.Site], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSolutionSitesPaginated", arg0, arg1)
	ret0, _ := ret[0].(*connection.Paginated[ecloud.Site])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSolutionSitesPaginated indicates an expected call of GetSolutionSitesPaginated.
func (mr *MockECloudServiceMockRecorder) GetSolutionSitesPaginated(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSolutionSitesPaginated", reflect.TypeOf((*MockECloudService)(nil).GetSolutionSitesPaginated), arg0, arg1)
}

// GetSolutionTag mocks base method.
func (m *MockECloudService) GetSolutionTag(arg0 int, arg1 string) (ecloud.TagV1, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSolutionTag", arg0, arg1)
	ret0, _ := ret[0].(ecloud.TagV1)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSolutionTag indicates an expected call of GetSolutionTag.
func (mr *MockECloudServiceMockRecorder) GetSolutionTag(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSolutionTag", reflect.TypeOf((*MockECloudService)(nil).GetSolutionTag), arg0, arg1)
}

// GetSolutionTags mocks base method.
func (m *MockECloudService) GetSolutionTags(arg0 int, arg1 connection.APIRequestParameters) ([]ecloud.TagV1, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSolutionTags", arg0, arg1)
	ret0, _ := ret[0].([]ecloud.TagV1)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSolutionTags indicates an expected call of GetSolutionTags.
func (mr *MockECloudServiceMockRecorder) GetSolutionTags(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSolutionTags", reflect.TypeOf((*MockECloudService)(nil).GetSolutionTags), arg0, arg1)
}

// GetSolutionTagsPaginated mocks base method.
func (m *MockECloudService) GetSolutionTagsPaginated(arg0 int, arg1 connection.APIRequestParameters) (*connection.Paginated[ecloud.TagV1], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSolutionTagsPaginated", arg0, arg1)
	ret0, _ := ret[0].(*connection.Paginated[ecloud.TagV1])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSolutionTagsPaginated indicates an expected call of GetSolutionTagsPaginated.
func (mr *MockECloudServiceMockRecorder) GetSolutionTagsPaginated(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSolutionTagsPaginated", reflect.TypeOf((*MockECloudService)(nil).GetSolutionTagsPaginated), arg0, arg1)
}

// GetSolutionTemplate mocks base method.
func (m *MockECloudService) GetSolutionTemplate(arg0 int, arg1 string) (ecloud.Template, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSolutionTemplate", arg0, arg1)
	ret0, _ := ret[0].(ecloud.Template)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSolutionTemplate indicates an expected call of GetSolutionTemplate.
func (mr *MockECloudServiceMockRecorder) GetSolutionTemplate(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSolutionTemplate", reflect.TypeOf((*MockECloudService)(nil).GetSolutionTemplate), arg0, arg1)
}

// GetSolutionTemplates mocks base method.
func (m *MockECloudService) GetSolutionTemplates(arg0 int, arg1 connection.APIRequestParameters) ([]ecloud.Template, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSolutionTemplates", arg0, arg1)
	ret0, _ := ret[0].([]ecloud.Template)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSolutionTemplates indicates an expected call of GetSolutionTemplates.
func (mr *MockECloudServiceMockRecorder) GetSolutionTemplates(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSolutionTemplates", reflect.TypeOf((*MockECloudService)(nil).GetSolutionTemplates), arg0, arg1)
}

// GetSolutionTemplatesPaginated mocks base method.
func (m *MockECloudService) GetSolutionTemplatesPaginated(arg0 int, arg1 connection.APIRequestParameters) (*connection.Paginated[ecloud.Template], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSolutionTemplatesPaginated", arg0, arg1)
	ret0, _ := ret[0].(*connection.Paginated[ecloud.Template])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSolutionTemplatesPaginated indicates an expected call of GetSolutionTemplatesPaginated.
func (mr *MockECloudServiceMockRecorder) GetSolutionTemplatesPaginated(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSolutionTemplatesPaginated", reflect.TypeOf((*MockECloudService)(nil).GetSolutionTemplatesPaginated), arg0, arg1)
}

// GetSolutionVirtualMachines mocks base method.
func (m *MockECloudService) GetSolutionVirtualMachines(arg0 int, arg1 connection.APIRequestParameters) ([]ecloud.VirtualMachine, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSolutionVirtualMachines", arg0, arg1)
	ret0, _ := ret[0].([]ecloud.VirtualMachine)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSolutionVirtualMachines indicates an expected call of GetSolutionVirtualMachines.
func (mr *MockECloudServiceMockRecorder) GetSolutionVirtualMachines(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSolutionVirtualMachines", reflect.TypeOf((*MockECloudService)(nil).GetSolutionVirtualMachines), arg0, arg1)
}

// GetSolutionVirtualMachinesPaginated mocks base method.
func (m *MockECloudService) GetSolutionVirtualMachinesPaginated(arg0 int, arg1 connection.APIRequestParameters) (*connection.Paginated[ecloud.VirtualMachine], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSolutionVirtualMachinesPaginated", arg0, arg1)
	ret0, _ := ret[0].(*connection.Paginated[ecloud.VirtualMachine])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSolutionVirtualMachinesPaginated indicates an expected call of GetSolutionVirtualMachinesPaginated.
func (mr *MockECloudServiceMockRecorder) GetSolutionVirtualMachinesPaginated(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSolutionVirtualMachinesPaginated", reflect.TypeOf((*MockECloudService)(nil).GetSolutionVirtualMachinesPaginated), arg0, arg1)
}

// GetSolutions mocks base method.
func (m *MockECloudService) GetSolutions(arg0 connection.APIRequestParameters) ([]ecloud.Solution, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSolutions", arg0)
	ret0, _ := ret[0].([]ecloud.Solution)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSolutions indicates an expected call of GetSolutions.
func (mr *MockECloudServiceMockRecorder) GetSolutions(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSolutions", reflect.TypeOf((*MockECloudService)(nil).GetSolutions), arg0)
}

// GetSolutionsPaginated mocks base method.
func (m *MockECloudService) GetSolutionsPaginated(arg0 connection.APIRequestParameters) (*connection.Paginated[ecloud.Solution], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSolutionsPaginated", arg0)
	ret0, _ := ret[0].(*connection.Paginated[ecloud.Solution])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSolutionsPaginated indicates an expected call of GetSolutionsPaginated.
func (mr *MockECloudServiceMockRecorder) GetSolutionsPaginated(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSolutionsPaginated", reflect.TypeOf((*MockECloudService)(nil).GetSolutionsPaginated), arg0)
}

// GetTag mocks base method.
func (m *MockECloudService) GetTag(arg0 string) (ecloud.Tag, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTag", arg0)
	ret0, _ := ret[0].(ecloud.Tag)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTag indicates an expected call of GetTag.
func (mr *MockECloudServiceMockRecorder) GetTag(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTag", reflect.TypeOf((*MockECloudService)(nil).GetTag), arg0)
}

// GetTags mocks base method.
func (m *MockECloudService) GetTags(arg0 connection.APIRequestParameters) ([]ecloud.Tag, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTags", arg0)
	ret0, _ := ret[0].([]ecloud.Tag)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTags indicates an expected call of GetTags.
func (mr *MockECloudServiceMockRecorder) GetTags(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTags", reflect.TypeOf((*MockECloudService)(nil).GetTags), arg0)
}

// GetTagsPaginated mocks base method.
func (m *MockECloudService) GetTagsPaginated(arg0 connection.APIRequestParameters) (*connection.Paginated[ecloud.Tag], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTagsPaginated", arg0)
	ret0, _ := ret[0].(*connection.Paginated[ecloud.Tag])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTagsPaginated indicates an expected call of GetTagsPaginated.
func (mr *MockECloudServiceMockRecorder) GetTagsPaginated(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTagsPaginated", reflect.TypeOf((*MockECloudService)(nil).GetTagsPaginated), arg0)
}

// GetTask mocks base method.
func (m *MockECloudService) GetTask(arg0 string) (ecloud.Task, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTask", arg0)
	ret0, _ := ret[0].(ecloud.Task)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTask indicates an expected call of GetTask.
func (mr *MockECloudServiceMockRecorder) GetTask(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTask", reflect.TypeOf((*MockECloudService)(nil).GetTask), arg0)
}

// GetTasks mocks base method.
func (m *MockECloudService) GetTasks(arg0 connection.APIRequestParameters) ([]ecloud.Task, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTasks", arg0)
	ret0, _ := ret[0].([]ecloud.Task)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTasks indicates an expected call of GetTasks.
func (mr *MockECloudServiceMockRecorder) GetTasks(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTasks", reflect.TypeOf((*MockECloudService)(nil).GetTasks), arg0)
}

// GetTasksPaginated mocks base method.
func (m *MockECloudService) GetTasksPaginated(arg0 connection.APIRequestParameters) (*connection.Paginated[ecloud.Task], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTasksPaginated", arg0)
	ret0, _ := ret[0].(*connection.Paginated[ecloud.Task])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTasksPaginated indicates an expected call of GetTasksPaginated.
func (mr *MockECloudServiceMockRecorder) GetTasksPaginated(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTasksPaginated", reflect.TypeOf((*MockECloudService)(nil).GetTasksPaginated), arg0)
}

// GetV1Host mocks base method.
func (m *MockECloudService) GetV1Host(arg0 int) (ecloud.V1Host, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetV1Host", arg0)
	ret0, _ := ret[0].(ecloud.V1Host)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetV1Host indicates an expected call of GetV1Host.
func (mr *MockECloudServiceMockRecorder) GetV1Host(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetV1Host", reflect.TypeOf((*MockECloudService)(nil).GetV1Host), arg0)
}

// GetV1Hosts mocks base method.
func (m *MockECloudService) GetV1Hosts(arg0 connection.APIRequestParameters) ([]ecloud.V1Host, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetV1Hosts", arg0)
	ret0, _ := ret[0].([]ecloud.V1Host)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetV1Hosts indicates an expected call of GetV1Hosts.
func (mr *MockECloudServiceMockRecorder) GetV1Hosts(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetV1Hosts", reflect.TypeOf((*MockECloudService)(nil).GetV1Hosts), arg0)
}

// GetV1HostsPaginated mocks base method.
func (m *MockECloudService) GetV1HostsPaginated(arg0 connection.APIRequestParameters) (*connection.Paginated[ecloud.V1Host], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetV1HostsPaginated", arg0)
	ret0, _ := ret[0].(*connection.Paginated[ecloud.V1Host])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetV1HostsPaginated indicates an expected call of GetV1HostsPaginated.
func (mr *MockECloudServiceMockRecorder) GetV1HostsPaginated(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetV1HostsPaginated", reflect.TypeOf((*MockECloudService)(nil).GetV1HostsPaginated), arg0)
}

// GetVIP mocks base method.
func (m *MockECloudService) GetVIP(arg0 string) (ecloud.VIP, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVIP", arg0)
	ret0, _ := ret[0].(ecloud.VIP)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVIP indicates an expected call of GetVIP.
func (mr *MockECloudServiceMockRecorder) GetVIP(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVIP", reflect.TypeOf((*MockECloudService)(nil).GetVIP), arg0)
}

// GetVIPs mocks base method.
func (m *MockECloudService) GetVIPs(arg0 connection.APIRequestParameters) ([]ecloud.VIP, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVIPs", arg0)
	ret0, _ := ret[0].([]ecloud.VIP)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVIPs indicates an expected call of GetVIPs.
func (mr *MockECloudServiceMockRecorder) GetVIPs(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVIPs", reflect.TypeOf((*MockECloudService)(nil).GetVIPs), arg0)
}

// GetVIPsPaginated mocks base method.
func (m *MockECloudService) GetVIPsPaginated(arg0 connection.APIRequestParameters) (*connection.Paginated[ecloud.VIP], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVIPsPaginated", arg0)
	ret0, _ := ret[0].(*connection.Paginated[ecloud.VIP])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVIPsPaginated indicates an expected call of GetVIPsPaginated.
func (mr *MockECloudServiceMockRecorder) GetVIPsPaginated(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVIPsPaginated", reflect.TypeOf((*MockECloudService)(nil).GetVIPsPaginated), arg0)
}

// GetVPC mocks base method.
func (m *MockECloudService) GetVPC(arg0 string) (ecloud.VPC, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVPC", arg0)
	ret0, _ := ret[0].(ecloud.VPC)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVPC indicates an expected call of GetVPC.
func (mr *MockECloudServiceMockRecorder) GetVPC(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVPC", reflect.TypeOf((*MockECloudService)(nil).GetVPC), arg0)
}

// GetVPCInstances mocks base method.
func (m *MockECloudService) GetVPCInstances(arg0 string, arg1 connection.APIRequestParameters) ([]ecloud.Instance, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVPCInstances", arg0, arg1)
	ret0, _ := ret[0].([]ecloud.Instance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVPCInstances indicates an expected call of GetVPCInstances.
func (mr *MockECloudServiceMockRecorder) GetVPCInstances(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVPCInstances", reflect.TypeOf((*MockECloudService)(nil).GetVPCInstances), arg0, arg1)
}

// GetVPCInstancesPaginated mocks base method.
func (m *MockECloudService) GetVPCInstancesPaginated(arg0 string, arg1 connection.APIRequestParameters) (*connection.Paginated[ecloud.Instance], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVPCInstancesPaginated", arg0, arg1)
	ret0, _ := ret[0].(*connection.Paginated[ecloud.Instance])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVPCInstancesPaginated indicates an expected call of GetVPCInstancesPaginated.
func (mr *MockECloudServiceMockRecorder) GetVPCInstancesPaginated(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVPCInstancesPaginated", reflect.TypeOf((*MockECloudService)(nil).GetVPCInstancesPaginated), arg0, arg1)
}

// GetVPCTasks mocks base method.
func (m *MockECloudService) GetVPCTasks(arg0 string, arg1 connection.APIRequestParameters) ([]ecloud.Task, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVPCTasks", arg0, arg1)
	ret0, _ := ret[0].([]ecloud.Task)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVPCTasks indicates an expected call of GetVPCTasks.
func (mr *MockECloudServiceMockRecorder) GetVPCTasks(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVPCTasks", reflect.TypeOf((*MockECloudService)(nil).GetVPCTasks), arg0, arg1)
}

// GetVPCTasksPaginated mocks base method.
func (m *MockECloudService) GetVPCTasksPaginated(arg0 string, arg1 connection.APIRequestParameters) (*connection.Paginated[ecloud.Task], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVPCTasksPaginated", arg0, arg1)
	ret0, _ := ret[0].(*connection.Paginated[ecloud.Task])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVPCTasksPaginated indicates an expected call of GetVPCTasksPaginated.
func (mr *MockECloudServiceMockRecorder) GetVPCTasksPaginated(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVPCTasksPaginated", reflect.TypeOf((*MockECloudService)(nil).GetVPCTasksPaginated), arg0, arg1)
}

// GetVPCVolumes mocks base method.
func (m *MockECloudService) GetVPCVolumes(arg0 string, arg1 connection.APIRequestParameters) ([]ecloud.Volume, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVPCVolumes", arg0, arg1)
	ret0, _ := ret[0].([]ecloud.Volume)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVPCVolumes indicates an expected call of GetVPCVolumes.
func (mr *MockECloudServiceMockRecorder) GetVPCVolumes(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVPCVolumes", reflect.TypeOf((*MockECloudService)(nil).GetVPCVolumes), arg0, arg1)
}

// GetVPCVolumesPaginated mocks base method.
func (m *MockECloudService) GetVPCVolumesPaginated(arg0 string, arg1 connection.APIRequestParameters) (*connection.Paginated[ecloud.Volume], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVPCVolumesPaginated", arg0, arg1)
	ret0, _ := ret[0].(*connection.Paginated[ecloud.Volume])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVPCVolumesPaginated indicates an expected call of GetVPCVolumesPaginated.
func (mr *MockECloudServiceMockRecorder) GetVPCVolumesPaginated(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVPCVolumesPaginated", reflect.TypeOf((*MockECloudService)(nil).GetVPCVolumesPaginated), arg0, arg1)
}

// GetVPCs mocks base method.
func (m *MockECloudService) GetVPCs(arg0 connection.APIRequestParameters) ([]ecloud.VPC, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVPCs", arg0)
	ret0, _ := ret[0].([]ecloud.VPC)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVPCs indicates an expected call of GetVPCs.
func (mr *MockECloudServiceMockRecorder) GetVPCs(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVPCs", reflect.TypeOf((*MockECloudService)(nil).GetVPCs), arg0)
}

// GetVPCsPaginated mocks base method.
func (m *MockECloudService) GetVPCsPaginated(arg0 connection.APIRequestParameters) (*connection.Paginated[ecloud.VPC], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVPCsPaginated", arg0)
	ret0, _ := ret[0].(*connection.Paginated[ecloud.VPC])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVPCsPaginated indicates an expected call of GetVPCsPaginated.
func (mr *MockECloudServiceMockRecorder) GetVPCsPaginated(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVPCsPaginated", reflect.TypeOf((*MockECloudService)(nil).GetVPCsPaginated), arg0)
}

// GetVPNEndpoint mocks base method.
func (m *MockECloudService) GetVPNEndpoint(arg0 string) (ecloud.VPNEndpoint, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVPNEndpoint", arg0)
	ret0, _ := ret[0].(ecloud.VPNEndpoint)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVPNEndpoint indicates an expected call of GetVPNEndpoint.
func (mr *MockECloudServiceMockRecorder) GetVPNEndpoint(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVPNEndpoint", reflect.TypeOf((*MockECloudService)(nil).GetVPNEndpoint), arg0)
}

// GetVPNEndpoints mocks base method.
func (m *MockECloudService) GetVPNEndpoints(arg0 connection.APIRequestParameters) ([]ecloud.VPNEndpoint, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVPNEndpoints", arg0)
	ret0, _ := ret[0].([]ecloud.VPNEndpoint)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVPNEndpoints indicates an expected call of GetVPNEndpoints.
func (mr *MockECloudServiceMockRecorder) GetVPNEndpoints(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVPNEndpoints", reflect.TypeOf((*MockECloudService)(nil).GetVPNEndpoints), arg0)
}

// GetVPNEndpointsPaginated mocks base method.
func (m *MockECloudService) GetVPNEndpointsPaginated(arg0 connection.APIRequestParameters) (*connection.Paginated[ecloud.VPNEndpoint], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVPNEndpointsPaginated", arg0)
	ret0, _ := ret[0].(*connection.Paginated[ecloud.VPNEndpoint])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVPNEndpointsPaginated indicates an expected call of GetVPNEndpointsPaginated.
func (mr *MockECloudServiceMockRecorder) GetVPNEndpointsPaginated(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVPNEndpointsPaginated", reflect.TypeOf((*MockECloudService)(nil).GetVPNEndpointsPaginated), arg0)
}

// GetVPNGateway mocks base method.
func (m *MockECloudService) GetVPNGateway(arg0 string) (ecloud.VPNGateway, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVPNGateway", arg0)
	ret0, _ := ret[0].(ecloud.VPNGateway)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVPNGateway indicates an expected call of GetVPNGateway.
func (mr *MockECloudServiceMockRecorder) GetVPNGateway(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVPNGateway", reflect.TypeOf((*MockECloudService)(nil).GetVPNGateway), arg0)
}

// GetVPNGatewaySpecification mocks base method.
func (m *MockECloudService) GetVPNGatewaySpecification(arg0 string) (ecloud.VPNGatewaySpecification, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVPNGatewaySpecification", arg0)
	ret0, _ := ret[0].(ecloud.VPNGatewaySpecification)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVPNGatewaySpecification indicates an expected call of GetVPNGatewaySpecification.
func (mr *MockECloudServiceMockRecorder) GetVPNGatewaySpecification(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVPNGatewaySpecification", reflect.TypeOf((*MockECloudService)(nil).GetVPNGatewaySpecification), arg0)
}

// GetVPNGatewaySpecificationAvailabilityZones mocks base method.
func (m *MockECloudService) GetVPNGatewaySpecificationAvailabilityZones(arg0 string, arg1 connection.APIRequestParameters) ([]ecloud.AvailabilityZone, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVPNGatewaySpecificationAvailabilityZones", arg0, arg1)
	ret0, _ := ret[0].([]ecloud.AvailabilityZone)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVPNGatewaySpecificationAvailabilityZones indicates an expected call of GetVPNGatewaySpecificationAvailabilityZones.
func (mr *MockECloudServiceMockRecorder) GetVPNGatewaySpecificationAvailabilityZones(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVPNGatewaySpecificationAvailabilityZones", reflect.TypeOf((*MockECloudService)(nil).GetVPNGatewaySpecificationAvailabilityZones), arg0, arg1)
}

// GetVPNGatewaySpecificationAvailabilityZonesPaginated mocks base method.
func (m *MockECloudService) GetVPNGatewaySpecificationAvailabilityZonesPaginated(arg0 string, arg1 connection.APIRequestParameters) (*connection.Paginated[ecloud.AvailabilityZone], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVPNGatewaySpecificationAvailabilityZonesPaginated", arg0, arg1)
	ret0, _ := ret[0].(*connection.Paginated[ecloud.AvailabilityZone])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVPNGatewaySpecificationAvailabilityZonesPaginated indicates an expected call of GetVPNGatewaySpecificationAvailabilityZonesPaginated.
func (mr *MockECloudServiceMockRecorder) GetVPNGatewaySpecificationAvailabilityZonesPaginated(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVPNGatewaySpecificationAvailabilityZonesPaginated", reflect.TypeOf((*MockECloudService)(nil).GetVPNGatewaySpecificationAvailabilityZonesPaginated), arg0, arg1)
}

// GetVPNGatewaySpecifications mocks base method.
func (m *MockECloudService) GetVPNGatewaySpecifications(arg0 connection.APIRequestParameters) ([]ecloud.VPNGatewaySpecification, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVPNGatewaySpecifications", arg0)
	ret0, _ := ret[0].([]ecloud.VPNGatewaySpecification)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVPNGatewaySpecifications indicates an expected call of GetVPNGatewaySpecifications.
func (mr *MockECloudServiceMockRecorder) GetVPNGatewaySpecifications(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVPNGatewaySpecifications", reflect.TypeOf((*MockECloudService)(nil).GetVPNGatewaySpecifications), arg0)
}

// GetVPNGatewaySpecificationsPaginated mocks base method.
func (m *MockECloudService) GetVPNGatewaySpecificationsPaginated(arg0 connection.APIRequestParameters) (*connection.Paginated[ecloud.VPNGatewaySpecification], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVPNGatewaySpecificationsPaginated", arg0)
	ret0, _ := ret[0].(*connection.Paginated[ecloud.VPNGatewaySpecification])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVPNGatewaySpecificationsPaginated indicates an expected call of GetVPNGatewaySpecificationsPaginated.
func (mr *MockECloudServiceMockRecorder) GetVPNGatewaySpecificationsPaginated(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVPNGatewaySpecificationsPaginated", reflect.TypeOf((*MockECloudService)(nil).GetVPNGatewaySpecificationsPaginated), arg0)
}

// GetVPNGatewayTasks mocks base method.
func (m *MockECloudService) GetVPNGatewayTasks(arg0 string, arg1 connection.APIRequestParameters) ([]ecloud.Task, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVPNGatewayTasks", arg0, arg1)
	ret0, _ := ret[0].([]ecloud.Task)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVPNGatewayTasks indicates an expected call of GetVPNGatewayTasks.
func (mr *MockECloudServiceMockRecorder) GetVPNGatewayTasks(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVPNGatewayTasks", reflect.TypeOf((*MockECloudService)(nil).GetVPNGatewayTasks), arg0, arg1)
}

// GetVPNGatewayTasksPaginated mocks base method.
func (m *MockECloudService) GetVPNGatewayTasksPaginated(arg0 string, arg1 connection.APIRequestParameters) (*connection.Paginated[ecloud.Task], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVPNGatewayTasksPaginated", arg0, arg1)
	ret0, _ := ret[0].(*connection.Paginated[ecloud.Task])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVPNGatewayTasksPaginated indicates an expected call of GetVPNGatewayTasksPaginated.
func (mr *MockECloudServiceMockRecorder) GetVPNGatewayTasksPaginated(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVPNGatewayTasksPaginated", reflect.TypeOf((*MockECloudService)(nil).GetVPNGatewayTasksPaginated), arg0, arg1)
}

// GetVPNGatewayUser mocks base method.
func (m *MockECloudService) GetVPNGatewayUser(arg0 string) (ecloud.VPNGatewayUser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVPNGatewayUser", arg0)
	ret0, _ := ret[0].(ecloud.VPNGatewayUser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVPNGatewayUser indicates an expected call of GetVPNGatewayUser.
func (mr *MockECloudServiceMockRecorder) GetVPNGatewayUser(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVPNGatewayUser", reflect.TypeOf((*MockECloudService)(nil).GetVPNGatewayUser), arg0)
}

// GetVPNGatewayUsers mocks base method.
func (m *MockECloudService) GetVPNGatewayUsers(arg0 connection.APIRequestParameters) ([]ecloud.VPNGatewayUser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVPNGatewayUsers", arg0)
	ret0, _ := ret[0].([]ecloud.VPNGatewayUser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVPNGatewayUsers indicates an expected call of GetVPNGatewayUsers.
func (mr *MockECloudServiceMockRecorder) GetVPNGatewayUsers(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVPNGatewayUsers", reflect.TypeOf((*MockECloudService)(nil).GetVPNGatewayUsers), arg0)
}

// GetVPNGatewayUsersPaginated mocks base method.
func (m *MockECloudService) GetVPNGatewayUsersPaginated(arg0 connection.APIRequestParameters) (*connection.Paginated[ecloud.VPNGatewayUser], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVPNGatewayUsersPaginated", arg0)
	ret0, _ := ret[0].(*connection.Paginated[ecloud.VPNGatewayUser])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVPNGatewayUsersPaginated indicates an expected call of GetVPNGatewayUsersPaginated.
func (mr *MockECloudServiceMockRecorder) GetVPNGatewayUsersPaginated(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVPNGatewayUsersPaginated", reflect.TypeOf((*MockECloudService)(nil).GetVPNGatewayUsersPaginated), arg0)
}

// GetVPNGateways mocks base method.
func (m *MockECloudService) GetVPNGateways(arg0 connection.APIRequestParameters) ([]ecloud.VPNGateway, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVPNGateways", arg0)
	ret0, _ := ret[0].([]ecloud.VPNGateway)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVPNGateways indicates an expected call of GetVPNGateways.
func (mr *MockECloudServiceMockRecorder) GetVPNGateways(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVPNGateways", reflect.TypeOf((*MockECloudService)(nil).GetVPNGateways), arg0)
}

// GetVPNGatewaysPaginated mocks base method.
func (m *MockECloudService) GetVPNGatewaysPaginated(arg0 connection.APIRequestParameters) (*connection.Paginated[ecloud.VPNGateway], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVPNGatewaysPaginated", arg0)
	ret0, _ := ret[0].(*connection.Paginated[ecloud.VPNGateway])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVPNGatewaysPaginated indicates an expected call of GetVPNGatewaysPaginated.
func (mr *MockECloudServiceMockRecorder) GetVPNGatewaysPaginated(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVPNGatewaysPaginated", reflect.TypeOf((*MockECloudService)(nil).GetVPNGatewaysPaginated), arg0)
}

// GetVPNProfileGroup mocks base method.
func (m *MockECloudService) GetVPNProfileGroup(arg0 string) (ecloud.VPNProfileGroup, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVPNProfileGroup", arg0)
	ret0, _ := ret[0].(ecloud.VPNProfileGroup)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVPNProfileGroup indicates an expected call of GetVPNProfileGroup.
func (mr *MockECloudServiceMockRecorder) GetVPNProfileGroup(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVPNProfileGroup", reflect.TypeOf((*MockECloudService)(nil).GetVPNProfileGroup), arg0)
}

// GetVPNProfileGroups mocks base method.
func (m *MockECloudService) GetVPNProfileGroups(arg0 connection.APIRequestParameters) ([]ecloud.VPNProfileGroup, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVPNProfileGroups", arg0)
	ret0, _ := ret[0].([]ecloud.VPNProfileGroup)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVPNProfileGroups indicates an expected call of GetVPNProfileGroups.
func (mr *MockECloudServiceMockRecorder) GetVPNProfileGroups(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVPNProfileGroups", reflect.TypeOf((*MockECloudService)(nil).GetVPNProfileGroups), arg0)
}

// GetVPNProfileGroupsPaginated mocks base method.
func (m *MockECloudService) GetVPNProfileGroupsPaginated(arg0 connection.APIRequestParameters) (*connection.Paginated[ecloud.VPNProfileGroup], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVPNProfileGroupsPaginated", arg0)
	ret0, _ := ret[0].(*connection.Paginated[ecloud.VPNProfileGroup])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVPNProfileGroupsPaginated indicates an expected call of GetVPNProfileGroupsPaginated.
func (mr *MockECloudServiceMockRecorder) GetVPNProfileGroupsPaginated(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVPNProfileGroupsPaginated", reflect.TypeOf((*MockECloudService)(nil).GetVPNProfileGroupsPaginated), arg0)
}

// GetVPNService mocks base method.
func (m *MockECloudService) GetVPNService(arg0 string) (ecloud.VPNService, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVPNService", arg0)
	ret0, _ := ret[0].(ecloud.VPNService)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVPNService indicates an expected call of GetVPNService.
func (mr *MockECloudServiceMockRecorder) GetVPNService(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVPNService", reflect.TypeOf((*MockECloudService)(nil).GetVPNService), arg0)
}

// GetVPNServices mocks base method.
func (m *MockECloudService) GetVPNServices(arg0 connection.APIRequestParameters) ([]ecloud.VPNService, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVPNServices", arg0)
	ret0, _ := ret[0].([]ecloud.VPNService)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVPNServices indicates an expected call of GetVPNServices.
func (mr *MockECloudServiceMockRecorder) GetVPNServices(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVPNServices", reflect.TypeOf((*MockECloudService)(nil).GetVPNServices), arg0)
}

// GetVPNServicesPaginated mocks base method.
func (m *MockECloudService) GetVPNServicesPaginated(arg0 connection.APIRequestParameters) (*connection.Paginated[ecloud.VPNService], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVPNServicesPaginated", arg0)
	ret0, _ := ret[0].(*connection.Paginated[ecloud.VPNService])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVPNServicesPaginated indicates an expected call of GetVPNServicesPaginated.
func (mr *MockECloudServiceMockRecorder) GetVPNServicesPaginated(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVPNServicesPaginated", reflect.TypeOf((*MockECloudService)(nil).GetVPNServicesPaginated), arg0)
}

// GetVPNSession mocks base method.
func (m *MockECloudService) GetVPNSession(arg0 string) (ecloud.VPNSession, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVPNSession", arg0)
	ret0, _ := ret[0].(ecloud.VPNSession)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVPNSession indicates an expected call of GetVPNSession.
func (mr *MockECloudServiceMockRecorder) GetVPNSession(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVPNSession", reflect.TypeOf((*MockECloudService)(nil).GetVPNSession), arg0)
}

// GetVPNSessionPreSharedKey mocks base method.
func (m *MockECloudService) GetVPNSessionPreSharedKey(arg0 string) (ecloud.VPNSessionPreSharedKey, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVPNSessionPreSharedKey", arg0)
	ret0, _ := ret[0].(ecloud.VPNSessionPreSharedKey)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVPNSessionPreSharedKey indicates an expected call of GetVPNSessionPreSharedKey.
func (mr *MockECloudServiceMockRecorder) GetVPNSessionPreSharedKey(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVPNSessionPreSharedKey", reflect.TypeOf((*MockECloudService)(nil).GetVPNSessionPreSharedKey), arg0)
}

// GetVPNSessions mocks base method.
func (m *MockECloudService) GetVPNSessions(arg0 connection.APIRequestParameters) ([]ecloud.VPNSession, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVPNSessions", arg0)
	ret0, _ := ret[0].([]ecloud.VPNSession)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVPNSessions indicates an expected call of GetVPNSessions.
func (mr *MockECloudServiceMockRecorder) GetVPNSessions(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVPNSessions", reflect.TypeOf((*MockECloudService)(nil).GetVPNSessions), arg0)
}

// GetVPNSessionsPaginated mocks base method.
func (m *MockECloudService) GetVPNSessionsPaginated(arg0 connection.APIRequestParameters) (*connection.Paginated[ecloud.VPNSession], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVPNSessionsPaginated", arg0)
	ret0, _ := ret[0].(*connection.Paginated[ecloud.VPNSession])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVPNSessionsPaginated indicates an expected call of GetVPNSessionsPaginated.
func (mr *MockECloudServiceMockRecorder) GetVPNSessionsPaginated(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVPNSessionsPaginated", reflect.TypeOf((*MockECloudService)(nil).GetVPNSessionsPaginated), arg0)
}

// GetVirtualMachine mocks base method.
func (m *MockECloudService) GetVirtualMachine(arg0 int) (ecloud.VirtualMachine, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVirtualMachine", arg0)
	ret0, _ := ret[0].(ecloud.VirtualMachine)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVirtualMachine indicates an expected call of GetVirtualMachine.
func (mr *MockECloudServiceMockRecorder) GetVirtualMachine(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVirtualMachine", reflect.TypeOf((*MockECloudService)(nil).GetVirtualMachine), arg0)
}

// GetVirtualMachineTag mocks base method.
func (m *MockECloudService) GetVirtualMachineTag(arg0 int, arg1 string) (ecloud.TagV1, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVirtualMachineTag", arg0, arg1)
	ret0, _ := ret[0].(ecloud.TagV1)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVirtualMachineTag indicates an expected call of GetVirtualMachineTag.
func (mr *MockECloudServiceMockRecorder) GetVirtualMachineTag(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVirtualMachineTag", reflect.TypeOf((*MockECloudService)(nil).GetVirtualMachineTag), arg0, arg1)
}

// GetVirtualMachineTags mocks base method.
func (m *MockECloudService) GetVirtualMachineTags(arg0 int, arg1 connection.APIRequestParameters) ([]ecloud.TagV1, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVirtualMachineTags", arg0, arg1)
	ret0, _ := ret[0].([]ecloud.TagV1)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVirtualMachineTags indicates an expected call of GetVirtualMachineTags.
func (mr *MockECloudServiceMockRecorder) GetVirtualMachineTags(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVirtualMachineTags", reflect.TypeOf((*MockECloudService)(nil).GetVirtualMachineTags), arg0, arg1)
}

// GetVirtualMachineTagsPaginated mocks base method.
func (m *MockECloudService) GetVirtualMachineTagsPaginated(arg0 int, arg1 connection.APIRequestParameters) (*connection.Paginated[ecloud.TagV1], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVirtualMachineTagsPaginated", arg0, arg1)
	ret0, _ := ret[0].(*connection.Paginated[ecloud.TagV1])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVirtualMachineTagsPaginated indicates an expected call of GetVirtualMachineTagsPaginated.
func (mr *MockECloudServiceMockRecorder) GetVirtualMachineTagsPaginated(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVirtualMachineTagsPaginated", reflect.TypeOf((*MockECloudService)(nil).GetVirtualMachineTagsPaginated), arg0, arg1)
}

// GetVirtualMachines mocks base method.
func (m *MockECloudService) GetVirtualMachines(arg0 connection.APIRequestParameters) ([]ecloud.VirtualMachine, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVirtualMachines", arg0)
	ret0, _ := ret[0].([]ecloud.VirtualMachine)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVirtualMachines indicates an expected call of GetVirtualMachines.
func (mr *MockECloudServiceMockRecorder) GetVirtualMachines(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVirtualMachines", reflect.TypeOf((*MockECloudService)(nil).GetVirtualMachines), arg0)
}

// GetVirtualMachinesPaginated mocks base method.
func (m *MockECloudService) GetVirtualMachinesPaginated(arg0 connection.APIRequestParameters) (*connection.Paginated[ecloud.VirtualMachine], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVirtualMachinesPaginated", arg0)
	ret0, _ := ret[0].(*connection.Paginated[ecloud.VirtualMachine])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVirtualMachinesPaginated indicates an expected call of GetVirtualMachinesPaginated.
func (mr *MockECloudServiceMockRecorder) GetVirtualMachinesPaginated(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVirtualMachinesPaginated", reflect.TypeOf((*MockECloudService)(nil).GetVirtualMachinesPaginated), arg0)
}

// GetVolume mocks base method.
func (m *MockECloudService) GetVolume(arg0 string) (ecloud.Volume, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVolume", arg0)
	ret0, _ := ret[0].(ecloud.Volume)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVolume indicates an expected call of GetVolume.
func (mr *MockECloudServiceMockRecorder) GetVolume(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVolume", reflect.TypeOf((*MockECloudService)(nil).GetVolume), arg0)
}

// GetVolumeGroup mocks base method.
func (m *MockECloudService) GetVolumeGroup(arg0 string) (ecloud.VolumeGroup, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVolumeGroup", arg0)
	ret0, _ := ret[0].(ecloud.VolumeGroup)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVolumeGroup indicates an expected call of GetVolumeGroup.
func (mr *MockECloudServiceMockRecorder) GetVolumeGroup(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVolumeGroup", reflect.TypeOf((*MockECloudService)(nil).GetVolumeGroup), arg0)
}

// GetVolumeGroupVolumes mocks base method.
func (m *MockECloudService) GetVolumeGroupVolumes(arg0 string, arg1 connection.APIRequestParameters) ([]ecloud.Volume, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVolumeGroupVolumes", arg0, arg1)
	ret0, _ := ret[0].([]ecloud.Volume)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVolumeGroupVolumes indicates an expected call of GetVolumeGroupVolumes.
func (mr *MockECloudServiceMockRecorder) GetVolumeGroupVolumes(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVolumeGroupVolumes", reflect.TypeOf((*MockECloudService)(nil).GetVolumeGroupVolumes), arg0, arg1)
}

// GetVolumeGroupVolumesPaginated mocks base method.
func (m *MockECloudService) GetVolumeGroupVolumesPaginated(arg0 string, arg1 connection.APIRequestParameters) (*connection.Paginated[ecloud.Volume], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVolumeGroupVolumesPaginated", arg0, arg1)
	ret0, _ := ret[0].(*connection.Paginated[ecloud.Volume])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVolumeGroupVolumesPaginated indicates an expected call of GetVolumeGroupVolumesPaginated.
func (mr *MockECloudServiceMockRecorder) GetVolumeGroupVolumesPaginated(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVolumeGroupVolumesPaginated", reflect.TypeOf((*MockECloudService)(nil).GetVolumeGroupVolumesPaginated), arg0, arg1)
}

// GetVolumeGroups mocks base method.
func (m *MockECloudService) GetVolumeGroups(arg0 connection.APIRequestParameters) ([]ecloud.VolumeGroup, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVolumeGroups", arg0)
	ret0, _ := ret[0].([]ecloud.VolumeGroup)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVolumeGroups indicates an expected call of GetVolumeGroups.
func (mr *MockECloudServiceMockRecorder) GetVolumeGroups(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVolumeGroups", reflect.TypeOf((*MockECloudService)(nil).GetVolumeGroups), arg0)
}

// GetVolumeGroupsPaginated mocks base method.
func (m *MockECloudService) GetVolumeGroupsPaginated(arg0 connection.APIRequestParameters) (*connection.Paginated[ecloud.VolumeGroup], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVolumeGroupsPaginated", arg0)
	ret0, _ := ret[0].(*connection.Paginated[ecloud.VolumeGroup])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVolumeGroupsPaginated indicates an expected call of GetVolumeGroupsPaginated.
func (mr *MockECloudServiceMockRecorder) GetVolumeGroupsPaginated(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVolumeGroupsPaginated", reflect.TypeOf((*MockECloudService)(nil).GetVolumeGroupsPaginated), arg0)
}

// GetVolumeInstances mocks base method.
func (m *MockECloudService) GetVolumeInstances(arg0 string, arg1 connection.APIRequestParameters) ([]ecloud.Instance, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVolumeInstances", arg0, arg1)
	ret0, _ := ret[0].([]ecloud.Instance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVolumeInstances indicates an expected call of GetVolumeInstances.
func (mr *MockECloudServiceMockRecorder) GetVolumeInstances(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVolumeInstances", reflect.TypeOf((*MockECloudService)(nil).GetVolumeInstances), arg0, arg1)
}

// GetVolumeInstancesPaginated mocks base method.
func (m *MockECloudService) GetVolumeInstancesPaginated(arg0 string, arg1 connection.APIRequestParameters) (*connection.Paginated[ecloud.Instance], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVolumeInstancesPaginated", arg0, arg1)
	ret0, _ := ret[0].(*connection.Paginated[ecloud.Instance])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVolumeInstancesPaginated indicates an expected call of GetVolumeInstancesPaginated.
func (mr *MockECloudServiceMockRecorder) GetVolumeInstancesPaginated(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVolumeInstancesPaginated", reflect.TypeOf((*MockECloudService)(nil).GetVolumeInstancesPaginated), arg0, arg1)
}

// GetVolumeTasks mocks base method.
func (m *MockECloudService) GetVolumeTasks(arg0 string, arg1 connection.APIRequestParameters) ([]ecloud.Task, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVolumeTasks", arg0, arg1)
	ret0, _ := ret[0].([]ecloud.Task)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVolumeTasks indicates an expected call of GetVolumeTasks.
func (mr *MockECloudServiceMockRecorder) GetVolumeTasks(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVolumeTasks", reflect.TypeOf((*MockECloudService)(nil).GetVolumeTasks), arg0, arg1)
}

// GetVolumeTasksPaginated mocks base method.
func (m *MockECloudService) GetVolumeTasksPaginated(arg0 string, arg1 connection.APIRequestParameters) (*connection.Paginated[ecloud.Task], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVolumeTasksPaginated", arg0, arg1)
	ret0, _ := ret[0].(*connection.Paginated[ecloud.Task])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVolumeTasksPaginated indicates an expected call of GetVolumeTasksPaginated.
func (mr *MockECloudServiceMockRecorder) GetVolumeTasksPaginated(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVolumeTasksPaginated", reflect.TypeOf((*MockECloudService)(nil).GetVolumeTasksPaginated), arg0, arg1)
}

// GetVolumes mocks base method.
func (m *MockECloudService) GetVolumes(arg0 connection.APIRequestParameters) ([]ecloud.Volume, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVolumes", arg0)
	ret0, _ := ret[0].([]ecloud.Volume)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVolumes indicates an expected call of GetVolumes.
func (mr *MockECloudServiceMockRecorder) GetVolumes(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVolumes", reflect.TypeOf((*MockECloudService)(nil).GetVolumes), arg0)
}

// GetVolumesPaginated mocks base method.
func (m *MockECloudService) GetVolumesPaginated(arg0 connection.APIRequestParameters) (*connection.Paginated[ecloud.Volume], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVolumesPaginated", arg0)
	ret0, _ := ret[0].(*connection.Paginated[ecloud.Volume])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVolumesPaginated indicates an expected call of GetVolumesPaginated.
func (mr *MockECloudServiceMockRecorder) GetVolumesPaginated(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVolumesPaginated", reflect.TypeOf((*MockECloudService)(nil).GetVolumesPaginated), arg0)
}

// LockInstance mocks base method.
func (m *MockECloudService) LockInstance(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LockInstance", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// LockInstance indicates an expected call of LockInstance.
func (mr *MockECloudServiceMockRecorder) LockInstance(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LockInstance", reflect.TypeOf((*MockECloudService)(nil).LockInstance), arg0)
}

// MigrateInstance mocks base method.
func (m *MockECloudService) MigrateInstance(arg0 string, arg1 ecloud.MigrateInstanceRequest) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MigrateInstance", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MigrateInstance indicates an expected call of MigrateInstance.
func (mr *MockECloudServiceMockRecorder) MigrateInstance(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MigrateInstance", reflect.TypeOf((*MockECloudService)(nil).MigrateInstance), arg0, arg1)
}

// PatchAffinityRule mocks base method.
func (m *MockECloudService) PatchAffinityRule(arg0 string, arg1 ecloud.PatchAffinityRuleRequest) (ecloud.TaskReference, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PatchAffinityRule", arg0, arg1)
	ret0, _ := ret[0].(ecloud.TaskReference)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PatchAffinityRule indicates an expected call of PatchAffinityRule.
func (mr *MockECloudServiceMockRecorder) PatchAffinityRule(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchAffinityRule", reflect.TypeOf((*MockECloudService)(nil).PatchAffinityRule), arg0, arg1)
}

// PatchBackupGateway mocks base method.
func (m *MockECloudService) PatchBackupGateway(arg0 string, arg1 ecloud.PatchBackupGatewayRequest) (ecloud.TaskReference, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PatchBackupGateway", arg0, arg1)
	ret0, _ := ret[0].(ecloud.TaskReference)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PatchBackupGateway indicates an expected call of PatchBackupGateway.
func (mr *MockECloudServiceMockRecorder) PatchBackupGateway(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchBackupGateway", reflect.TypeOf((*MockECloudService)(nil).PatchBackupGateway), arg0, arg1)
}

// PatchFirewallPolicy mocks base method.
func (m *MockECloudService) PatchFirewallPolicy(arg0 string, arg1 ecloud.PatchFirewallPolicyRequest) (ecloud.TaskReference, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PatchFirewallPolicy", arg0, arg1)
	ret0, _ := ret[0].(ecloud.TaskReference)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PatchFirewallPolicy indicates an expected call of PatchFirewallPolicy.
func (mr *MockECloudServiceMockRecorder) PatchFirewallPolicy(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchFirewallPolicy", reflect.TypeOf((*MockECloudService)(nil).PatchFirewallPolicy), arg0, arg1)
}

// PatchFirewallRule mocks base method.
func (m *MockECloudService) PatchFirewallRule(arg0 string, arg1 ecloud.PatchFirewallRuleRequest) (ecloud.TaskReference, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PatchFirewallRule", arg0, arg1)
	ret0, _ := ret[0].(ecloud.TaskReference)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PatchFirewallRule indicates an expected call of PatchFirewallRule.
func (mr *MockECloudServiceMockRecorder) PatchFirewallRule(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchFirewallRule", reflect.TypeOf((*MockECloudService)(nil).PatchFirewallRule), arg0, arg1)
}

// PatchFirewallRulePort mocks base method.
func (m *MockECloudService) PatchFirewallRulePort(arg0 string, arg1 ecloud.PatchFirewallRulePortRequest) (ecloud.TaskReference, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PatchFirewallRulePort", arg0, arg1)
	ret0, _ := ret[0].(ecloud.TaskReference)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PatchFirewallRulePort indicates an expected call of PatchFirewallRulePort.
func (mr *MockECloudServiceMockRecorder) PatchFirewallRulePort(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchFirewallRulePort", reflect.TypeOf((*MockECloudService)(nil).PatchFirewallRulePort), arg0, arg1)
}

// PatchFloatingIP mocks base method.
func (m *MockECloudService) PatchFloatingIP(arg0 string, arg1 ecloud.PatchFloatingIPRequest) (ecloud.TaskReference, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PatchFloatingIP", arg0, arg1)
	ret0, _ := ret[0].(ecloud.TaskReference)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PatchFloatingIP indicates an expected call of PatchFloatingIP.
func (mr *MockECloudServiceMockRecorder) PatchFloatingIP(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchFloatingIP", reflect.TypeOf((*MockECloudService)(nil).PatchFloatingIP), arg0, arg1)
}

// PatchHost mocks base method.
func (m *MockECloudService) PatchHost(arg0 string, arg1 ecloud.PatchHostRequest) (ecloud.TaskReference, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PatchHost", arg0, arg1)
	ret0, _ := ret[0].(ecloud.TaskReference)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PatchHost indicates an expected call of PatchHost.
func (mr *MockECloudServiceMockRecorder) PatchHost(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchHost", reflect.TypeOf((*MockECloudService)(nil).PatchHost), arg0, arg1)
}

// PatchHostGroup mocks base method.
func (m *MockECloudService) PatchHostGroup(arg0 string, arg1 ecloud.PatchHostGroupRequest) (ecloud.TaskReference, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PatchHostGroup", arg0, arg1)
	ret0, _ := ret[0].(ecloud.TaskReference)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PatchHostGroup indicates an expected call of PatchHostGroup.
func (mr *MockECloudServiceMockRecorder) PatchHostGroup(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchHostGroup", reflect.TypeOf((*MockECloudService)(nil).PatchHostGroup), arg0, arg1)
}

// PatchIPAddress mocks base method.
func (m *MockECloudService) PatchIPAddress(arg0 string, arg1 ecloud.PatchIPAddressRequest) (ecloud.TaskReference, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PatchIPAddress", arg0, arg1)
	ret0, _ := ret[0].(ecloud.TaskReference)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PatchIPAddress indicates an expected call of PatchIPAddress.
func (mr *MockECloudServiceMockRecorder) PatchIPAddress(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchIPAddress", reflect.TypeOf((*MockECloudService)(nil).PatchIPAddress), arg0, arg1)
}

// PatchInstance mocks base method.
func (m *MockECloudService) PatchInstance(arg0 string, arg1 ecloud.PatchInstanceRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PatchInstance", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchInstance indicates an expected call of PatchInstance.
func (mr *MockECloudServiceMockRecorder) PatchInstance(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchInstance", reflect.TypeOf((*MockECloudService)(nil).PatchInstance), arg0, arg1)
}

// PatchLoadBalancer mocks base method.
func (m *MockECloudService) PatchLoadBalancer(arg0 string, arg1 ecloud.PatchLoadBalancerRequest) (ecloud.TaskReference, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PatchLoadBalancer", arg0, arg1)
	ret0, _ := ret[0].(ecloud.TaskReference)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PatchLoadBalancer indicates an expected call of PatchLoadBalancer.
func (mr *MockECloudServiceMockRecorder) PatchLoadBalancer(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchLoadBalancer", reflect.TypeOf((*MockECloudService)(nil).PatchLoadBalancer), arg0, arg1)
}

// PatchMonitoringGateway mocks base method.
func (m *MockECloudService) PatchMonitoringGateway(arg0 string, arg1 ecloud.PatchMonitoringGatewayRequest) (ecloud.TaskReference, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PatchMonitoringGateway", arg0, arg1)
	ret0, _ := ret[0].(ecloud.TaskReference)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PatchMonitoringGateway indicates an expected call of PatchMonitoringGateway.
func (mr *MockECloudServiceMockRecorder) PatchMonitoringGateway(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchMonitoringGateway", reflect.TypeOf((*MockECloudService)(nil).PatchMonitoringGateway), arg0, arg1)
}

// PatchNATOverloadRule mocks base method.
func (m *MockECloudService) PatchNATOverloadRule(arg0 string, arg1 ecloud.PatchNATOverloadRuleRequest) (ecloud.TaskReference, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PatchNATOverloadRule", arg0, arg1)
	ret0, _ := ret[0].(ecloud.TaskReference)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PatchNATOverloadRule indicates an expected call of PatchNATOverloadRule.
func (mr *MockECloudServiceMockRecorder) PatchNATOverloadRule(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchNATOverloadRule", reflect.TypeOf((*MockECloudService)(nil).PatchNATOverloadRule), arg0, arg1)
}

// PatchNIC mocks base method.
func (m *MockECloudService) PatchNIC(arg0 string, arg1 ecloud.PatchNICRequest) (ecloud.TaskReference, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PatchNIC", arg0, arg1)
	ret0, _ := ret[0].(ecloud.TaskReference)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PatchNIC indicates an expected call of PatchNIC.
func (mr *MockECloudServiceMockRecorder) PatchNIC(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchNIC", reflect.TypeOf((*MockECloudService)(nil).PatchNIC), arg0, arg1)
}

// PatchNetwork mocks base method.
func (m *MockECloudService) PatchNetwork(arg0 string, arg1 ecloud.PatchNetworkRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PatchNetwork", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchNetwork indicates an expected call of PatchNetwork.
func (mr *MockECloudServiceMockRecorder) PatchNetwork(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchNetwork", reflect.TypeOf((*MockECloudService)(nil).PatchNetwork), arg0, arg1)
}

// PatchNetworkPolicy mocks base method.
func (m *MockECloudService) PatchNetworkPolicy(arg0 string, arg1 ecloud.PatchNetworkPolicyRequest) (ecloud.TaskReference, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PatchNetworkPolicy", arg0, arg1)
	ret0, _ := ret[0].(ecloud.TaskReference)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PatchNetworkPolicy indicates an expected call of PatchNetworkPolicy.
func (mr *MockECloudServiceMockRecorder) PatchNetworkPolicy(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchNetworkPolicy", reflect.TypeOf((*MockECloudService)(nil).PatchNetworkPolicy), arg0, arg1)
}

// PatchNetworkRule mocks base method.
func (m *MockECloudService) PatchNetworkRule(arg0 string, arg1 ecloud.PatchNetworkRuleRequest) (ecloud.TaskReference, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PatchNetworkRule", arg0, arg1)
	ret0, _ := ret[0].(ecloud.TaskReference)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PatchNetworkRule indicates an expected call of PatchNetworkRule.
func (mr *MockECloudServiceMockRecorder) PatchNetworkRule(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchNetworkRule", reflect.TypeOf((*MockECloudService)(nil).PatchNetworkRule), arg0, arg1)
}

// PatchNetworkRulePort mocks base method.
func (m *MockECloudService) PatchNetworkRulePort(arg0 string, arg1 ecloud.PatchNetworkRulePortRequest) (ecloud.TaskReference, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PatchNetworkRulePort", arg0, arg1)
	ret0, _ := ret[0].(ecloud.TaskReference)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PatchNetworkRulePort indicates an expected call of PatchNetworkRulePort.
func (mr *MockECloudServiceMockRecorder) PatchNetworkRulePort(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchNetworkRulePort", reflect.TypeOf((*MockECloudService)(nil).PatchNetworkRulePort), arg0, arg1)
}

// PatchRouter mocks base method.
func (m *MockECloudService) PatchRouter(arg0 string, arg1 ecloud.PatchRouterRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PatchRouter", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchRouter indicates an expected call of PatchRouter.
func (mr *MockECloudServiceMockRecorder) PatchRouter(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchRouter", reflect.TypeOf((*MockECloudService)(nil).PatchRouter), arg0, arg1)
}

// PatchSSHKeyPair mocks base method.
func (m *MockECloudService) PatchSSHKeyPair(arg0 string, arg1 ecloud.PatchSSHKeyPairRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PatchSSHKeyPair", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchSSHKeyPair indicates an expected call of PatchSSHKeyPair.
func (mr *MockECloudServiceMockRecorder) PatchSSHKeyPair(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchSSHKeyPair", reflect.TypeOf((*MockECloudService)(nil).PatchSSHKeyPair), arg0, arg1)
}

// PatchSolution mocks base method.
func (m *MockECloudService) PatchSolution(arg0 int, arg1 ecloud.PatchSolutionRequest) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PatchSolution", arg0, arg1)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PatchSolution indicates an expected call of PatchSolution.
func (mr *MockECloudServiceMockRecorder) PatchSolution(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchSolution", reflect.TypeOf((*MockECloudService)(nil).PatchSolution), arg0, arg1)
}

// PatchSolutionTag mocks base method.
func (m *MockECloudService) PatchSolutionTag(arg0 int, arg1 string, arg2 ecloud.PatchTagV1Request) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PatchSolutionTag", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchSolutionTag indicates an expected call of PatchSolutionTag.
func (mr *MockECloudServiceMockRecorder) PatchSolutionTag(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchSolutionTag", reflect.TypeOf((*MockECloudService)(nil).PatchSolutionTag), arg0, arg1, arg2)
}

// PatchTag mocks base method.
func (m *MockECloudService) PatchTag(arg0 string, arg1 ecloud.PatchTagRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PatchTag", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchTag indicates an expected call of PatchTag.
func (mr *MockECloudServiceMockRecorder) PatchTag(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchTag", reflect.TypeOf((*MockECloudService)(nil).PatchTag), arg0, arg1)
}

// PatchVIP mocks base method.
func (m *MockECloudService) PatchVIP(arg0 string, arg1 ecloud.PatchVIPRequest) (ecloud.TaskReference, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PatchVIP", arg0, arg1)
	ret0, _ := ret[0].(ecloud.TaskReference)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PatchVIP indicates an expected call of PatchVIP.
func (mr *MockECloudServiceMockRecorder) PatchVIP(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchVIP", reflect.TypeOf((*MockECloudService)(nil).PatchVIP), arg0, arg1)
}

// PatchVPC mocks base method.
func (m *MockECloudService) PatchVPC(arg0 string, arg1 ecloud.PatchVPCRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PatchVPC", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchVPC indicates an expected call of PatchVPC.
func (mr *MockECloudServiceMockRecorder) PatchVPC(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchVPC", reflect.TypeOf((*MockECloudService)(nil).PatchVPC), arg0, arg1)
}

// PatchVPNEndpoint mocks base method.
func (m *MockECloudService) PatchVPNEndpoint(arg0 string, arg1 ecloud.PatchVPNEndpointRequest) (ecloud.TaskReference, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PatchVPNEndpoint", arg0, arg1)
	ret0, _ := ret[0].(ecloud.TaskReference)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PatchVPNEndpoint indicates an expected call of PatchVPNEndpoint.
func (mr *MockECloudServiceMockRecorder) PatchVPNEndpoint(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchVPNEndpoint", reflect.TypeOf((*MockECloudService)(nil).PatchVPNEndpoint), arg0, arg1)
}

// PatchVPNGateway mocks base method.
func (m *MockECloudService) PatchVPNGateway(arg0 string, arg1 ecloud.PatchVPNGatewayRequest) (ecloud.TaskReference, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PatchVPNGateway", arg0, arg1)
	ret0, _ := ret[0].(ecloud.TaskReference)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PatchVPNGateway indicates an expected call of PatchVPNGateway.
func (mr *MockECloudServiceMockRecorder) PatchVPNGateway(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchVPNGateway", reflect.TypeOf((*MockECloudService)(nil).PatchVPNGateway), arg0, arg1)
}

// PatchVPNGatewayUser mocks base method.
func (m *MockECloudService) PatchVPNGatewayUser(arg0 string, arg1 ecloud.PatchVPNGatewayUserRequest) (ecloud.TaskReference, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PatchVPNGatewayUser", arg0, arg1)
	ret0, _ := ret[0].(ecloud.TaskReference)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PatchVPNGatewayUser indicates an expected call of PatchVPNGatewayUser.
func (mr *MockECloudServiceMockRecorder) PatchVPNGatewayUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchVPNGatewayUser", reflect.TypeOf((*MockECloudService)(nil).PatchVPNGatewayUser), arg0, arg1)
}

// PatchVPNService mocks base method.
func (m *MockECloudService) PatchVPNService(arg0 string, arg1 ecloud.PatchVPNServiceRequest) (ecloud.TaskReference, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PatchVPNService", arg0, arg1)
	ret0, _ := ret[0].(ecloud.TaskReference)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PatchVPNService indicates an expected call of PatchVPNService.
func (mr *MockECloudServiceMockRecorder) PatchVPNService(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchVPNService", reflect.TypeOf((*MockECloudService)(nil).PatchVPNService), arg0, arg1)
}

// PatchVPNSession mocks base method.
func (m *MockECloudService) PatchVPNSession(arg0 string, arg1 ecloud.PatchVPNSessionRequest) (ecloud.TaskReference, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PatchVPNSession", arg0, arg1)
	ret0, _ := ret[0].(ecloud.TaskReference)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PatchVPNSession indicates an expected call of PatchVPNSession.
func (mr *MockECloudServiceMockRecorder) PatchVPNSession(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchVPNSession", reflect.TypeOf((*MockECloudService)(nil).PatchVPNSession), arg0, arg1)
}

// PatchVirtualMachine mocks base method.
func (m *MockECloudService) PatchVirtualMachine(arg0 int, arg1 ecloud.PatchVirtualMachineRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PatchVirtualMachine", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchVirtualMachine indicates an expected call of PatchVirtualMachine.
func (mr *MockECloudServiceMockRecorder) PatchVirtualMachine(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchVirtualMachine", reflect.TypeOf((*MockECloudService)(nil).PatchVirtualMachine), arg0, arg1)
}

// PatchVirtualMachineTag mocks base method.
func (m *MockECloudService) PatchVirtualMachineTag(arg0 int, arg1 string, arg2 ecloud.PatchTagV1Request) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PatchVirtualMachineTag", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchVirtualMachineTag indicates an expected call of PatchVirtualMachineTag.
func (mr *MockECloudServiceMockRecorder) PatchVirtualMachineTag(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchVirtualMachineTag", reflect.TypeOf((*MockECloudService)(nil).PatchVirtualMachineTag), arg0, arg1, arg2)
}

// PatchVolume mocks base method.
func (m *MockECloudService) PatchVolume(arg0 string, arg1 ecloud.PatchVolumeRequest) (ecloud.TaskReference, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PatchVolume", arg0, arg1)
	ret0, _ := ret[0].(ecloud.TaskReference)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PatchVolume indicates an expected call of PatchVolume.
func (mr *MockECloudServiceMockRecorder) PatchVolume(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchVolume", reflect.TypeOf((*MockECloudService)(nil).PatchVolume), arg0, arg1)
}

// PatchVolumeGroup mocks base method.
func (m *MockECloudService) PatchVolumeGroup(arg0 string, arg1 ecloud.PatchVolumeGroupRequest) (ecloud.TaskReference, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PatchVolumeGroup", arg0, arg1)
	ret0, _ := ret[0].(ecloud.TaskReference)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PatchVolumeGroup indicates an expected call of PatchVolumeGroup.
func (mr *MockECloudServiceMockRecorder) PatchVolumeGroup(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchVolumeGroup", reflect.TypeOf((*MockECloudService)(nil).PatchVolumeGroup), arg0, arg1)
}

// PodConsoleAvailable mocks base method.
func (m *MockECloudService) PodConsoleAvailable(arg0 int) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PodConsoleAvailable", arg0)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PodConsoleAvailable indicates an expected call of PodConsoleAvailable.
func (mr *MockECloudServiceMockRecorder) PodConsoleAvailable(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PodConsoleAvailable", reflect.TypeOf((*MockECloudService)(nil).PodConsoleAvailable), arg0)
}

// PowerOffInstance mocks base method.
func (m *MockECloudService) PowerOffInstance(arg0 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PowerOffInstance", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PowerOffInstance indicates an expected call of PowerOffInstance.
func (mr *MockECloudServiceMockRecorder) PowerOffInstance(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PowerOffInstance", reflect.TypeOf((*MockECloudService)(nil).PowerOffInstance), arg0)
}

// PowerOffVirtualMachine mocks base method.
func (m *MockECloudService) PowerOffVirtualMachine(arg0 int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PowerOffVirtualMachine", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// PowerOffVirtualMachine indicates an expected call of PowerOffVirtualMachine.
func (mr *MockECloudServiceMockRecorder) PowerOffVirtualMachine(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PowerOffVirtualMachine", reflect.TypeOf((*MockECloudService)(nil).PowerOffVirtualMachine), arg0)
}

// PowerOnInstance mocks base method.
func (m *MockECloudService) PowerOnInstance(arg0 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PowerOnInstance", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PowerOnInstance indicates an expected call of PowerOnInstance.
func (mr *MockECloudServiceMockRecorder) PowerOnInstance(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PowerOnInstance", reflect.TypeOf((*MockECloudService)(nil).PowerOnInstance), arg0)
}

// PowerOnVirtualMachine mocks base method.
func (m *MockECloudService) PowerOnVirtualMachine(arg0 int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PowerOnVirtualMachine", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// PowerOnVirtualMachine indicates an expected call of PowerOnVirtualMachine.
func (mr *MockECloudServiceMockRecorder) PowerOnVirtualMachine(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PowerOnVirtualMachine", reflect.TypeOf((*MockECloudService)(nil).PowerOnVirtualMachine), arg0)
}

// PowerResetInstance mocks base method.
func (m *MockECloudService) PowerResetInstance(arg0 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PowerResetInstance", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PowerResetInstance indicates an expected call of PowerResetInstance.
func (mr *MockECloudServiceMockRecorder) PowerResetInstance(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PowerResetInstance", reflect.TypeOf((*MockECloudService)(nil).PowerResetInstance), arg0)
}

// PowerResetVirtualMachine mocks base method.
func (m *MockECloudService) PowerResetVirtualMachine(arg0 int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PowerResetVirtualMachine", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// PowerResetVirtualMachine indicates an expected call of PowerResetVirtualMachine.
func (mr *MockECloudServiceMockRecorder) PowerResetVirtualMachine(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PowerResetVirtualMachine", reflect.TypeOf((*MockECloudService)(nil).PowerResetVirtualMachine), arg0)
}

// PowerRestartInstance mocks base method.
func (m *MockECloudService) PowerRestartInstance(arg0 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PowerRestartInstance", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PowerRestartInstance indicates an expected call of PowerRestartInstance.
func (mr *MockECloudServiceMockRecorder) PowerRestartInstance(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PowerRestartInstance", reflect.TypeOf((*MockECloudService)(nil).PowerRestartInstance), arg0)
}

// PowerRestartVirtualMachine mocks base method.
func (m *MockECloudService) PowerRestartVirtualMachine(arg0 int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PowerRestartVirtualMachine", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// PowerRestartVirtualMachine indicates an expected call of PowerRestartVirtualMachine.
func (mr *MockECloudServiceMockRecorder) PowerRestartVirtualMachine(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PowerRestartVirtualMachine", reflect.TypeOf((*MockECloudService)(nil).PowerRestartVirtualMachine), arg0)
}

// PowerShutdownInstance mocks base method.
func (m *MockECloudService) PowerShutdownInstance(arg0 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PowerShutdownInstance", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PowerShutdownInstance indicates an expected call of PowerShutdownInstance.
func (mr *MockECloudServiceMockRecorder) PowerShutdownInstance(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PowerShutdownInstance", reflect.TypeOf((*MockECloudService)(nil).PowerShutdownInstance), arg0)
}

// PowerShutdownVirtualMachine mocks base method.
func (m *MockECloudService) PowerShutdownVirtualMachine(arg0 int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PowerShutdownVirtualMachine", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// PowerShutdownVirtualMachine indicates an expected call of PowerShutdownVirtualMachine.
func (mr *MockECloudServiceMockRecorder) PowerShutdownVirtualMachine(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PowerShutdownVirtualMachine", reflect.TypeOf((*MockECloudService)(nil).PowerShutdownVirtualMachine), arg0)
}

// RenamePodTemplate mocks base method.
func (m *MockECloudService) RenamePodTemplate(arg0 int, arg1 string, arg2 ecloud.RenameTemplateRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RenamePodTemplate", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// RenamePodTemplate indicates an expected call of RenamePodTemplate.
func (mr *MockECloudServiceMockRecorder) RenamePodTemplate(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RenamePodTemplate", reflect.TypeOf((*MockECloudService)(nil).RenamePodTemplate), arg0, arg1, arg2)
}

// RenameSolutionTemplate mocks base method.
func (m *MockECloudService) RenameSolutionTemplate(arg0 int, arg1 string, arg2 ecloud.RenameTemplateRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RenameSolutionTemplate", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// RenameSolutionTemplate indicates an expected call of RenameSolutionTemplate.
func (mr *MockECloudServiceMockRecorder) RenameSolutionTemplate(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RenameSolutionTemplate", reflect.TypeOf((*MockECloudService)(nil).RenameSolutionTemplate), arg0, arg1, arg2)
}

// UnassignFloatingIP mocks base method.
func (m *MockECloudService) UnassignFloatingIP(arg0 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnassignFloatingIP", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UnassignFloatingIP indicates an expected call of UnassignFloatingIP.
func (mr *MockECloudServiceMockRecorder) UnassignFloatingIP(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnassignFloatingIP", reflect.TypeOf((*MockECloudService)(nil).UnassignFloatingIP), arg0)
}

// UnassignNICIPAddress mocks base method.
func (m *MockECloudService) UnassignNICIPAddress(arg0, arg1 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnassignNICIPAddress", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UnassignNICIPAddress indicates an expected call of UnassignNICIPAddress.
func (mr *MockECloudServiceMockRecorder) UnassignNICIPAddress(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnassignNICIPAddress", reflect.TypeOf((*MockECloudService)(nil).UnassignNICIPAddress), arg0, arg1)
}

// UnlockInstance mocks base method.
func (m *MockECloudService) UnlockInstance(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnlockInstance", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// UnlockInstance indicates an expected call of UnlockInstance.
func (mr *MockECloudServiceMockRecorder) UnlockInstance(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnlockInstance", reflect.TypeOf((*MockECloudService)(nil).UnlockInstance), arg0)
}

// UpdateImage mocks base method.
func (m *MockECloudService) UpdateImage(arg0 string, arg1 ecloud.UpdateImageRequest) (ecloud.TaskReference, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateImage", arg0, arg1)
	ret0, _ := ret[0].(ecloud.TaskReference)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateImage indicates an expected call of UpdateImage.
func (mr *MockECloudServiceMockRecorder) UpdateImage(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateImage", reflect.TypeOf((*MockECloudService)(nil).UpdateImage), arg0, arg1)
}

// UpdateVPNSessionPreSharedKey mocks base method.
func (m *MockECloudService) UpdateVPNSessionPreSharedKey(arg0 string, arg1 ecloud.UpdateVPNSessionPreSharedKeyRequest) (ecloud.TaskReference, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateVPNSessionPreSharedKey", arg0, arg1)
	ret0, _ := ret[0].(ecloud.TaskReference)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateVPNSessionPreSharedKey indicates an expected call of UpdateVPNSessionPreSharedKey.
func (mr *MockECloudServiceMockRecorder) UpdateVPNSessionPreSharedKey(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateVPNSessionPreSharedKey", reflect.TypeOf((*MockECloudService)(nil).UpdateVPNSessionPreSharedKey), arg0, arg1)
}
