// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/ukfast/sdk-go/pkg/service/ecloud (interfaces: ECloudService)

// Package mocks is a generated GoMock package.
package mocks

import (
	gomock "github.com/golang/mock/gomock"
	connection "github.com/ukfast/sdk-go/pkg/connection"
	account "github.com/ukfast/sdk-go/pkg/service/account"
	ecloud "github.com/ukfast/sdk-go/pkg/service/ecloud"
	reflect "reflect"
)

// MockECloudService is a mock of ECloudService interface
type MockECloudService struct {
	ctrl     *gomock.Controller
	recorder *MockECloudServiceMockRecorder
}

// MockECloudServiceMockRecorder is the mock recorder for MockECloudService
type MockECloudServiceMockRecorder struct {
	mock *MockECloudService
}

// NewMockECloudService creates a new mock instance
func NewMockECloudService(ctrl *gomock.Controller) *MockECloudService {
	mock := &MockECloudService{ctrl: ctrl}
	mock.recorder = &MockECloudServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockECloudService) EXPECT() *MockECloudServiceMockRecorder {
	return m.recorder
}

// AssignFloatingIP mocks base method
func (m *MockECloudService) AssignFloatingIP(arg0 string, arg1 ecloud.AssignFloatingIPRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AssignFloatingIP", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// AssignFloatingIP indicates an expected call of AssignFloatingIP
func (mr *MockECloudServiceMockRecorder) AssignFloatingIP(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AssignFloatingIP", reflect.TypeOf((*MockECloudService)(nil).AssignFloatingIP), arg0, arg1)
}

// CloneVirtualMachine mocks base method
func (m *MockECloudService) CloneVirtualMachine(arg0 int, arg1 ecloud.CloneVirtualMachineRequest) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloneVirtualMachine", arg0, arg1)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CloneVirtualMachine indicates an expected call of CloneVirtualMachine
func (mr *MockECloudServiceMockRecorder) CloneVirtualMachine(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloneVirtualMachine", reflect.TypeOf((*MockECloudService)(nil).CloneVirtualMachine), arg0, arg1)
}

// CreateFirewallPolicy mocks base method
func (m *MockECloudService) CreateFirewallPolicy(arg0 ecloud.CreateFirewallPolicyRequest) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateFirewallPolicy", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateFirewallPolicy indicates an expected call of CreateFirewallPolicy
func (mr *MockECloudServiceMockRecorder) CreateFirewallPolicy(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateFirewallPolicy", reflect.TypeOf((*MockECloudService)(nil).CreateFirewallPolicy), arg0)
}

// CreateFirewallRule mocks base method
func (m *MockECloudService) CreateFirewallRule(arg0 ecloud.CreateFirewallRuleRequest) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateFirewallRule", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateFirewallRule indicates an expected call of CreateFirewallRule
func (mr *MockECloudServiceMockRecorder) CreateFirewallRule(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateFirewallRule", reflect.TypeOf((*MockECloudService)(nil).CreateFirewallRule), arg0)
}

// CreateFirewallRulePort mocks base method
func (m *MockECloudService) CreateFirewallRulePort(arg0 ecloud.CreateFirewallRulePortRequest) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateFirewallRulePort", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateFirewallRulePort indicates an expected call of CreateFirewallRulePort
func (mr *MockECloudServiceMockRecorder) CreateFirewallRulePort(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateFirewallRulePort", reflect.TypeOf((*MockECloudService)(nil).CreateFirewallRulePort), arg0)
}

// CreateFloatingIP mocks base method
func (m *MockECloudService) CreateFloatingIP(arg0 ecloud.CreateFloatingIPRequest) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateFloatingIP", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateFloatingIP indicates an expected call of CreateFloatingIP
func (mr *MockECloudServiceMockRecorder) CreateFloatingIP(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateFloatingIP", reflect.TypeOf((*MockECloudService)(nil).CreateFloatingIP), arg0)
}

// CreateInstance mocks base method
func (m *MockECloudService) CreateInstance(arg0 ecloud.CreateInstanceRequest) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateInstance", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateInstance indicates an expected call of CreateInstance
func (mr *MockECloudServiceMockRecorder) CreateInstance(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateInstance", reflect.TypeOf((*MockECloudService)(nil).CreateInstance), arg0)
}

// CreateInstanceConsoleSession mocks base method
func (m *MockECloudService) CreateInstanceConsoleSession(arg0 string) (ecloud.ConsoleSession, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateInstanceConsoleSession", arg0)
	ret0, _ := ret[0].(ecloud.ConsoleSession)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateInstanceConsoleSession indicates an expected call of CreateInstanceConsoleSession
func (mr *MockECloudServiceMockRecorder) CreateInstanceConsoleSession(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateInstanceConsoleSession", reflect.TypeOf((*MockECloudService)(nil).CreateInstanceConsoleSession), arg0)
}

// CreateNetwork mocks base method
func (m *MockECloudService) CreateNetwork(arg0 ecloud.CreateNetworkRequest) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateNetwork", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateNetwork indicates an expected call of CreateNetwork
func (mr *MockECloudServiceMockRecorder) CreateNetwork(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateNetwork", reflect.TypeOf((*MockECloudService)(nil).CreateNetwork), arg0)
}

// CreateRouter mocks base method
func (m *MockECloudService) CreateRouter(arg0 ecloud.CreateRouterRequest) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRouter", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateRouter indicates an expected call of CreateRouter
func (mr *MockECloudServiceMockRecorder) CreateRouter(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRouter", reflect.TypeOf((*MockECloudService)(nil).CreateRouter), arg0)
}

// CreateSolutionTag mocks base method
func (m *MockECloudService) CreateSolutionTag(arg0 int, arg1 ecloud.CreateTagRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSolutionTag", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateSolutionTag indicates an expected call of CreateSolutionTag
func (mr *MockECloudServiceMockRecorder) CreateSolutionTag(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSolutionTag", reflect.TypeOf((*MockECloudService)(nil).CreateSolutionTag), arg0, arg1)
}

// CreateVPC mocks base method
func (m *MockECloudService) CreateVPC(arg0 ecloud.CreateVPCRequest) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateVPC", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateVPC indicates an expected call of CreateVPC
func (mr *MockECloudServiceMockRecorder) CreateVPC(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateVPC", reflect.TypeOf((*MockECloudService)(nil).CreateVPC), arg0)
}

// CreateVPN mocks base method
func (m *MockECloudService) CreateVPN(arg0 ecloud.CreateVPNRequest) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateVPN", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateVPN indicates an expected call of CreateVPN
func (mr *MockECloudServiceMockRecorder) CreateVPN(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateVPN", reflect.TypeOf((*MockECloudService)(nil).CreateVPN), arg0)
}

// CreateVirtualMachine mocks base method
func (m *MockECloudService) CreateVirtualMachine(arg0 ecloud.CreateVirtualMachineRequest) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateVirtualMachine", arg0)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateVirtualMachine indicates an expected call of CreateVirtualMachine
func (mr *MockECloudServiceMockRecorder) CreateVirtualMachine(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateVirtualMachine", reflect.TypeOf((*MockECloudService)(nil).CreateVirtualMachine), arg0)
}

// CreateVirtualMachineConsoleSession mocks base method
func (m *MockECloudService) CreateVirtualMachineConsoleSession(arg0 int) (ecloud.ConsoleSession, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateVirtualMachineConsoleSession", arg0)
	ret0, _ := ret[0].(ecloud.ConsoleSession)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateVirtualMachineConsoleSession indicates an expected call of CreateVirtualMachineConsoleSession
func (mr *MockECloudServiceMockRecorder) CreateVirtualMachineConsoleSession(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateVirtualMachineConsoleSession", reflect.TypeOf((*MockECloudService)(nil).CreateVirtualMachineConsoleSession), arg0)
}

// CreateVirtualMachineTag mocks base method
func (m *MockECloudService) CreateVirtualMachineTag(arg0 int, arg1 ecloud.CreateTagRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateVirtualMachineTag", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateVirtualMachineTag indicates an expected call of CreateVirtualMachineTag
func (mr *MockECloudServiceMockRecorder) CreateVirtualMachineTag(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateVirtualMachineTag", reflect.TypeOf((*MockECloudService)(nil).CreateVirtualMachineTag), arg0, arg1)
}

// CreateVirtualMachineTemplate mocks base method
func (m *MockECloudService) CreateVirtualMachineTemplate(arg0 int, arg1 ecloud.CreateVirtualMachineTemplateRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateVirtualMachineTemplate", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateVirtualMachineTemplate indicates an expected call of CreateVirtualMachineTemplate
func (mr *MockECloudServiceMockRecorder) CreateVirtualMachineTemplate(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateVirtualMachineTemplate", reflect.TypeOf((*MockECloudService)(nil).CreateVirtualMachineTemplate), arg0, arg1)
}

// CreateVolume mocks base method
func (m *MockECloudService) CreateVolume(arg0 ecloud.CreateVolumeRequest) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateVolume", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateVolume indicates an expected call of CreateVolume
func (mr *MockECloudServiceMockRecorder) CreateVolume(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateVolume", reflect.TypeOf((*MockECloudService)(nil).CreateVolume), arg0)
}

// DeleteFirewallPolicy mocks base method
func (m *MockECloudService) DeleteFirewallPolicy(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteFirewallPolicy", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteFirewallPolicy indicates an expected call of DeleteFirewallPolicy
func (mr *MockECloudServiceMockRecorder) DeleteFirewallPolicy(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFirewallPolicy", reflect.TypeOf((*MockECloudService)(nil).DeleteFirewallPolicy), arg0)
}

// DeleteFirewallRule mocks base method
func (m *MockECloudService) DeleteFirewallRule(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteFirewallRule", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteFirewallRule indicates an expected call of DeleteFirewallRule
func (mr *MockECloudServiceMockRecorder) DeleteFirewallRule(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFirewallRule", reflect.TypeOf((*MockECloudService)(nil).DeleteFirewallRule), arg0)
}

// DeleteFirewallRulePort mocks base method
func (m *MockECloudService) DeleteFirewallRulePort(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteFirewallRulePort", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteFirewallRulePort indicates an expected call of DeleteFirewallRulePort
func (mr *MockECloudServiceMockRecorder) DeleteFirewallRulePort(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFirewallRulePort", reflect.TypeOf((*MockECloudService)(nil).DeleteFirewallRulePort), arg0)
}

// DeleteFloatingIP mocks base method
func (m *MockECloudService) DeleteFloatingIP(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteFloatingIP", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteFloatingIP indicates an expected call of DeleteFloatingIP
func (mr *MockECloudServiceMockRecorder) DeleteFloatingIP(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFloatingIP", reflect.TypeOf((*MockECloudService)(nil).DeleteFloatingIP), arg0)
}

// DeleteInstance mocks base method
func (m *MockECloudService) DeleteInstance(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteInstance", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteInstance indicates an expected call of DeleteInstance
func (mr *MockECloudServiceMockRecorder) DeleteInstance(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteInstance", reflect.TypeOf((*MockECloudService)(nil).DeleteInstance), arg0)
}

// DeleteNetwork mocks base method
func (m *MockECloudService) DeleteNetwork(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteNetwork", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteNetwork indicates an expected call of DeleteNetwork
func (mr *MockECloudServiceMockRecorder) DeleteNetwork(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteNetwork", reflect.TypeOf((*MockECloudService)(nil).DeleteNetwork), arg0)
}

// DeletePodTemplate mocks base method
func (m *MockECloudService) DeletePodTemplate(arg0 int, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePodTemplate", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeletePodTemplate indicates an expected call of DeletePodTemplate
func (mr *MockECloudServiceMockRecorder) DeletePodTemplate(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePodTemplate", reflect.TypeOf((*MockECloudService)(nil).DeletePodTemplate), arg0, arg1)
}

// DeleteRouter mocks base method
func (m *MockECloudService) DeleteRouter(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRouter", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteRouter indicates an expected call of DeleteRouter
func (mr *MockECloudServiceMockRecorder) DeleteRouter(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRouter", reflect.TypeOf((*MockECloudService)(nil).DeleteRouter), arg0)
}

// DeleteSolutionTag mocks base method
func (m *MockECloudService) DeleteSolutionTag(arg0 int, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSolutionTag", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteSolutionTag indicates an expected call of DeleteSolutionTag
func (mr *MockECloudServiceMockRecorder) DeleteSolutionTag(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSolutionTag", reflect.TypeOf((*MockECloudService)(nil).DeleteSolutionTag), arg0, arg1)
}

// DeleteSolutionTemplate mocks base method
func (m *MockECloudService) DeleteSolutionTemplate(arg0 int, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSolutionTemplate", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteSolutionTemplate indicates an expected call of DeleteSolutionTemplate
func (mr *MockECloudServiceMockRecorder) DeleteSolutionTemplate(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSolutionTemplate", reflect.TypeOf((*MockECloudService)(nil).DeleteSolutionTemplate), arg0, arg1)
}

// DeleteVPC mocks base method
func (m *MockECloudService) DeleteVPC(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteVPC", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteVPC indicates an expected call of DeleteVPC
func (mr *MockECloudServiceMockRecorder) DeleteVPC(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteVPC", reflect.TypeOf((*MockECloudService)(nil).DeleteVPC), arg0)
}

// DeleteVPN mocks base method
func (m *MockECloudService) DeleteVPN(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteVPN", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteVPN indicates an expected call of DeleteVPN
func (mr *MockECloudServiceMockRecorder) DeleteVPN(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteVPN", reflect.TypeOf((*MockECloudService)(nil).DeleteVPN), arg0)
}

// DeleteVirtualMachine mocks base method
func (m *MockECloudService) DeleteVirtualMachine(arg0 int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteVirtualMachine", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteVirtualMachine indicates an expected call of DeleteVirtualMachine
func (mr *MockECloudServiceMockRecorder) DeleteVirtualMachine(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteVirtualMachine", reflect.TypeOf((*MockECloudService)(nil).DeleteVirtualMachine), arg0)
}

// DeleteVirtualMachineTag mocks base method
func (m *MockECloudService) DeleteVirtualMachineTag(arg0 int, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteVirtualMachineTag", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteVirtualMachineTag indicates an expected call of DeleteVirtualMachineTag
func (mr *MockECloudServiceMockRecorder) DeleteVirtualMachineTag(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteVirtualMachineTag", reflect.TypeOf((*MockECloudService)(nil).DeleteVirtualMachineTag), arg0, arg1)
}

// DeleteVolume mocks base method
func (m *MockECloudService) DeleteVolume(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteVolume", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteVolume indicates an expected call of DeleteVolume
func (mr *MockECloudServiceMockRecorder) DeleteVolume(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteVolume", reflect.TypeOf((*MockECloudService)(nil).DeleteVolume), arg0)
}

// DeployRouterDefaultFirewallPolicies mocks base method
func (m *MockECloudService) DeployRouterDefaultFirewallPolicies(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeployRouterDefaultFirewallPolicies", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeployRouterDefaultFirewallPolicies indicates an expected call of DeployRouterDefaultFirewallPolicies
func (mr *MockECloudServiceMockRecorder) DeployRouterDefaultFirewallPolicies(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeployRouterDefaultFirewallPolicies", reflect.TypeOf((*MockECloudService)(nil).DeployRouterDefaultFirewallPolicies), arg0)
}

// DeployVPCDefaults mocks base method
func (m *MockECloudService) DeployVPCDefaults(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeployVPCDefaults", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeployVPCDefaults indicates an expected call of DeployVPCDefaults
func (mr *MockECloudServiceMockRecorder) DeployVPCDefaults(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeployVPCDefaults", reflect.TypeOf((*MockECloudService)(nil).DeployVPCDefaults), arg0)
}

// GetActiveDirectoryDomain mocks base method
func (m *MockECloudService) GetActiveDirectoryDomain(arg0 int) (ecloud.ActiveDirectoryDomain, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetActiveDirectoryDomain", arg0)
	ret0, _ := ret[0].(ecloud.ActiveDirectoryDomain)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetActiveDirectoryDomain indicates an expected call of GetActiveDirectoryDomain
func (mr *MockECloudServiceMockRecorder) GetActiveDirectoryDomain(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetActiveDirectoryDomain", reflect.TypeOf((*MockECloudService)(nil).GetActiveDirectoryDomain), arg0)
}

// GetActiveDirectoryDomains mocks base method
func (m *MockECloudService) GetActiveDirectoryDomains(arg0 connection.APIRequestParameters) ([]ecloud.ActiveDirectoryDomain, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetActiveDirectoryDomains", arg0)
	ret0, _ := ret[0].([]ecloud.ActiveDirectoryDomain)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetActiveDirectoryDomains indicates an expected call of GetActiveDirectoryDomains
func (mr *MockECloudServiceMockRecorder) GetActiveDirectoryDomains(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetActiveDirectoryDomains", reflect.TypeOf((*MockECloudService)(nil).GetActiveDirectoryDomains), arg0)
}

// GetActiveDirectoryDomainsPaginated mocks base method
func (m *MockECloudService) GetActiveDirectoryDomainsPaginated(arg0 connection.APIRequestParameters) (*ecloud.PaginatedActiveDirectoryDomain, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetActiveDirectoryDomainsPaginated", arg0)
	ret0, _ := ret[0].(*ecloud.PaginatedActiveDirectoryDomain)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetActiveDirectoryDomainsPaginated indicates an expected call of GetActiveDirectoryDomainsPaginated
func (mr *MockECloudServiceMockRecorder) GetActiveDirectoryDomainsPaginated(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetActiveDirectoryDomainsPaginated", reflect.TypeOf((*MockECloudService)(nil).GetActiveDirectoryDomainsPaginated), arg0)
}

// GetAppliance mocks base method
func (m *MockECloudService) GetAppliance(arg0 string) (ecloud.Appliance, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAppliance", arg0)
	ret0, _ := ret[0].(ecloud.Appliance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAppliance indicates an expected call of GetAppliance
func (mr *MockECloudServiceMockRecorder) GetAppliance(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAppliance", reflect.TypeOf((*MockECloudService)(nil).GetAppliance), arg0)
}

// GetApplianceParameters mocks base method
func (m *MockECloudService) GetApplianceParameters(arg0 string, arg1 connection.APIRequestParameters) ([]ecloud.ApplianceParameter, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetApplianceParameters", arg0, arg1)
	ret0, _ := ret[0].([]ecloud.ApplianceParameter)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetApplianceParameters indicates an expected call of GetApplianceParameters
func (mr *MockECloudServiceMockRecorder) GetApplianceParameters(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetApplianceParameters", reflect.TypeOf((*MockECloudService)(nil).GetApplianceParameters), arg0, arg1)
}

// GetApplianceParametersPaginated mocks base method
func (m *MockECloudService) GetApplianceParametersPaginated(arg0 string, arg1 connection.APIRequestParameters) (*ecloud.PaginatedApplianceParameter, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetApplianceParametersPaginated", arg0, arg1)
	ret0, _ := ret[0].(*ecloud.PaginatedApplianceParameter)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetApplianceParametersPaginated indicates an expected call of GetApplianceParametersPaginated
func (mr *MockECloudServiceMockRecorder) GetApplianceParametersPaginated(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetApplianceParametersPaginated", reflect.TypeOf((*MockECloudService)(nil).GetApplianceParametersPaginated), arg0, arg1)
}

// GetAppliances mocks base method
func (m *MockECloudService) GetAppliances(arg0 connection.APIRequestParameters) ([]ecloud.Appliance, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAppliances", arg0)
	ret0, _ := ret[0].([]ecloud.Appliance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAppliances indicates an expected call of GetAppliances
func (mr *MockECloudServiceMockRecorder) GetAppliances(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAppliances", reflect.TypeOf((*MockECloudService)(nil).GetAppliances), arg0)
}

// GetAppliancesPaginated mocks base method
func (m *MockECloudService) GetAppliancesPaginated(arg0 connection.APIRequestParameters) (*ecloud.PaginatedAppliance, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAppliancesPaginated", arg0)
	ret0, _ := ret[0].(*ecloud.PaginatedAppliance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAppliancesPaginated indicates an expected call of GetAppliancesPaginated
func (mr *MockECloudServiceMockRecorder) GetAppliancesPaginated(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAppliancesPaginated", reflect.TypeOf((*MockECloudService)(nil).GetAppliancesPaginated), arg0)
}

// GetAvailabilityZone mocks base method
func (m *MockECloudService) GetAvailabilityZone(arg0 string) (ecloud.AvailabilityZone, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAvailabilityZone", arg0)
	ret0, _ := ret[0].(ecloud.AvailabilityZone)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAvailabilityZone indicates an expected call of GetAvailabilityZone
func (mr *MockECloudServiceMockRecorder) GetAvailabilityZone(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAvailabilityZone", reflect.TypeOf((*MockECloudService)(nil).GetAvailabilityZone), arg0)
}

// GetAvailabilityZones mocks base method
func (m *MockECloudService) GetAvailabilityZones(arg0 connection.APIRequestParameters) ([]ecloud.AvailabilityZone, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAvailabilityZones", arg0)
	ret0, _ := ret[0].([]ecloud.AvailabilityZone)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAvailabilityZones indicates an expected call of GetAvailabilityZones
func (mr *MockECloudServiceMockRecorder) GetAvailabilityZones(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAvailabilityZones", reflect.TypeOf((*MockECloudService)(nil).GetAvailabilityZones), arg0)
}

// GetAvailabilityZonesPaginated mocks base method
func (m *MockECloudService) GetAvailabilityZonesPaginated(arg0 connection.APIRequestParameters) (*ecloud.PaginatedAvailabilityZone, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAvailabilityZonesPaginated", arg0)
	ret0, _ := ret[0].(*ecloud.PaginatedAvailabilityZone)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAvailabilityZonesPaginated indicates an expected call of GetAvailabilityZonesPaginated
func (mr *MockECloudServiceMockRecorder) GetAvailabilityZonesPaginated(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAvailabilityZonesPaginated", reflect.TypeOf((*MockECloudService)(nil).GetAvailabilityZonesPaginated), arg0)
}

// GetBillingMetric mocks base method
func (m *MockECloudService) GetBillingMetric(arg0 string) (ecloud.BillingMetric, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBillingMetric", arg0)
	ret0, _ := ret[0].(ecloud.BillingMetric)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBillingMetric indicates an expected call of GetBillingMetric
func (mr *MockECloudServiceMockRecorder) GetBillingMetric(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBillingMetric", reflect.TypeOf((*MockECloudService)(nil).GetBillingMetric), arg0)
}

// GetBillingMetrics mocks base method
func (m *MockECloudService) GetBillingMetrics(arg0 connection.APIRequestParameters) ([]ecloud.BillingMetric, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBillingMetrics", arg0)
	ret0, _ := ret[0].([]ecloud.BillingMetric)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBillingMetrics indicates an expected call of GetBillingMetrics
func (mr *MockECloudServiceMockRecorder) GetBillingMetrics(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBillingMetrics", reflect.TypeOf((*MockECloudService)(nil).GetBillingMetrics), arg0)
}

// GetBillingMetricsPaginated mocks base method
func (m *MockECloudService) GetBillingMetricsPaginated(arg0 connection.APIRequestParameters) (*ecloud.PaginatedBillingMetric, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBillingMetricsPaginated", arg0)
	ret0, _ := ret[0].(*ecloud.PaginatedBillingMetric)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBillingMetricsPaginated indicates an expected call of GetBillingMetricsPaginated
func (mr *MockECloudServiceMockRecorder) GetBillingMetricsPaginated(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBillingMetricsPaginated", reflect.TypeOf((*MockECloudService)(nil).GetBillingMetricsPaginated), arg0)
}

// GetCredits mocks base method
func (m *MockECloudService) GetCredits(arg0 connection.APIRequestParameters) ([]account.Credit, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCredits", arg0)
	ret0, _ := ret[0].([]account.Credit)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCredits indicates an expected call of GetCredits
func (mr *MockECloudServiceMockRecorder) GetCredits(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCredits", reflect.TypeOf((*MockECloudService)(nil).GetCredits), arg0)
}

// GetDHCP mocks base method
func (m *MockECloudService) GetDHCP(arg0 string) (ecloud.DHCP, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDHCP", arg0)
	ret0, _ := ret[0].(ecloud.DHCP)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDHCP indicates an expected call of GetDHCP
func (mr *MockECloudServiceMockRecorder) GetDHCP(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDHCP", reflect.TypeOf((*MockECloudService)(nil).GetDHCP), arg0)
}

// GetDHCPs mocks base method
func (m *MockECloudService) GetDHCPs(arg0 connection.APIRequestParameters) ([]ecloud.DHCP, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDHCPs", arg0)
	ret0, _ := ret[0].([]ecloud.DHCP)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDHCPs indicates an expected call of GetDHCPs
func (mr *MockECloudServiceMockRecorder) GetDHCPs(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDHCPs", reflect.TypeOf((*MockECloudService)(nil).GetDHCPs), arg0)
}

// GetDHCPsPaginated mocks base method
func (m *MockECloudService) GetDHCPsPaginated(arg0 connection.APIRequestParameters) (*ecloud.PaginatedDHCP, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDHCPsPaginated", arg0)
	ret0, _ := ret[0].(*ecloud.PaginatedDHCP)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDHCPsPaginated indicates an expected call of GetDHCPsPaginated
func (mr *MockECloudServiceMockRecorder) GetDHCPsPaginated(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDHCPsPaginated", reflect.TypeOf((*MockECloudService)(nil).GetDHCPsPaginated), arg0)
}

// GetDatastore mocks base method
func (m *MockECloudService) GetDatastore(arg0 int) (ecloud.Datastore, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDatastore", arg0)
	ret0, _ := ret[0].(ecloud.Datastore)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDatastore indicates an expected call of GetDatastore
func (mr *MockECloudServiceMockRecorder) GetDatastore(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDatastore", reflect.TypeOf((*MockECloudService)(nil).GetDatastore), arg0)
}

// GetDatastores mocks base method
func (m *MockECloudService) GetDatastores(arg0 connection.APIRequestParameters) ([]ecloud.Datastore, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDatastores", arg0)
	ret0, _ := ret[0].([]ecloud.Datastore)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDatastores indicates an expected call of GetDatastores
func (mr *MockECloudServiceMockRecorder) GetDatastores(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDatastores", reflect.TypeOf((*MockECloudService)(nil).GetDatastores), arg0)
}

// GetDatastoresPaginated mocks base method
func (m *MockECloudService) GetDatastoresPaginated(arg0 connection.APIRequestParameters) (*ecloud.PaginatedDatastore, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDatastoresPaginated", arg0)
	ret0, _ := ret[0].(*ecloud.PaginatedDatastore)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDatastoresPaginated indicates an expected call of GetDatastoresPaginated
func (mr *MockECloudServiceMockRecorder) GetDatastoresPaginated(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDatastoresPaginated", reflect.TypeOf((*MockECloudService)(nil).GetDatastoresPaginated), arg0)
}

// GetFirewall mocks base method
func (m *MockECloudService) GetFirewall(arg0 int) (ecloud.Firewall, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFirewall", arg0)
	ret0, _ := ret[0].(ecloud.Firewall)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFirewall indicates an expected call of GetFirewall
func (mr *MockECloudServiceMockRecorder) GetFirewall(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFirewall", reflect.TypeOf((*MockECloudService)(nil).GetFirewall), arg0)
}

// GetFirewallConfig mocks base method
func (m *MockECloudService) GetFirewallConfig(arg0 int) (ecloud.FirewallConfig, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFirewallConfig", arg0)
	ret0, _ := ret[0].(ecloud.FirewallConfig)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFirewallConfig indicates an expected call of GetFirewallConfig
func (mr *MockECloudServiceMockRecorder) GetFirewallConfig(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFirewallConfig", reflect.TypeOf((*MockECloudService)(nil).GetFirewallConfig), arg0)
}

// GetFirewallPolicies mocks base method
func (m *MockECloudService) GetFirewallPolicies(arg0 connection.APIRequestParameters) ([]ecloud.FirewallPolicy, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFirewallPolicies", arg0)
	ret0, _ := ret[0].([]ecloud.FirewallPolicy)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFirewallPolicies indicates an expected call of GetFirewallPolicies
func (mr *MockECloudServiceMockRecorder) GetFirewallPolicies(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFirewallPolicies", reflect.TypeOf((*MockECloudService)(nil).GetFirewallPolicies), arg0)
}

// GetFirewallPoliciesPaginated mocks base method
func (m *MockECloudService) GetFirewallPoliciesPaginated(arg0 connection.APIRequestParameters) (*ecloud.PaginatedFirewallPolicy, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFirewallPoliciesPaginated", arg0)
	ret0, _ := ret[0].(*ecloud.PaginatedFirewallPolicy)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFirewallPoliciesPaginated indicates an expected call of GetFirewallPoliciesPaginated
func (mr *MockECloudServiceMockRecorder) GetFirewallPoliciesPaginated(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFirewallPoliciesPaginated", reflect.TypeOf((*MockECloudService)(nil).GetFirewallPoliciesPaginated), arg0)
}

// GetFirewallPolicy mocks base method
func (m *MockECloudService) GetFirewallPolicy(arg0 string) (ecloud.FirewallPolicy, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFirewallPolicy", arg0)
	ret0, _ := ret[0].(ecloud.FirewallPolicy)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFirewallPolicy indicates an expected call of GetFirewallPolicy
func (mr *MockECloudServiceMockRecorder) GetFirewallPolicy(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFirewallPolicy", reflect.TypeOf((*MockECloudService)(nil).GetFirewallPolicy), arg0)
}

// GetFirewallPolicyFirewallRules mocks base method
func (m *MockECloudService) GetFirewallPolicyFirewallRules(arg0 string, arg1 connection.APIRequestParameters) ([]ecloud.FirewallRule, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFirewallPolicyFirewallRules", arg0, arg1)
	ret0, _ := ret[0].([]ecloud.FirewallRule)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFirewallPolicyFirewallRules indicates an expected call of GetFirewallPolicyFirewallRules
func (mr *MockECloudServiceMockRecorder) GetFirewallPolicyFirewallRules(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFirewallPolicyFirewallRules", reflect.TypeOf((*MockECloudService)(nil).GetFirewallPolicyFirewallRules), arg0, arg1)
}

// GetFirewallPolicyFirewallRulesPaginated mocks base method
func (m *MockECloudService) GetFirewallPolicyFirewallRulesPaginated(arg0 string, arg1 connection.APIRequestParameters) (*ecloud.PaginatedFirewallRule, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFirewallPolicyFirewallRulesPaginated", arg0, arg1)
	ret0, _ := ret[0].(*ecloud.PaginatedFirewallRule)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFirewallPolicyFirewallRulesPaginated indicates an expected call of GetFirewallPolicyFirewallRulesPaginated
func (mr *MockECloudServiceMockRecorder) GetFirewallPolicyFirewallRulesPaginated(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFirewallPolicyFirewallRulesPaginated", reflect.TypeOf((*MockECloudService)(nil).GetFirewallPolicyFirewallRulesPaginated), arg0, arg1)
}

// GetFirewallRule mocks base method
func (m *MockECloudService) GetFirewallRule(arg0 string) (ecloud.FirewallRule, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFirewallRule", arg0)
	ret0, _ := ret[0].(ecloud.FirewallRule)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFirewallRule indicates an expected call of GetFirewallRule
func (mr *MockECloudServiceMockRecorder) GetFirewallRule(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFirewallRule", reflect.TypeOf((*MockECloudService)(nil).GetFirewallRule), arg0)
}

// GetFirewallRuleFirewallRulePorts mocks base method
func (m *MockECloudService) GetFirewallRuleFirewallRulePorts(arg0 string, arg1 connection.APIRequestParameters) ([]ecloud.FirewallRulePort, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFirewallRuleFirewallRulePorts", arg0, arg1)
	ret0, _ := ret[0].([]ecloud.FirewallRulePort)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFirewallRuleFirewallRulePorts indicates an expected call of GetFirewallRuleFirewallRulePorts
func (mr *MockECloudServiceMockRecorder) GetFirewallRuleFirewallRulePorts(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFirewallRuleFirewallRulePorts", reflect.TypeOf((*MockECloudService)(nil).GetFirewallRuleFirewallRulePorts), arg0, arg1)
}

// GetFirewallRuleFirewallRulePortsPaginated mocks base method
func (m *MockECloudService) GetFirewallRuleFirewallRulePortsPaginated(arg0 string, arg1 connection.APIRequestParameters) (*ecloud.PaginatedFirewallRulePort, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFirewallRuleFirewallRulePortsPaginated", arg0, arg1)
	ret0, _ := ret[0].(*ecloud.PaginatedFirewallRulePort)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFirewallRuleFirewallRulePortsPaginated indicates an expected call of GetFirewallRuleFirewallRulePortsPaginated
func (mr *MockECloudServiceMockRecorder) GetFirewallRuleFirewallRulePortsPaginated(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFirewallRuleFirewallRulePortsPaginated", reflect.TypeOf((*MockECloudService)(nil).GetFirewallRuleFirewallRulePortsPaginated), arg0, arg1)
}

// GetFirewallRulePort mocks base method
func (m *MockECloudService) GetFirewallRulePort(arg0 string) (ecloud.FirewallRulePort, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFirewallRulePort", arg0)
	ret0, _ := ret[0].(ecloud.FirewallRulePort)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFirewallRulePort indicates an expected call of GetFirewallRulePort
func (mr *MockECloudServiceMockRecorder) GetFirewallRulePort(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFirewallRulePort", reflect.TypeOf((*MockECloudService)(nil).GetFirewallRulePort), arg0)
}

// GetFirewallRulePorts mocks base method
func (m *MockECloudService) GetFirewallRulePorts(arg0 connection.APIRequestParameters) ([]ecloud.FirewallRulePort, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFirewallRulePorts", arg0)
	ret0, _ := ret[0].([]ecloud.FirewallRulePort)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFirewallRulePorts indicates an expected call of GetFirewallRulePorts
func (mr *MockECloudServiceMockRecorder) GetFirewallRulePorts(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFirewallRulePorts", reflect.TypeOf((*MockECloudService)(nil).GetFirewallRulePorts), arg0)
}

// GetFirewallRulePortsPaginated mocks base method
func (m *MockECloudService) GetFirewallRulePortsPaginated(arg0 connection.APIRequestParameters) (*ecloud.PaginatedFirewallRulePort, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFirewallRulePortsPaginated", arg0)
	ret0, _ := ret[0].(*ecloud.PaginatedFirewallRulePort)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFirewallRulePortsPaginated indicates an expected call of GetFirewallRulePortsPaginated
func (mr *MockECloudServiceMockRecorder) GetFirewallRulePortsPaginated(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFirewallRulePortsPaginated", reflect.TypeOf((*MockECloudService)(nil).GetFirewallRulePortsPaginated), arg0)
}

// GetFirewallRules mocks base method
func (m *MockECloudService) GetFirewallRules(arg0 connection.APIRequestParameters) ([]ecloud.FirewallRule, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFirewallRules", arg0)
	ret0, _ := ret[0].([]ecloud.FirewallRule)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFirewallRules indicates an expected call of GetFirewallRules
func (mr *MockECloudServiceMockRecorder) GetFirewallRules(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFirewallRules", reflect.TypeOf((*MockECloudService)(nil).GetFirewallRules), arg0)
}

// GetFirewallRulesPaginated mocks base method
func (m *MockECloudService) GetFirewallRulesPaginated(arg0 connection.APIRequestParameters) (*ecloud.PaginatedFirewallRule, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFirewallRulesPaginated", arg0)
	ret0, _ := ret[0].(*ecloud.PaginatedFirewallRule)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFirewallRulesPaginated indicates an expected call of GetFirewallRulesPaginated
func (mr *MockECloudServiceMockRecorder) GetFirewallRulesPaginated(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFirewallRulesPaginated", reflect.TypeOf((*MockECloudService)(nil).GetFirewallRulesPaginated), arg0)
}

// GetFirewalls mocks base method
func (m *MockECloudService) GetFirewalls(arg0 connection.APIRequestParameters) ([]ecloud.Firewall, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFirewalls", arg0)
	ret0, _ := ret[0].([]ecloud.Firewall)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFirewalls indicates an expected call of GetFirewalls
func (mr *MockECloudServiceMockRecorder) GetFirewalls(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFirewalls", reflect.TypeOf((*MockECloudService)(nil).GetFirewalls), arg0)
}

// GetFirewallsPaginated mocks base method
func (m *MockECloudService) GetFirewallsPaginated(arg0 connection.APIRequestParameters) (*ecloud.PaginatedFirewall, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFirewallsPaginated", arg0)
	ret0, _ := ret[0].(*ecloud.PaginatedFirewall)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFirewallsPaginated indicates an expected call of GetFirewallsPaginated
func (mr *MockECloudServiceMockRecorder) GetFirewallsPaginated(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFirewallsPaginated", reflect.TypeOf((*MockECloudService)(nil).GetFirewallsPaginated), arg0)
}

// GetFloatingIP mocks base method
func (m *MockECloudService) GetFloatingIP(arg0 string) (ecloud.FloatingIP, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFloatingIP", arg0)
	ret0, _ := ret[0].(ecloud.FloatingIP)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFloatingIP indicates an expected call of GetFloatingIP
func (mr *MockECloudServiceMockRecorder) GetFloatingIP(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFloatingIP", reflect.TypeOf((*MockECloudService)(nil).GetFloatingIP), arg0)
}

// GetFloatingIPs mocks base method
func (m *MockECloudService) GetFloatingIPs(arg0 connection.APIRequestParameters) ([]ecloud.FloatingIP, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFloatingIPs", arg0)
	ret0, _ := ret[0].([]ecloud.FloatingIP)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFloatingIPs indicates an expected call of GetFloatingIPs
func (mr *MockECloudServiceMockRecorder) GetFloatingIPs(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFloatingIPs", reflect.TypeOf((*MockECloudService)(nil).GetFloatingIPs), arg0)
}

// GetFloatingIPsPaginated mocks base method
func (m *MockECloudService) GetFloatingIPsPaginated(arg0 connection.APIRequestParameters) (*ecloud.PaginatedFloatingIP, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFloatingIPsPaginated", arg0)
	ret0, _ := ret[0].(*ecloud.PaginatedFloatingIP)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFloatingIPsPaginated indicates an expected call of GetFloatingIPsPaginated
func (mr *MockECloudServiceMockRecorder) GetFloatingIPsPaginated(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFloatingIPsPaginated", reflect.TypeOf((*MockECloudService)(nil).GetFloatingIPsPaginated), arg0)
}

// GetHost mocks base method
func (m *MockECloudService) GetHost(arg0 int) (ecloud.Host, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHost", arg0)
	ret0, _ := ret[0].(ecloud.Host)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetHost indicates an expected call of GetHost
func (mr *MockECloudServiceMockRecorder) GetHost(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHost", reflect.TypeOf((*MockECloudService)(nil).GetHost), arg0)
}

// GetHosts mocks base method
func (m *MockECloudService) GetHosts(arg0 connection.APIRequestParameters) ([]ecloud.Host, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHosts", arg0)
	ret0, _ := ret[0].([]ecloud.Host)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetHosts indicates an expected call of GetHosts
func (mr *MockECloudServiceMockRecorder) GetHosts(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHosts", reflect.TypeOf((*MockECloudService)(nil).GetHosts), arg0)
}

// GetHostsPaginated mocks base method
func (m *MockECloudService) GetHostsPaginated(arg0 connection.APIRequestParameters) (*ecloud.PaginatedHost, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHostsPaginated", arg0)
	ret0, _ := ret[0].(*ecloud.PaginatedHost)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetHostsPaginated indicates an expected call of GetHostsPaginated
func (mr *MockECloudServiceMockRecorder) GetHostsPaginated(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHostsPaginated", reflect.TypeOf((*MockECloudService)(nil).GetHostsPaginated), arg0)
}

// GetImage mocks base method
func (m *MockECloudService) GetImage(arg0 string) (ecloud.Image, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetImage", arg0)
	ret0, _ := ret[0].(ecloud.Image)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetImage indicates an expected call of GetImage
func (mr *MockECloudServiceMockRecorder) GetImage(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetImage", reflect.TypeOf((*MockECloudService)(nil).GetImage), arg0)
}

// GetImageMetadata mocks base method
func (m *MockECloudService) GetImageMetadata(arg0 string, arg1 connection.APIRequestParameters) ([]ecloud.ImageMetadata, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetImageMetadata", arg0, arg1)
	ret0, _ := ret[0].([]ecloud.ImageMetadata)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetImageMetadata indicates an expected call of GetImageMetadata
func (mr *MockECloudServiceMockRecorder) GetImageMetadata(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetImageMetadata", reflect.TypeOf((*MockECloudService)(nil).GetImageMetadata), arg0, arg1)
}

// GetImageMetadataPaginated mocks base method
func (m *MockECloudService) GetImageMetadataPaginated(arg0 string, arg1 connection.APIRequestParameters) (*ecloud.PaginatedImageMetadata, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetImageMetadataPaginated", arg0, arg1)
	ret0, _ := ret[0].(*ecloud.PaginatedImageMetadata)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetImageMetadataPaginated indicates an expected call of GetImageMetadataPaginated
func (mr *MockECloudServiceMockRecorder) GetImageMetadataPaginated(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetImageMetadataPaginated", reflect.TypeOf((*MockECloudService)(nil).GetImageMetadataPaginated), arg0, arg1)
}

// GetImageParameters mocks base method
func (m *MockECloudService) GetImageParameters(arg0 string, arg1 connection.APIRequestParameters) ([]ecloud.ImageParameter, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetImageParameters", arg0, arg1)
	ret0, _ := ret[0].([]ecloud.ImageParameter)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetImageParameters indicates an expected call of GetImageParameters
func (mr *MockECloudServiceMockRecorder) GetImageParameters(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetImageParameters", reflect.TypeOf((*MockECloudService)(nil).GetImageParameters), arg0, arg1)
}

// GetImageParametersPaginated mocks base method
func (m *MockECloudService) GetImageParametersPaginated(arg0 string, arg1 connection.APIRequestParameters) (*ecloud.PaginatedImageParameter, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetImageParametersPaginated", arg0, arg1)
	ret0, _ := ret[0].(*ecloud.PaginatedImageParameter)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetImageParametersPaginated indicates an expected call of GetImageParametersPaginated
func (mr *MockECloudServiceMockRecorder) GetImageParametersPaginated(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetImageParametersPaginated", reflect.TypeOf((*MockECloudService)(nil).GetImageParametersPaginated), arg0, arg1)
}

// GetImages mocks base method
func (m *MockECloudService) GetImages(arg0 connection.APIRequestParameters) ([]ecloud.Image, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetImages", arg0)
	ret0, _ := ret[0].([]ecloud.Image)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetImages indicates an expected call of GetImages
func (mr *MockECloudServiceMockRecorder) GetImages(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetImages", reflect.TypeOf((*MockECloudService)(nil).GetImages), arg0)
}

// GetImagesPaginated mocks base method
func (m *MockECloudService) GetImagesPaginated(arg0 connection.APIRequestParameters) (*ecloud.PaginatedImage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetImagesPaginated", arg0)
	ret0, _ := ret[0].(*ecloud.PaginatedImage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetImagesPaginated indicates an expected call of GetImagesPaginated
func (mr *MockECloudServiceMockRecorder) GetImagesPaginated(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetImagesPaginated", reflect.TypeOf((*MockECloudService)(nil).GetImagesPaginated), arg0)
}

// GetInstance mocks base method
func (m *MockECloudService) GetInstance(arg0 string) (ecloud.Instance, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInstance", arg0)
	ret0, _ := ret[0].(ecloud.Instance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInstance indicates an expected call of GetInstance
func (mr *MockECloudServiceMockRecorder) GetInstance(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInstance", reflect.TypeOf((*MockECloudService)(nil).GetInstance), arg0)
}

// GetInstanceCredentials mocks base method
func (m *MockECloudService) GetInstanceCredentials(arg0 string, arg1 connection.APIRequestParameters) ([]ecloud.Credential, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInstanceCredentials", arg0, arg1)
	ret0, _ := ret[0].([]ecloud.Credential)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInstanceCredentials indicates an expected call of GetInstanceCredentials
func (mr *MockECloudServiceMockRecorder) GetInstanceCredentials(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInstanceCredentials", reflect.TypeOf((*MockECloudService)(nil).GetInstanceCredentials), arg0, arg1)
}

// GetInstanceCredentialsPaginated mocks base method
func (m *MockECloudService) GetInstanceCredentialsPaginated(arg0 string, arg1 connection.APIRequestParameters) (*ecloud.PaginatedCredential, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInstanceCredentialsPaginated", arg0, arg1)
	ret0, _ := ret[0].(*ecloud.PaginatedCredential)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInstanceCredentialsPaginated indicates an expected call of GetInstanceCredentialsPaginated
func (mr *MockECloudServiceMockRecorder) GetInstanceCredentialsPaginated(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInstanceCredentialsPaginated", reflect.TypeOf((*MockECloudService)(nil).GetInstanceCredentialsPaginated), arg0, arg1)
}

// GetInstanceNICs mocks base method
func (m *MockECloudService) GetInstanceNICs(arg0 string, arg1 connection.APIRequestParameters) ([]ecloud.NIC, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInstanceNICs", arg0, arg1)
	ret0, _ := ret[0].([]ecloud.NIC)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInstanceNICs indicates an expected call of GetInstanceNICs
func (mr *MockECloudServiceMockRecorder) GetInstanceNICs(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInstanceNICs", reflect.TypeOf((*MockECloudService)(nil).GetInstanceNICs), arg0, arg1)
}

// GetInstanceNICsPaginated mocks base method
func (m *MockECloudService) GetInstanceNICsPaginated(arg0 string, arg1 connection.APIRequestParameters) (*ecloud.PaginatedNIC, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInstanceNICsPaginated", arg0, arg1)
	ret0, _ := ret[0].(*ecloud.PaginatedNIC)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInstanceNICsPaginated indicates an expected call of GetInstanceNICsPaginated
func (mr *MockECloudServiceMockRecorder) GetInstanceNICsPaginated(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInstanceNICsPaginated", reflect.TypeOf((*MockECloudService)(nil).GetInstanceNICsPaginated), arg0, arg1)
}

// GetInstanceVolumes mocks base method
func (m *MockECloudService) GetInstanceVolumes(arg0 string, arg1 connection.APIRequestParameters) ([]ecloud.Volume, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInstanceVolumes", arg0, arg1)
	ret0, _ := ret[0].([]ecloud.Volume)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInstanceVolumes indicates an expected call of GetInstanceVolumes
func (mr *MockECloudServiceMockRecorder) GetInstanceVolumes(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInstanceVolumes", reflect.TypeOf((*MockECloudService)(nil).GetInstanceVolumes), arg0, arg1)
}

// GetInstanceVolumesPaginated mocks base method
func (m *MockECloudService) GetInstanceVolumesPaginated(arg0 string, arg1 connection.APIRequestParameters) (*ecloud.PaginatedVolume, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInstanceVolumesPaginated", arg0, arg1)
	ret0, _ := ret[0].(*ecloud.PaginatedVolume)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInstanceVolumesPaginated indicates an expected call of GetInstanceVolumesPaginated
func (mr *MockECloudServiceMockRecorder) GetInstanceVolumesPaginated(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInstanceVolumesPaginated", reflect.TypeOf((*MockECloudService)(nil).GetInstanceVolumesPaginated), arg0, arg1)
}

// GetInstances mocks base method
func (m *MockECloudService) GetInstances(arg0 connection.APIRequestParameters) ([]ecloud.Instance, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInstances", arg0)
	ret0, _ := ret[0].([]ecloud.Instance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInstances indicates an expected call of GetInstances
func (mr *MockECloudServiceMockRecorder) GetInstances(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInstances", reflect.TypeOf((*MockECloudService)(nil).GetInstances), arg0)
}

// GetInstancesPaginated mocks base method
func (m *MockECloudService) GetInstancesPaginated(arg0 connection.APIRequestParameters) (*ecloud.PaginatedInstance, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInstancesPaginated", arg0)
	ret0, _ := ret[0].(*ecloud.PaginatedInstance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInstancesPaginated indicates an expected call of GetInstancesPaginated
func (mr *MockECloudServiceMockRecorder) GetInstancesPaginated(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInstancesPaginated", reflect.TypeOf((*MockECloudService)(nil).GetInstancesPaginated), arg0)
}

// GetNIC mocks base method
func (m *MockECloudService) GetNIC(arg0 string) (ecloud.NIC, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNIC", arg0)
	ret0, _ := ret[0].(ecloud.NIC)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNIC indicates an expected call of GetNIC
func (mr *MockECloudServiceMockRecorder) GetNIC(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNIC", reflect.TypeOf((*MockECloudService)(nil).GetNIC), arg0)
}

// GetNICs mocks base method
func (m *MockECloudService) GetNICs(arg0 connection.APIRequestParameters) ([]ecloud.NIC, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNICs", arg0)
	ret0, _ := ret[0].([]ecloud.NIC)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNICs indicates an expected call of GetNICs
func (mr *MockECloudServiceMockRecorder) GetNICs(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNICs", reflect.TypeOf((*MockECloudService)(nil).GetNICs), arg0)
}

// GetNICsPaginated mocks base method
func (m *MockECloudService) GetNICsPaginated(arg0 connection.APIRequestParameters) (*ecloud.PaginatedNIC, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNICsPaginated", arg0)
	ret0, _ := ret[0].(*ecloud.PaginatedNIC)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNICsPaginated indicates an expected call of GetNICsPaginated
func (mr *MockECloudServiceMockRecorder) GetNICsPaginated(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNICsPaginated", reflect.TypeOf((*MockECloudService)(nil).GetNICsPaginated), arg0)
}

// GetNetwork mocks base method
func (m *MockECloudService) GetNetwork(arg0 string) (ecloud.Network, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNetwork", arg0)
	ret0, _ := ret[0].(ecloud.Network)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNetwork indicates an expected call of GetNetwork
func (mr *MockECloudServiceMockRecorder) GetNetwork(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNetwork", reflect.TypeOf((*MockECloudService)(nil).GetNetwork), arg0)
}

// GetNetworkNICs mocks base method
func (m *MockECloudService) GetNetworkNICs(arg0 string, arg1 connection.APIRequestParameters) ([]ecloud.NIC, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNetworkNICs", arg0, arg1)
	ret0, _ := ret[0].([]ecloud.NIC)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNetworkNICs indicates an expected call of GetNetworkNICs
func (mr *MockECloudServiceMockRecorder) GetNetworkNICs(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNetworkNICs", reflect.TypeOf((*MockECloudService)(nil).GetNetworkNICs), arg0, arg1)
}

// GetNetworkNICsPaginated mocks base method
func (m *MockECloudService) GetNetworkNICsPaginated(arg0 string, arg1 connection.APIRequestParameters) (*ecloud.PaginatedNIC, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNetworkNICsPaginated", arg0, arg1)
	ret0, _ := ret[0].(*ecloud.PaginatedNIC)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNetworkNICsPaginated indicates an expected call of GetNetworkNICsPaginated
func (mr *MockECloudServiceMockRecorder) GetNetworkNICsPaginated(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNetworkNICsPaginated", reflect.TypeOf((*MockECloudService)(nil).GetNetworkNICsPaginated), arg0, arg1)
}

// GetNetworks mocks base method
func (m *MockECloudService) GetNetworks(arg0 connection.APIRequestParameters) ([]ecloud.Network, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNetworks", arg0)
	ret0, _ := ret[0].([]ecloud.Network)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNetworks indicates an expected call of GetNetworks
func (mr *MockECloudServiceMockRecorder) GetNetworks(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNetworks", reflect.TypeOf((*MockECloudService)(nil).GetNetworks), arg0)
}

// GetNetworksPaginated mocks base method
func (m *MockECloudService) GetNetworksPaginated(arg0 connection.APIRequestParameters) (*ecloud.PaginatedNetwork, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNetworksPaginated", arg0)
	ret0, _ := ret[0].(*ecloud.PaginatedNetwork)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNetworksPaginated indicates an expected call of GetNetworksPaginated
func (mr *MockECloudServiceMockRecorder) GetNetworksPaginated(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNetworksPaginated", reflect.TypeOf((*MockECloudService)(nil).GetNetworksPaginated), arg0)
}

// GetPod mocks base method
func (m *MockECloudService) GetPod(arg0 int) (ecloud.Pod, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPod", arg0)
	ret0, _ := ret[0].(ecloud.Pod)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPod indicates an expected call of GetPod
func (mr *MockECloudServiceMockRecorder) GetPod(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPod", reflect.TypeOf((*MockECloudService)(nil).GetPod), arg0)
}

// GetPodAppliances mocks base method
func (m *MockECloudService) GetPodAppliances(arg0 int, arg1 connection.APIRequestParameters) ([]ecloud.Appliance, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPodAppliances", arg0, arg1)
	ret0, _ := ret[0].([]ecloud.Appliance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPodAppliances indicates an expected call of GetPodAppliances
func (mr *MockECloudServiceMockRecorder) GetPodAppliances(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPodAppliances", reflect.TypeOf((*MockECloudService)(nil).GetPodAppliances), arg0, arg1)
}

// GetPodAppliancesPaginated mocks base method
func (m *MockECloudService) GetPodAppliancesPaginated(arg0 int, arg1 connection.APIRequestParameters) (*ecloud.PaginatedAppliance, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPodAppliancesPaginated", arg0, arg1)
	ret0, _ := ret[0].(*ecloud.PaginatedAppliance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPodAppliancesPaginated indicates an expected call of GetPodAppliancesPaginated
func (mr *MockECloudServiceMockRecorder) GetPodAppliancesPaginated(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPodAppliancesPaginated", reflect.TypeOf((*MockECloudService)(nil).GetPodAppliancesPaginated), arg0, arg1)
}

// GetPodTemplate mocks base method
func (m *MockECloudService) GetPodTemplate(arg0 int, arg1 string) (ecloud.Template, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPodTemplate", arg0, arg1)
	ret0, _ := ret[0].(ecloud.Template)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPodTemplate indicates an expected call of GetPodTemplate
func (mr *MockECloudServiceMockRecorder) GetPodTemplate(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPodTemplate", reflect.TypeOf((*MockECloudService)(nil).GetPodTemplate), arg0, arg1)
}

// GetPodTemplates mocks base method
func (m *MockECloudService) GetPodTemplates(arg0 int, arg1 connection.APIRequestParameters) ([]ecloud.Template, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPodTemplates", arg0, arg1)
	ret0, _ := ret[0].([]ecloud.Template)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPodTemplates indicates an expected call of GetPodTemplates
func (mr *MockECloudServiceMockRecorder) GetPodTemplates(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPodTemplates", reflect.TypeOf((*MockECloudService)(nil).GetPodTemplates), arg0, arg1)
}

// GetPodTemplatesPaginated mocks base method
func (m *MockECloudService) GetPodTemplatesPaginated(arg0 int, arg1 connection.APIRequestParameters) (*ecloud.PaginatedTemplate, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPodTemplatesPaginated", arg0, arg1)
	ret0, _ := ret[0].(*ecloud.PaginatedTemplate)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPodTemplatesPaginated indicates an expected call of GetPodTemplatesPaginated
func (mr *MockECloudServiceMockRecorder) GetPodTemplatesPaginated(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPodTemplatesPaginated", reflect.TypeOf((*MockECloudService)(nil).GetPodTemplatesPaginated), arg0, arg1)
}

// GetPods mocks base method
func (m *MockECloudService) GetPods(arg0 connection.APIRequestParameters) ([]ecloud.Pod, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPods", arg0)
	ret0, _ := ret[0].([]ecloud.Pod)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPods indicates an expected call of GetPods
func (mr *MockECloudServiceMockRecorder) GetPods(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPods", reflect.TypeOf((*MockECloudService)(nil).GetPods), arg0)
}

// GetPodsPaginated mocks base method
func (m *MockECloudService) GetPodsPaginated(arg0 connection.APIRequestParameters) (*ecloud.PaginatedPod, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPodsPaginated", arg0)
	ret0, _ := ret[0].(*ecloud.PaginatedPod)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPodsPaginated indicates an expected call of GetPodsPaginated
func (mr *MockECloudServiceMockRecorder) GetPodsPaginated(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPodsPaginated", reflect.TypeOf((*MockECloudService)(nil).GetPodsPaginated), arg0)
}

// GetRegion mocks base method
func (m *MockECloudService) GetRegion(arg0 string) (ecloud.Region, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRegion", arg0)
	ret0, _ := ret[0].(ecloud.Region)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRegion indicates an expected call of GetRegion
func (mr *MockECloudServiceMockRecorder) GetRegion(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRegion", reflect.TypeOf((*MockECloudService)(nil).GetRegion), arg0)
}

// GetRegions mocks base method
func (m *MockECloudService) GetRegions(arg0 connection.APIRequestParameters) ([]ecloud.Region, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRegions", arg0)
	ret0, _ := ret[0].([]ecloud.Region)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRegions indicates an expected call of GetRegions
func (mr *MockECloudServiceMockRecorder) GetRegions(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRegions", reflect.TypeOf((*MockECloudService)(nil).GetRegions), arg0)
}

// GetRegionsPaginated mocks base method
func (m *MockECloudService) GetRegionsPaginated(arg0 connection.APIRequestParameters) (*ecloud.PaginatedRegion, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRegionsPaginated", arg0)
	ret0, _ := ret[0].(*ecloud.PaginatedRegion)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRegionsPaginated indicates an expected call of GetRegionsPaginated
func (mr *MockECloudServiceMockRecorder) GetRegionsPaginated(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRegionsPaginated", reflect.TypeOf((*MockECloudService)(nil).GetRegionsPaginated), arg0)
}

// GetRouter mocks base method
func (m *MockECloudService) GetRouter(arg0 string) (ecloud.Router, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRouter", arg0)
	ret0, _ := ret[0].(ecloud.Router)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRouter indicates an expected call of GetRouter
func (mr *MockECloudServiceMockRecorder) GetRouter(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRouter", reflect.TypeOf((*MockECloudService)(nil).GetRouter), arg0)
}

// GetRouterFirewallPolicies mocks base method
func (m *MockECloudService) GetRouterFirewallPolicies(arg0 string, arg1 connection.APIRequestParameters) ([]ecloud.FirewallPolicy, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRouterFirewallPolicies", arg0, arg1)
	ret0, _ := ret[0].([]ecloud.FirewallPolicy)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRouterFirewallPolicies indicates an expected call of GetRouterFirewallPolicies
func (mr *MockECloudServiceMockRecorder) GetRouterFirewallPolicies(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRouterFirewallPolicies", reflect.TypeOf((*MockECloudService)(nil).GetRouterFirewallPolicies), arg0, arg1)
}

// GetRouterFirewallPoliciesPaginated mocks base method
func (m *MockECloudService) GetRouterFirewallPoliciesPaginated(arg0 string, arg1 connection.APIRequestParameters) (*ecloud.PaginatedFirewallPolicy, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRouterFirewallPoliciesPaginated", arg0, arg1)
	ret0, _ := ret[0].(*ecloud.PaginatedFirewallPolicy)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRouterFirewallPoliciesPaginated indicates an expected call of GetRouterFirewallPoliciesPaginated
func (mr *MockECloudServiceMockRecorder) GetRouterFirewallPoliciesPaginated(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRouterFirewallPoliciesPaginated", reflect.TypeOf((*MockECloudService)(nil).GetRouterFirewallPoliciesPaginated), arg0, arg1)
}

// GetRouterNetworks mocks base method
func (m *MockECloudService) GetRouterNetworks(arg0 string, arg1 connection.APIRequestParameters) ([]ecloud.Network, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRouterNetworks", arg0, arg1)
	ret0, _ := ret[0].([]ecloud.Network)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRouterNetworks indicates an expected call of GetRouterNetworks
func (mr *MockECloudServiceMockRecorder) GetRouterNetworks(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRouterNetworks", reflect.TypeOf((*MockECloudService)(nil).GetRouterNetworks), arg0, arg1)
}

// GetRouterNetworksPaginated mocks base method
func (m *MockECloudService) GetRouterNetworksPaginated(arg0 string, arg1 connection.APIRequestParameters) (*ecloud.PaginatedNetwork, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRouterNetworksPaginated", arg0, arg1)
	ret0, _ := ret[0].(*ecloud.PaginatedNetwork)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRouterNetworksPaginated indicates an expected call of GetRouterNetworksPaginated
func (mr *MockECloudServiceMockRecorder) GetRouterNetworksPaginated(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRouterNetworksPaginated", reflect.TypeOf((*MockECloudService)(nil).GetRouterNetworksPaginated), arg0, arg1)
}

// GetRouterThroughput mocks base method
func (m *MockECloudService) GetRouterThroughput(arg0 string) (ecloud.RouterThroughput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRouterThroughput", arg0)
	ret0, _ := ret[0].(ecloud.RouterThroughput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRouterThroughput indicates an expected call of GetRouterThroughput
func (mr *MockECloudServiceMockRecorder) GetRouterThroughput(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRouterThroughput", reflect.TypeOf((*MockECloudService)(nil).GetRouterThroughput), arg0)
}

// GetRouterThroughputs mocks base method
func (m *MockECloudService) GetRouterThroughputs(arg0 connection.APIRequestParameters) ([]ecloud.RouterThroughput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRouterThroughputs", arg0)
	ret0, _ := ret[0].([]ecloud.RouterThroughput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRouterThroughputs indicates an expected call of GetRouterThroughputs
func (mr *MockECloudServiceMockRecorder) GetRouterThroughputs(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRouterThroughputs", reflect.TypeOf((*MockECloudService)(nil).GetRouterThroughputs), arg0)
}

// GetRouterThroughputsPaginated mocks base method
func (m *MockECloudService) GetRouterThroughputsPaginated(arg0 connection.APIRequestParameters) (*ecloud.PaginatedRouterThroughput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRouterThroughputsPaginated", arg0)
	ret0, _ := ret[0].(*ecloud.PaginatedRouterThroughput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRouterThroughputsPaginated indicates an expected call of GetRouterThroughputsPaginated
func (mr *MockECloudServiceMockRecorder) GetRouterThroughputsPaginated(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRouterThroughputsPaginated", reflect.TypeOf((*MockECloudService)(nil).GetRouterThroughputsPaginated), arg0)
}

// GetRouterVPNs mocks base method
func (m *MockECloudService) GetRouterVPNs(arg0 string, arg1 connection.APIRequestParameters) ([]ecloud.VPN, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRouterVPNs", arg0, arg1)
	ret0, _ := ret[0].([]ecloud.VPN)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRouterVPNs indicates an expected call of GetRouterVPNs
func (mr *MockECloudServiceMockRecorder) GetRouterVPNs(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRouterVPNs", reflect.TypeOf((*MockECloudService)(nil).GetRouterVPNs), arg0, arg1)
}

// GetRouterVPNsPaginated mocks base method
func (m *MockECloudService) GetRouterVPNsPaginated(arg0 string, arg1 connection.APIRequestParameters) (*ecloud.PaginatedVPN, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRouterVPNsPaginated", arg0, arg1)
	ret0, _ := ret[0].(*ecloud.PaginatedVPN)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRouterVPNsPaginated indicates an expected call of GetRouterVPNsPaginated
func (mr *MockECloudServiceMockRecorder) GetRouterVPNsPaginated(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRouterVPNsPaginated", reflect.TypeOf((*MockECloudService)(nil).GetRouterVPNsPaginated), arg0, arg1)
}

// GetRouters mocks base method
func (m *MockECloudService) GetRouters(arg0 connection.APIRequestParameters) ([]ecloud.Router, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRouters", arg0)
	ret0, _ := ret[0].([]ecloud.Router)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRouters indicates an expected call of GetRouters
func (mr *MockECloudServiceMockRecorder) GetRouters(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRouters", reflect.TypeOf((*MockECloudService)(nil).GetRouters), arg0)
}

// GetRoutersPaginated mocks base method
func (m *MockECloudService) GetRoutersPaginated(arg0 connection.APIRequestParameters) (*ecloud.PaginatedRouter, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRoutersPaginated", arg0)
	ret0, _ := ret[0].(*ecloud.PaginatedRouter)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRoutersPaginated indicates an expected call of GetRoutersPaginated
func (mr *MockECloudServiceMockRecorder) GetRoutersPaginated(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRoutersPaginated", reflect.TypeOf((*MockECloudService)(nil).GetRoutersPaginated), arg0)
}

// GetSite mocks base method
func (m *MockECloudService) GetSite(arg0 int) (ecloud.Site, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSite", arg0)
	ret0, _ := ret[0].(ecloud.Site)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSite indicates an expected call of GetSite
func (mr *MockECloudServiceMockRecorder) GetSite(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSite", reflect.TypeOf((*MockECloudService)(nil).GetSite), arg0)
}

// GetSites mocks base method
func (m *MockECloudService) GetSites(arg0 connection.APIRequestParameters) ([]ecloud.Site, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSites", arg0)
	ret0, _ := ret[0].([]ecloud.Site)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSites indicates an expected call of GetSites
func (mr *MockECloudServiceMockRecorder) GetSites(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSites", reflect.TypeOf((*MockECloudService)(nil).GetSites), arg0)
}

// GetSitesPaginated mocks base method
func (m *MockECloudService) GetSitesPaginated(arg0 connection.APIRequestParameters) (*ecloud.PaginatedSite, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSitesPaginated", arg0)
	ret0, _ := ret[0].(*ecloud.PaginatedSite)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSitesPaginated indicates an expected call of GetSitesPaginated
func (mr *MockECloudServiceMockRecorder) GetSitesPaginated(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSitesPaginated", reflect.TypeOf((*MockECloudService)(nil).GetSitesPaginated), arg0)
}

// GetSolution mocks base method
func (m *MockECloudService) GetSolution(arg0 int) (ecloud.Solution, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSolution", arg0)
	ret0, _ := ret[0].(ecloud.Solution)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSolution indicates an expected call of GetSolution
func (mr *MockECloudServiceMockRecorder) GetSolution(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSolution", reflect.TypeOf((*MockECloudService)(nil).GetSolution), arg0)
}

// GetSolutionDatastores mocks base method
func (m *MockECloudService) GetSolutionDatastores(arg0 int, arg1 connection.APIRequestParameters) ([]ecloud.Datastore, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSolutionDatastores", arg0, arg1)
	ret0, _ := ret[0].([]ecloud.Datastore)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSolutionDatastores indicates an expected call of GetSolutionDatastores
func (mr *MockECloudServiceMockRecorder) GetSolutionDatastores(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSolutionDatastores", reflect.TypeOf((*MockECloudService)(nil).GetSolutionDatastores), arg0, arg1)
}

// GetSolutionDatastoresPaginated mocks base method
func (m *MockECloudService) GetSolutionDatastoresPaginated(arg0 int, arg1 connection.APIRequestParameters) (*ecloud.PaginatedDatastore, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSolutionDatastoresPaginated", arg0, arg1)
	ret0, _ := ret[0].(*ecloud.PaginatedDatastore)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSolutionDatastoresPaginated indicates an expected call of GetSolutionDatastoresPaginated
func (mr *MockECloudServiceMockRecorder) GetSolutionDatastoresPaginated(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSolutionDatastoresPaginated", reflect.TypeOf((*MockECloudService)(nil).GetSolutionDatastoresPaginated), arg0, arg1)
}

// GetSolutionFirewalls mocks base method
func (m *MockECloudService) GetSolutionFirewalls(arg0 int, arg1 connection.APIRequestParameters) ([]ecloud.Firewall, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSolutionFirewalls", arg0, arg1)
	ret0, _ := ret[0].([]ecloud.Firewall)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSolutionFirewalls indicates an expected call of GetSolutionFirewalls
func (mr *MockECloudServiceMockRecorder) GetSolutionFirewalls(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSolutionFirewalls", reflect.TypeOf((*MockECloudService)(nil).GetSolutionFirewalls), arg0, arg1)
}

// GetSolutionFirewallsPaginated mocks base method
func (m *MockECloudService) GetSolutionFirewallsPaginated(arg0 int, arg1 connection.APIRequestParameters) (*ecloud.PaginatedFirewall, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSolutionFirewallsPaginated", arg0, arg1)
	ret0, _ := ret[0].(*ecloud.PaginatedFirewall)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSolutionFirewallsPaginated indicates an expected call of GetSolutionFirewallsPaginated
func (mr *MockECloudServiceMockRecorder) GetSolutionFirewallsPaginated(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSolutionFirewallsPaginated", reflect.TypeOf((*MockECloudService)(nil).GetSolutionFirewallsPaginated), arg0, arg1)
}

// GetSolutionHosts mocks base method
func (m *MockECloudService) GetSolutionHosts(arg0 int, arg1 connection.APIRequestParameters) ([]ecloud.Host, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSolutionHosts", arg0, arg1)
	ret0, _ := ret[0].([]ecloud.Host)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSolutionHosts indicates an expected call of GetSolutionHosts
func (mr *MockECloudServiceMockRecorder) GetSolutionHosts(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSolutionHosts", reflect.TypeOf((*MockECloudService)(nil).GetSolutionHosts), arg0, arg1)
}

// GetSolutionHostsPaginated mocks base method
func (m *MockECloudService) GetSolutionHostsPaginated(arg0 int, arg1 connection.APIRequestParameters) (*ecloud.PaginatedHost, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSolutionHostsPaginated", arg0, arg1)
	ret0, _ := ret[0].(*ecloud.PaginatedHost)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSolutionHostsPaginated indicates an expected call of GetSolutionHostsPaginated
func (mr *MockECloudServiceMockRecorder) GetSolutionHostsPaginated(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSolutionHostsPaginated", reflect.TypeOf((*MockECloudService)(nil).GetSolutionHostsPaginated), arg0, arg1)
}

// GetSolutionNetworks mocks base method
func (m *MockECloudService) GetSolutionNetworks(arg0 int, arg1 connection.APIRequestParameters) ([]ecloud.V1Network, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSolutionNetworks", arg0, arg1)
	ret0, _ := ret[0].([]ecloud.V1Network)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSolutionNetworks indicates an expected call of GetSolutionNetworks
func (mr *MockECloudServiceMockRecorder) GetSolutionNetworks(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSolutionNetworks", reflect.TypeOf((*MockECloudService)(nil).GetSolutionNetworks), arg0, arg1)
}

// GetSolutionNetworksPaginated mocks base method
func (m *MockECloudService) GetSolutionNetworksPaginated(arg0 int, arg1 connection.APIRequestParameters) (*ecloud.PaginatedV1Network, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSolutionNetworksPaginated", arg0, arg1)
	ret0, _ := ret[0].(*ecloud.PaginatedV1Network)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSolutionNetworksPaginated indicates an expected call of GetSolutionNetworksPaginated
func (mr *MockECloudServiceMockRecorder) GetSolutionNetworksPaginated(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSolutionNetworksPaginated", reflect.TypeOf((*MockECloudService)(nil).GetSolutionNetworksPaginated), arg0, arg1)
}

// GetSolutionSites mocks base method
func (m *MockECloudService) GetSolutionSites(arg0 int, arg1 connection.APIRequestParameters) ([]ecloud.Site, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSolutionSites", arg0, arg1)
	ret0, _ := ret[0].([]ecloud.Site)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSolutionSites indicates an expected call of GetSolutionSites
func (mr *MockECloudServiceMockRecorder) GetSolutionSites(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSolutionSites", reflect.TypeOf((*MockECloudService)(nil).GetSolutionSites), arg0, arg1)
}

// GetSolutionSitesPaginated mocks base method
func (m *MockECloudService) GetSolutionSitesPaginated(arg0 int, arg1 connection.APIRequestParameters) (*ecloud.PaginatedSite, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSolutionSitesPaginated", arg0, arg1)
	ret0, _ := ret[0].(*ecloud.PaginatedSite)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSolutionSitesPaginated indicates an expected call of GetSolutionSitesPaginated
func (mr *MockECloudServiceMockRecorder) GetSolutionSitesPaginated(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSolutionSitesPaginated", reflect.TypeOf((*MockECloudService)(nil).GetSolutionSitesPaginated), arg0, arg1)
}

// GetSolutionTag mocks base method
func (m *MockECloudService) GetSolutionTag(arg0 int, arg1 string) (ecloud.Tag, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSolutionTag", arg0, arg1)
	ret0, _ := ret[0].(ecloud.Tag)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSolutionTag indicates an expected call of GetSolutionTag
func (mr *MockECloudServiceMockRecorder) GetSolutionTag(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSolutionTag", reflect.TypeOf((*MockECloudService)(nil).GetSolutionTag), arg0, arg1)
}

// GetSolutionTags mocks base method
func (m *MockECloudService) GetSolutionTags(arg0 int, arg1 connection.APIRequestParameters) ([]ecloud.Tag, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSolutionTags", arg0, arg1)
	ret0, _ := ret[0].([]ecloud.Tag)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSolutionTags indicates an expected call of GetSolutionTags
func (mr *MockECloudServiceMockRecorder) GetSolutionTags(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSolutionTags", reflect.TypeOf((*MockECloudService)(nil).GetSolutionTags), arg0, arg1)
}

// GetSolutionTagsPaginated mocks base method
func (m *MockECloudService) GetSolutionTagsPaginated(arg0 int, arg1 connection.APIRequestParameters) (*ecloud.PaginatedTag, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSolutionTagsPaginated", arg0, arg1)
	ret0, _ := ret[0].(*ecloud.PaginatedTag)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSolutionTagsPaginated indicates an expected call of GetSolutionTagsPaginated
func (mr *MockECloudServiceMockRecorder) GetSolutionTagsPaginated(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSolutionTagsPaginated", reflect.TypeOf((*MockECloudService)(nil).GetSolutionTagsPaginated), arg0, arg1)
}

// GetSolutionTemplate mocks base method
func (m *MockECloudService) GetSolutionTemplate(arg0 int, arg1 string) (ecloud.Template, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSolutionTemplate", arg0, arg1)
	ret0, _ := ret[0].(ecloud.Template)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSolutionTemplate indicates an expected call of GetSolutionTemplate
func (mr *MockECloudServiceMockRecorder) GetSolutionTemplate(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSolutionTemplate", reflect.TypeOf((*MockECloudService)(nil).GetSolutionTemplate), arg0, arg1)
}

// GetSolutionTemplates mocks base method
func (m *MockECloudService) GetSolutionTemplates(arg0 int, arg1 connection.APIRequestParameters) ([]ecloud.Template, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSolutionTemplates", arg0, arg1)
	ret0, _ := ret[0].([]ecloud.Template)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSolutionTemplates indicates an expected call of GetSolutionTemplates
func (mr *MockECloudServiceMockRecorder) GetSolutionTemplates(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSolutionTemplates", reflect.TypeOf((*MockECloudService)(nil).GetSolutionTemplates), arg0, arg1)
}

// GetSolutionTemplatesPaginated mocks base method
func (m *MockECloudService) GetSolutionTemplatesPaginated(arg0 int, arg1 connection.APIRequestParameters) (*ecloud.PaginatedTemplate, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSolutionTemplatesPaginated", arg0, arg1)
	ret0, _ := ret[0].(*ecloud.PaginatedTemplate)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSolutionTemplatesPaginated indicates an expected call of GetSolutionTemplatesPaginated
func (mr *MockECloudServiceMockRecorder) GetSolutionTemplatesPaginated(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSolutionTemplatesPaginated", reflect.TypeOf((*MockECloudService)(nil).GetSolutionTemplatesPaginated), arg0, arg1)
}

// GetSolutionVirtualMachines mocks base method
func (m *MockECloudService) GetSolutionVirtualMachines(arg0 int, arg1 connection.APIRequestParameters) ([]ecloud.VirtualMachine, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSolutionVirtualMachines", arg0, arg1)
	ret0, _ := ret[0].([]ecloud.VirtualMachine)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSolutionVirtualMachines indicates an expected call of GetSolutionVirtualMachines
func (mr *MockECloudServiceMockRecorder) GetSolutionVirtualMachines(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSolutionVirtualMachines", reflect.TypeOf((*MockECloudService)(nil).GetSolutionVirtualMachines), arg0, arg1)
}

// GetSolutionVirtualMachinesPaginated mocks base method
func (m *MockECloudService) GetSolutionVirtualMachinesPaginated(arg0 int, arg1 connection.APIRequestParameters) (*ecloud.PaginatedVirtualMachine, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSolutionVirtualMachinesPaginated", arg0, arg1)
	ret0, _ := ret[0].(*ecloud.PaginatedVirtualMachine)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSolutionVirtualMachinesPaginated indicates an expected call of GetSolutionVirtualMachinesPaginated
func (mr *MockECloudServiceMockRecorder) GetSolutionVirtualMachinesPaginated(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSolutionVirtualMachinesPaginated", reflect.TypeOf((*MockECloudService)(nil).GetSolutionVirtualMachinesPaginated), arg0, arg1)
}

// GetSolutions mocks base method
func (m *MockECloudService) GetSolutions(arg0 connection.APIRequestParameters) ([]ecloud.Solution, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSolutions", arg0)
	ret0, _ := ret[0].([]ecloud.Solution)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSolutions indicates an expected call of GetSolutions
func (mr *MockECloudServiceMockRecorder) GetSolutions(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSolutions", reflect.TypeOf((*MockECloudService)(nil).GetSolutions), arg0)
}

// GetSolutionsPaginated mocks base method
func (m *MockECloudService) GetSolutionsPaginated(arg0 connection.APIRequestParameters) (*ecloud.PaginatedSolution, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSolutionsPaginated", arg0)
	ret0, _ := ret[0].(*ecloud.PaginatedSolution)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSolutionsPaginated indicates an expected call of GetSolutionsPaginated
func (mr *MockECloudServiceMockRecorder) GetSolutionsPaginated(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSolutionsPaginated", reflect.TypeOf((*MockECloudService)(nil).GetSolutionsPaginated), arg0)
}

// GetVPC mocks base method
func (m *MockECloudService) GetVPC(arg0 string) (ecloud.VPC, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVPC", arg0)
	ret0, _ := ret[0].(ecloud.VPC)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVPC indicates an expected call of GetVPC
func (mr *MockECloudServiceMockRecorder) GetVPC(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVPC", reflect.TypeOf((*MockECloudService)(nil).GetVPC), arg0)
}

// GetVPCInstances mocks base method
func (m *MockECloudService) GetVPCInstances(arg0 string, arg1 connection.APIRequestParameters) ([]ecloud.Instance, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVPCInstances", arg0, arg1)
	ret0, _ := ret[0].([]ecloud.Instance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVPCInstances indicates an expected call of GetVPCInstances
func (mr *MockECloudServiceMockRecorder) GetVPCInstances(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVPCInstances", reflect.TypeOf((*MockECloudService)(nil).GetVPCInstances), arg0, arg1)
}

// GetVPCInstancesPaginated mocks base method
func (m *MockECloudService) GetVPCInstancesPaginated(arg0 string, arg1 connection.APIRequestParameters) (*ecloud.PaginatedInstance, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVPCInstancesPaginated", arg0, arg1)
	ret0, _ := ret[0].(*ecloud.PaginatedInstance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVPCInstancesPaginated indicates an expected call of GetVPCInstancesPaginated
func (mr *MockECloudServiceMockRecorder) GetVPCInstancesPaginated(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVPCInstancesPaginated", reflect.TypeOf((*MockECloudService)(nil).GetVPCInstancesPaginated), arg0, arg1)
}

// GetVPCVolumes mocks base method
func (m *MockECloudService) GetVPCVolumes(arg0 string, arg1 connection.APIRequestParameters) ([]ecloud.Volume, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVPCVolumes", arg0, arg1)
	ret0, _ := ret[0].([]ecloud.Volume)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVPCVolumes indicates an expected call of GetVPCVolumes
func (mr *MockECloudServiceMockRecorder) GetVPCVolumes(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVPCVolumes", reflect.TypeOf((*MockECloudService)(nil).GetVPCVolumes), arg0, arg1)
}

// GetVPCVolumesPaginated mocks base method
func (m *MockECloudService) GetVPCVolumesPaginated(arg0 string, arg1 connection.APIRequestParameters) (*ecloud.PaginatedVolume, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVPCVolumesPaginated", arg0, arg1)
	ret0, _ := ret[0].(*ecloud.PaginatedVolume)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVPCVolumesPaginated indicates an expected call of GetVPCVolumesPaginated
func (mr *MockECloudServiceMockRecorder) GetVPCVolumesPaginated(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVPCVolumesPaginated", reflect.TypeOf((*MockECloudService)(nil).GetVPCVolumesPaginated), arg0, arg1)
}

// GetVPCs mocks base method
func (m *MockECloudService) GetVPCs(arg0 connection.APIRequestParameters) ([]ecloud.VPC, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVPCs", arg0)
	ret0, _ := ret[0].([]ecloud.VPC)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVPCs indicates an expected call of GetVPCs
func (mr *MockECloudServiceMockRecorder) GetVPCs(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVPCs", reflect.TypeOf((*MockECloudService)(nil).GetVPCs), arg0)
}

// GetVPCsPaginated mocks base method
func (m *MockECloudService) GetVPCsPaginated(arg0 connection.APIRequestParameters) (*ecloud.PaginatedVPC, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVPCsPaginated", arg0)
	ret0, _ := ret[0].(*ecloud.PaginatedVPC)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVPCsPaginated indicates an expected call of GetVPCsPaginated
func (mr *MockECloudServiceMockRecorder) GetVPCsPaginated(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVPCsPaginated", reflect.TypeOf((*MockECloudService)(nil).GetVPCsPaginated), arg0)
}

// GetVPN mocks base method
func (m *MockECloudService) GetVPN(arg0 string) (ecloud.VPN, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVPN", arg0)
	ret0, _ := ret[0].(ecloud.VPN)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVPN indicates an expected call of GetVPN
func (mr *MockECloudServiceMockRecorder) GetVPN(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVPN", reflect.TypeOf((*MockECloudService)(nil).GetVPN), arg0)
}

// GetVPNs mocks base method
func (m *MockECloudService) GetVPNs(arg0 connection.APIRequestParameters) ([]ecloud.VPN, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVPNs", arg0)
	ret0, _ := ret[0].([]ecloud.VPN)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVPNs indicates an expected call of GetVPNs
func (mr *MockECloudServiceMockRecorder) GetVPNs(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVPNs", reflect.TypeOf((*MockECloudService)(nil).GetVPNs), arg0)
}

// GetVPNsPaginated mocks base method
func (m *MockECloudService) GetVPNsPaginated(arg0 connection.APIRequestParameters) (*ecloud.PaginatedVPN, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVPNsPaginated", arg0)
	ret0, _ := ret[0].(*ecloud.PaginatedVPN)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVPNsPaginated indicates an expected call of GetVPNsPaginated
func (mr *MockECloudServiceMockRecorder) GetVPNsPaginated(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVPNsPaginated", reflect.TypeOf((*MockECloudService)(nil).GetVPNsPaginated), arg0)
}

// GetVirtualMachine mocks base method
func (m *MockECloudService) GetVirtualMachine(arg0 int) (ecloud.VirtualMachine, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVirtualMachine", arg0)
	ret0, _ := ret[0].(ecloud.VirtualMachine)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVirtualMachine indicates an expected call of GetVirtualMachine
func (mr *MockECloudServiceMockRecorder) GetVirtualMachine(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVirtualMachine", reflect.TypeOf((*MockECloudService)(nil).GetVirtualMachine), arg0)
}

// GetVirtualMachineTag mocks base method
func (m *MockECloudService) GetVirtualMachineTag(arg0 int, arg1 string) (ecloud.Tag, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVirtualMachineTag", arg0, arg1)
	ret0, _ := ret[0].(ecloud.Tag)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVirtualMachineTag indicates an expected call of GetVirtualMachineTag
func (mr *MockECloudServiceMockRecorder) GetVirtualMachineTag(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVirtualMachineTag", reflect.TypeOf((*MockECloudService)(nil).GetVirtualMachineTag), arg0, arg1)
}

// GetVirtualMachineTags mocks base method
func (m *MockECloudService) GetVirtualMachineTags(arg0 int, arg1 connection.APIRequestParameters) ([]ecloud.Tag, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVirtualMachineTags", arg0, arg1)
	ret0, _ := ret[0].([]ecloud.Tag)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVirtualMachineTags indicates an expected call of GetVirtualMachineTags
func (mr *MockECloudServiceMockRecorder) GetVirtualMachineTags(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVirtualMachineTags", reflect.TypeOf((*MockECloudService)(nil).GetVirtualMachineTags), arg0, arg1)
}

// GetVirtualMachineTagsPaginated mocks base method
func (m *MockECloudService) GetVirtualMachineTagsPaginated(arg0 int, arg1 connection.APIRequestParameters) (*ecloud.PaginatedTag, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVirtualMachineTagsPaginated", arg0, arg1)
	ret0, _ := ret[0].(*ecloud.PaginatedTag)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVirtualMachineTagsPaginated indicates an expected call of GetVirtualMachineTagsPaginated
func (mr *MockECloudServiceMockRecorder) GetVirtualMachineTagsPaginated(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVirtualMachineTagsPaginated", reflect.TypeOf((*MockECloudService)(nil).GetVirtualMachineTagsPaginated), arg0, arg1)
}

// GetVirtualMachines mocks base method
func (m *MockECloudService) GetVirtualMachines(arg0 connection.APIRequestParameters) ([]ecloud.VirtualMachine, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVirtualMachines", arg0)
	ret0, _ := ret[0].([]ecloud.VirtualMachine)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVirtualMachines indicates an expected call of GetVirtualMachines
func (mr *MockECloudServiceMockRecorder) GetVirtualMachines(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVirtualMachines", reflect.TypeOf((*MockECloudService)(nil).GetVirtualMachines), arg0)
}

// GetVirtualMachinesPaginated mocks base method
func (m *MockECloudService) GetVirtualMachinesPaginated(arg0 connection.APIRequestParameters) (*ecloud.PaginatedVirtualMachine, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVirtualMachinesPaginated", arg0)
	ret0, _ := ret[0].(*ecloud.PaginatedVirtualMachine)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVirtualMachinesPaginated indicates an expected call of GetVirtualMachinesPaginated
func (mr *MockECloudServiceMockRecorder) GetVirtualMachinesPaginated(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVirtualMachinesPaginated", reflect.TypeOf((*MockECloudService)(nil).GetVirtualMachinesPaginated), arg0)
}

// GetVolume mocks base method
func (m *MockECloudService) GetVolume(arg0 string) (ecloud.Volume, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVolume", arg0)
	ret0, _ := ret[0].(ecloud.Volume)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVolume indicates an expected call of GetVolume
func (mr *MockECloudServiceMockRecorder) GetVolume(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVolume", reflect.TypeOf((*MockECloudService)(nil).GetVolume), arg0)
}

// GetVolumeInstances mocks base method
func (m *MockECloudService) GetVolumeInstances(arg0 string, arg1 connection.APIRequestParameters) ([]ecloud.Instance, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVolumeInstances", arg0, arg1)
	ret0, _ := ret[0].([]ecloud.Instance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVolumeInstances indicates an expected call of GetVolumeInstances
func (mr *MockECloudServiceMockRecorder) GetVolumeInstances(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVolumeInstances", reflect.TypeOf((*MockECloudService)(nil).GetVolumeInstances), arg0, arg1)
}

// GetVolumeInstancesPaginated mocks base method
func (m *MockECloudService) GetVolumeInstancesPaginated(arg0 string, arg1 connection.APIRequestParameters) (*ecloud.PaginatedInstance, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVolumeInstancesPaginated", arg0, arg1)
	ret0, _ := ret[0].(*ecloud.PaginatedInstance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVolumeInstancesPaginated indicates an expected call of GetVolumeInstancesPaginated
func (mr *MockECloudServiceMockRecorder) GetVolumeInstancesPaginated(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVolumeInstancesPaginated", reflect.TypeOf((*MockECloudService)(nil).GetVolumeInstancesPaginated), arg0, arg1)
}

// GetVolumes mocks base method
func (m *MockECloudService) GetVolumes(arg0 connection.APIRequestParameters) ([]ecloud.Volume, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVolumes", arg0)
	ret0, _ := ret[0].([]ecloud.Volume)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVolumes indicates an expected call of GetVolumes
func (mr *MockECloudServiceMockRecorder) GetVolumes(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVolumes", reflect.TypeOf((*MockECloudService)(nil).GetVolumes), arg0)
}

// GetVolumesPaginated mocks base method
func (m *MockECloudService) GetVolumesPaginated(arg0 connection.APIRequestParameters) (*ecloud.PaginatedVolume, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVolumesPaginated", arg0)
	ret0, _ := ret[0].(*ecloud.PaginatedVolume)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVolumesPaginated indicates an expected call of GetVolumesPaginated
func (mr *MockECloudServiceMockRecorder) GetVolumesPaginated(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVolumesPaginated", reflect.TypeOf((*MockECloudService)(nil).GetVolumesPaginated), arg0)
}

// LockInstance mocks base method
func (m *MockECloudService) LockInstance(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LockInstance", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// LockInstance indicates an expected call of LockInstance
func (mr *MockECloudServiceMockRecorder) LockInstance(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LockInstance", reflect.TypeOf((*MockECloudService)(nil).LockInstance), arg0)
}

// PatchFirewallPolicy mocks base method
func (m *MockECloudService) PatchFirewallPolicy(arg0 string, arg1 ecloud.PatchFirewallPolicyRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PatchFirewallPolicy", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchFirewallPolicy indicates an expected call of PatchFirewallPolicy
func (mr *MockECloudServiceMockRecorder) PatchFirewallPolicy(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchFirewallPolicy", reflect.TypeOf((*MockECloudService)(nil).PatchFirewallPolicy), arg0, arg1)
}

// PatchFirewallRule mocks base method
func (m *MockECloudService) PatchFirewallRule(arg0 string, arg1 ecloud.PatchFirewallRuleRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PatchFirewallRule", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchFirewallRule indicates an expected call of PatchFirewallRule
func (mr *MockECloudServiceMockRecorder) PatchFirewallRule(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchFirewallRule", reflect.TypeOf((*MockECloudService)(nil).PatchFirewallRule), arg0, arg1)
}

// PatchFirewallRulePort mocks base method
func (m *MockECloudService) PatchFirewallRulePort(arg0 string, arg1 ecloud.PatchFirewallRulePortRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PatchFirewallRulePort", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchFirewallRulePort indicates an expected call of PatchFirewallRulePort
func (mr *MockECloudServiceMockRecorder) PatchFirewallRulePort(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchFirewallRulePort", reflect.TypeOf((*MockECloudService)(nil).PatchFirewallRulePort), arg0, arg1)
}

// PatchFloatingIP mocks base method
func (m *MockECloudService) PatchFloatingIP(arg0 string, arg1 ecloud.PatchFloatingIPRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PatchFloatingIP", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchFloatingIP indicates an expected call of PatchFloatingIP
func (mr *MockECloudServiceMockRecorder) PatchFloatingIP(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchFloatingIP", reflect.TypeOf((*MockECloudService)(nil).PatchFloatingIP), arg0, arg1)
}

// PatchInstance mocks base method
func (m *MockECloudService) PatchInstance(arg0 string, arg1 ecloud.PatchInstanceRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PatchInstance", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchInstance indicates an expected call of PatchInstance
func (mr *MockECloudServiceMockRecorder) PatchInstance(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchInstance", reflect.TypeOf((*MockECloudService)(nil).PatchInstance), arg0, arg1)
}

// PatchNetwork mocks base method
func (m *MockECloudService) PatchNetwork(arg0 string, arg1 ecloud.PatchNetworkRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PatchNetwork", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchNetwork indicates an expected call of PatchNetwork
func (mr *MockECloudServiceMockRecorder) PatchNetwork(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchNetwork", reflect.TypeOf((*MockECloudService)(nil).PatchNetwork), arg0, arg1)
}

// PatchRouter mocks base method
func (m *MockECloudService) PatchRouter(arg0 string, arg1 ecloud.PatchRouterRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PatchRouter", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchRouter indicates an expected call of PatchRouter
func (mr *MockECloudServiceMockRecorder) PatchRouter(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchRouter", reflect.TypeOf((*MockECloudService)(nil).PatchRouter), arg0, arg1)
}

// PatchSolution mocks base method
func (m *MockECloudService) PatchSolution(arg0 int, arg1 ecloud.PatchSolutionRequest) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PatchSolution", arg0, arg1)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PatchSolution indicates an expected call of PatchSolution
func (mr *MockECloudServiceMockRecorder) PatchSolution(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchSolution", reflect.TypeOf((*MockECloudService)(nil).PatchSolution), arg0, arg1)
}

// PatchSolutionTag mocks base method
func (m *MockECloudService) PatchSolutionTag(arg0 int, arg1 string, arg2 ecloud.PatchTagRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PatchSolutionTag", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchSolutionTag indicates an expected call of PatchSolutionTag
func (mr *MockECloudServiceMockRecorder) PatchSolutionTag(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchSolutionTag", reflect.TypeOf((*MockECloudService)(nil).PatchSolutionTag), arg0, arg1, arg2)
}

// PatchVPC mocks base method
func (m *MockECloudService) PatchVPC(arg0 string, arg1 ecloud.PatchVPCRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PatchVPC", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchVPC indicates an expected call of PatchVPC
func (mr *MockECloudServiceMockRecorder) PatchVPC(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchVPC", reflect.TypeOf((*MockECloudService)(nil).PatchVPC), arg0, arg1)
}

// PatchVirtualMachine mocks base method
func (m *MockECloudService) PatchVirtualMachine(arg0 int, arg1 ecloud.PatchVirtualMachineRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PatchVirtualMachine", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchVirtualMachine indicates an expected call of PatchVirtualMachine
func (mr *MockECloudServiceMockRecorder) PatchVirtualMachine(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchVirtualMachine", reflect.TypeOf((*MockECloudService)(nil).PatchVirtualMachine), arg0, arg1)
}

// PatchVirtualMachineTag mocks base method
func (m *MockECloudService) PatchVirtualMachineTag(arg0 int, arg1 string, arg2 ecloud.PatchTagRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PatchVirtualMachineTag", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchVirtualMachineTag indicates an expected call of PatchVirtualMachineTag
func (mr *MockECloudServiceMockRecorder) PatchVirtualMachineTag(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchVirtualMachineTag", reflect.TypeOf((*MockECloudService)(nil).PatchVirtualMachineTag), arg0, arg1, arg2)
}

// PatchVolume mocks base method
func (m *MockECloudService) PatchVolume(arg0 string, arg1 ecloud.PatchVolumeRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PatchVolume", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchVolume indicates an expected call of PatchVolume
func (mr *MockECloudServiceMockRecorder) PatchVolume(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchVolume", reflect.TypeOf((*MockECloudService)(nil).PatchVolume), arg0, arg1)
}

// PodConsoleAvailable mocks base method
func (m *MockECloudService) PodConsoleAvailable(arg0 int) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PodConsoleAvailable", arg0)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PodConsoleAvailable indicates an expected call of PodConsoleAvailable
func (mr *MockECloudServiceMockRecorder) PodConsoleAvailable(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PodConsoleAvailable", reflect.TypeOf((*MockECloudService)(nil).PodConsoleAvailable), arg0)
}

// PowerOffInstance mocks base method
func (m *MockECloudService) PowerOffInstance(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PowerOffInstance", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// PowerOffInstance indicates an expected call of PowerOffInstance
func (mr *MockECloudServiceMockRecorder) PowerOffInstance(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PowerOffInstance", reflect.TypeOf((*MockECloudService)(nil).PowerOffInstance), arg0)
}

// PowerOffVirtualMachine mocks base method
func (m *MockECloudService) PowerOffVirtualMachine(arg0 int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PowerOffVirtualMachine", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// PowerOffVirtualMachine indicates an expected call of PowerOffVirtualMachine
func (mr *MockECloudServiceMockRecorder) PowerOffVirtualMachine(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PowerOffVirtualMachine", reflect.TypeOf((*MockECloudService)(nil).PowerOffVirtualMachine), arg0)
}

// PowerOnInstance mocks base method
func (m *MockECloudService) PowerOnInstance(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PowerOnInstance", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// PowerOnInstance indicates an expected call of PowerOnInstance
func (mr *MockECloudServiceMockRecorder) PowerOnInstance(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PowerOnInstance", reflect.TypeOf((*MockECloudService)(nil).PowerOnInstance), arg0)
}

// PowerOnVirtualMachine mocks base method
func (m *MockECloudService) PowerOnVirtualMachine(arg0 int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PowerOnVirtualMachine", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// PowerOnVirtualMachine indicates an expected call of PowerOnVirtualMachine
func (mr *MockECloudServiceMockRecorder) PowerOnVirtualMachine(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PowerOnVirtualMachine", reflect.TypeOf((*MockECloudService)(nil).PowerOnVirtualMachine), arg0)
}

// PowerResetInstance mocks base method
func (m *MockECloudService) PowerResetInstance(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PowerResetInstance", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// PowerResetInstance indicates an expected call of PowerResetInstance
func (mr *MockECloudServiceMockRecorder) PowerResetInstance(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PowerResetInstance", reflect.TypeOf((*MockECloudService)(nil).PowerResetInstance), arg0)
}

// PowerResetVirtualMachine mocks base method
func (m *MockECloudService) PowerResetVirtualMachine(arg0 int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PowerResetVirtualMachine", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// PowerResetVirtualMachine indicates an expected call of PowerResetVirtualMachine
func (mr *MockECloudServiceMockRecorder) PowerResetVirtualMachine(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PowerResetVirtualMachine", reflect.TypeOf((*MockECloudService)(nil).PowerResetVirtualMachine), arg0)
}

// PowerRestartInstance mocks base method
func (m *MockECloudService) PowerRestartInstance(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PowerRestartInstance", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// PowerRestartInstance indicates an expected call of PowerRestartInstance
func (mr *MockECloudServiceMockRecorder) PowerRestartInstance(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PowerRestartInstance", reflect.TypeOf((*MockECloudService)(nil).PowerRestartInstance), arg0)
}

// PowerRestartVirtualMachine mocks base method
func (m *MockECloudService) PowerRestartVirtualMachine(arg0 int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PowerRestartVirtualMachine", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// PowerRestartVirtualMachine indicates an expected call of PowerRestartVirtualMachine
func (mr *MockECloudServiceMockRecorder) PowerRestartVirtualMachine(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PowerRestartVirtualMachine", reflect.TypeOf((*MockECloudService)(nil).PowerRestartVirtualMachine), arg0)
}

// PowerShutdownInstance mocks base method
func (m *MockECloudService) PowerShutdownInstance(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PowerShutdownInstance", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// PowerShutdownInstance indicates an expected call of PowerShutdownInstance
func (mr *MockECloudServiceMockRecorder) PowerShutdownInstance(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PowerShutdownInstance", reflect.TypeOf((*MockECloudService)(nil).PowerShutdownInstance), arg0)
}

// PowerShutdownVirtualMachine mocks base method
func (m *MockECloudService) PowerShutdownVirtualMachine(arg0 int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PowerShutdownVirtualMachine", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// PowerShutdownVirtualMachine indicates an expected call of PowerShutdownVirtualMachine
func (mr *MockECloudServiceMockRecorder) PowerShutdownVirtualMachine(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PowerShutdownVirtualMachine", reflect.TypeOf((*MockECloudService)(nil).PowerShutdownVirtualMachine), arg0)
}

// RenamePodTemplate mocks base method
func (m *MockECloudService) RenamePodTemplate(arg0 int, arg1 string, arg2 ecloud.RenameTemplateRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RenamePodTemplate", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// RenamePodTemplate indicates an expected call of RenamePodTemplate
func (mr *MockECloudServiceMockRecorder) RenamePodTemplate(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RenamePodTemplate", reflect.TypeOf((*MockECloudService)(nil).RenamePodTemplate), arg0, arg1, arg2)
}

// RenameSolutionTemplate mocks base method
func (m *MockECloudService) RenameSolutionTemplate(arg0 int, arg1 string, arg2 ecloud.RenameTemplateRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RenameSolutionTemplate", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// RenameSolutionTemplate indicates an expected call of RenameSolutionTemplate
func (mr *MockECloudServiceMockRecorder) RenameSolutionTemplate(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RenameSolutionTemplate", reflect.TypeOf((*MockECloudService)(nil).RenameSolutionTemplate), arg0, arg1, arg2)
}

// UnassignFloatingIP mocks base method
func (m *MockECloudService) UnassignFloatingIP(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnassignFloatingIP", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// UnassignFloatingIP indicates an expected call of UnassignFloatingIP
func (mr *MockECloudServiceMockRecorder) UnassignFloatingIP(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnassignFloatingIP", reflect.TypeOf((*MockECloudService)(nil).UnassignFloatingIP), arg0)
}

// UnlockInstance mocks base method
func (m *MockECloudService) UnlockInstance(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnlockInstance", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// UnlockInstance indicates an expected call of UnlockInstance
func (mr *MockECloudServiceMockRecorder) UnlockInstance(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnlockInstance", reflect.TypeOf((*MockECloudService)(nil).UnlockInstance), arg0)
}
